
Experiment4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080011a  0080011a  00000ab8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b7  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001002  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7c  00000000  00000000  0000361d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000409c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092e  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000545a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea e0       	ldi	r30, 0x0A	; 10
  e0:	fa e0       	ldi	r31, 0x0A	; 10
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 31       	cpi	r26, 0x1A	; 26
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	aa e1       	ldi	r26, 0x1A	; 26
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	aa 36       	cpi	r26, 0x6A	; 106
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 102:	0c 94 03 05 	jmp	0xa06	; 0xa06 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <main>:
	// string_p=export_print_buffer();
	// copy_string_to_buffer(test_string,string_p,0);
	// UART_transmit_string(print_port,string_p,0);
	// print_memory((uint8_t *)string_in_SRAM,50);

	TWI_master_init(TWI1_Base, 25000);
 114:	48 ea       	ldi	r20, 0xA8	; 168
 116:	51 e6       	ldi	r21, 0x61	; 97
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	88 ed       	ldi	r24, 0xD8	; 216
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 a5 00 	call	0x14a	; 0x14a <TWI_master_init>
	initialize_sta013();
 124:	0e 94 53 01 	call	0x2a6	; 0x2a6 <initialize_sta013>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x14>

0000012a <stopCond>:
#include "twi.h"

void stopCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (0<<TWEA) | (1<<TWEN));
 12a:	24 e0       	ldi	r18, 0x04	; 4
 12c:	fc 01       	movw	r30, r24
 12e:	24 83       	std	Z+4, r18	; 0x04
 130:	08 95       	ret

00000132 <fullStopCond>:
}

void fullStopCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
 132:	24 e1       	ldi	r18, 0x14	; 20
 134:	fc 01       	movw	r30, r24
 136:	24 83       	std	Z+4, r18	; 0x04
 138:	08 95       	ret

0000013a <startCond>:
}

void startCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
 13a:	24 e2       	ldi	r18, 0x24	; 36
 13c:	fc 01       	movw	r30, r24
 13e:	24 83       	std	Z+4, r18	; 0x04
 140:	08 95       	ret

00000142 <restartCond>:
}

void restartCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEA) | (1<<TWEN));	
 142:	24 e4       	ldi	r18, 0x44	; 68
 144:	fc 01       	movw	r30, r24
 146:	24 83       	std	Z+4, r18	; 0x04
 148:	08 95       	ret

0000014a <TWI_master_init>:
}
    
uint8_t TWI_master_init(volatile TWI_t *TWI_addr, uint32_t I2C_freq)
{
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	9a 01       	movw	r18, r20
 15a:	ab 01       	movw	r20, r22
    TWI_ERROR_CODES error = TWI_OK; 
    uint8_t twps_val;
    uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	74 e2       	ldi	r23, 0x24	; 36
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__udivmodsi4>
 168:	69 01       	movw	r12, r18
 16a:	7a 01       	movw	r14, r20
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	c8 1a       	sub	r12, r24
 170:	d1 08       	sbc	r13, r1
 172:	e1 08       	sbc	r14, r1
 174:	f1 08       	sbc	r15, r1
 176:	c7 01       	movw	r24, r14
 178:	b6 01       	movw	r22, r12
 17a:	2e ef       	ldi	r18, 0xFE	; 254
 17c:	31 e0       	ldi	r19, 0x01	; 1
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__udivmodsi4>
    if (prescale < 1) {
 186:	21 15       	cp	r18, r1
 188:	31 05       	cpc	r19, r1
 18a:	41 05       	cpc	r20, r1
 18c:	51 05       	cpc	r21, r1
 18e:	89 f0       	breq	.+34     	; 0x1b2 <TWI_master_init+0x68>
        twps_val = 0x00;
    } else if (prescale < 4) {
 190:	24 30       	cpi	r18, 0x04	; 4
 192:	31 05       	cpc	r19, r1
 194:	41 05       	cpc	r20, r1
 196:	51 05       	cpc	r21, r1
 198:	70 f0       	brcs	.+28     	; 0x1b6 <TWI_master_init+0x6c>
        twps_val = 0x01;
    } else if (prescale < 16) {
 19a:	20 31       	cpi	r18, 0x10	; 16
 19c:	31 05       	cpc	r19, r1
 19e:	41 05       	cpc	r20, r1
 1a0:	51 05       	cpc	r21, r1
 1a2:	58 f0       	brcs	.+22     	; 0x1ba <TWI_master_init+0x70>
        twps_val = 0x02;
    } else if (prescale < 64) {
 1a4:	20 34       	cpi	r18, 0x40	; 64
 1a6:	31 05       	cpc	r19, r1
 1a8:	41 05       	cpc	r20, r1
 1aa:	51 05       	cpc	r21, r1
 1ac:	c8 f4       	brcc	.+50     	; 0x1e0 <TWI_master_init+0x96>
        twps_val = 0x03;
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <TWI_master_init+0x72>
{
    TWI_ERROR_CODES error = TWI_OK; 
    uint8_t twps_val;
    uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
        twps_val = 0x00;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <TWI_master_init+0x72>
    } else if (prescale < 4) {
        twps_val = 0x01;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <TWI_master_init+0x72>
    } else if (prescale < 16) {
        twps_val = 0x02;
 1ba:	82 e0       	ldi	r24, 0x02	; 2
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWSR = twps_val;
 1bc:	89 83       	std	Y+1, r24	; 0x01

    uint16_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	44 1f       	adc	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__udivmodsi4>
 1ce:	82 2f       	mov	r24, r18
 1d0:	93 2f       	mov	r25, r19
    if (TWBR >= 256)
 1d2:	8f 3f       	cpi	r24, 0xFF	; 255
 1d4:	91 05       	cpc	r25, r1
 1d6:	09 f0       	breq	.+2      	; 0x1da <TWI_master_init+0x90>
 1d8:	28 f4       	brcc	.+10     	; 0x1e4 <TWI_master_init+0x9a>
    {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWBR = TWBR;
 1da:	28 83       	st	Y, r18
    
    return 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <TWI_master_init+0x9c>
    } else if (prescale < 16) {
        twps_val = 0x02;
    } else if (prescale < 64) {
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <TWI_master_init+0x9c>
    TWI_addr->TWSR = twps_val;

    uint16_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
    if (TWBR >= 256)
    {
        return TWI_ERROR; // fail
 1e4:	81 e0       	ldi	r24, 0x01	; 1
    }

    TWI_addr->TWBR = TWBR;
    
    return 0;
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <TWI_master_receive>:

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	uint8_t index;
	//internal address is optional and a bonus, along with int_addr_sz
	
	
	//send device address with a 1 in LSB (SLA+R). LSB being a 1 means read, see lecture
	send_value = (device_addr<<1) | 0x01;
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	16 2f       	mov	r17, r22
 208:	11 60       	ori	r17, 0x01	; 1
	
	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
 20a:	0e 94 9d 00 	call	0x13a	; 0x13a <startCond>
	
	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
 20e:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
 210:	88 23       	and	r24, r24
 212:	ec f7       	brge	.-6      	; 0x20e <TWI_master_receive+0x1a>
	
	//read status
	temp8 = ((TWI_addr->TWCR)&0xF8); //clear lower 3 bits
 214:	8c 81       	ldd	r24, Y+4	; 0x04
 216:	88 7f       	andi	r24, 0xF8	; 248
	
	//if start sent, then send SLA+R (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat))
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	11 f0       	breq	.+4      	; 0x220 <TWI_master_receive+0x2c>
 21c:	80 31       	cpi	r24, 0x10	; 16
 21e:	19 f4       	brne	.+6      	; 0x226 <TWI_master_receive+0x32>
	{
		TWI_addr->TWDR = send_value;
 220:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	8c 83       	std	Y+4, r24	; 0x04
	{
		return TWI_ERROR; //fixme
	}
	
	//read status
	temp8 = TWI_addr->TWCR;
 226:	8c 81       	ldd	r24, Y+4	; 0x04
	
	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(temp8 == TWSR_ACK_rcvd) //SLA+R sent, ACK received
 228:	80 34       	cpi	r24, 0x40	; 64
 22a:	99 f5       	brne	.+102    	; 0x292 <TWI_master_receive+0x9e>
	{
		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	e8 16       	cp	r14, r24
 230:	f1 04       	cpc	r15, r1
 232:	21 f4       	brne	.+8      	; 0x23c <TWI_master_receive+0x48>
		{
			stopCond(TWI_addr);
 234:	ce 01       	movw	r24, r28
 236:	0e 94 95 00 	call	0x12a	; 0x12a <stopCond>
 23a:	27 c0       	rjmp	.+78     	; 0x28a <TWI_master_receive+0x96>
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			restartCond(TWI_addr);
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 a1 00 	call	0x142	; 0x142 <restartCond>
 242:	23 c0       	rjmp	.+70     	; 0x28a <TWI_master_receive+0x96>
		while((num_bytes != 0) && (1!=2)) //put error check here..
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
 244:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
 246:	88 23       	and	r24, r24
 248:	ec f7       	brge	.-6      	; 0x244 <TWI_master_receive+0x50>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_ACK_rtrnd) //data byte received, ack sent back
 24e:	80 35       	cpi	r24, 0x50	; 80
 250:	81 f4       	brne	.+32     	; 0x272 <TWI_master_receive+0x7e>
			{
				num_bytes--;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	e8 1a       	sub	r14, r24
 256:	f1 08       	sbc	r15, r1
				rcvd_arr[index] = TWI_addr->TWDR;
 258:	8b 81       	ldd	r24, Y+3	; 0x03
				index++;
				if(num_bytes == 1)
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	e8 16       	cp	r14, r24
 25e:	f1 04       	cpc	r15, r1
 260:	21 f4       	brne	.+8      	; 0x26a <TWI_master_receive+0x76>
				{
					stopCond(TWI_addr);
 262:	ce 01       	movw	r24, r28
 264:	0e 94 95 00 	call	0x12a	; 0x12a <stopCond>
 268:	10 c0       	rjmp	.+32     	; 0x28a <TWI_master_receive+0x96>
				}
				else
				{
					restartCond(TWI_addr);
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 a1 00 	call	0x142	; 0x142 <restartCond>
 270:	0c c0       	rjmp	.+24     	; 0x28a <TWI_master_receive+0x96>
				}
			}
			else if (temp8 == TWSR_NACK_rtrnd)
 272:	88 35       	cpi	r24, 0x58	; 88
 274:	51 f4       	brne	.+20     	; 0x28a <TWI_master_receive+0x96>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	e8 1a       	sub	r14, r24
 27a:	f1 08       	sbc	r15, r1
				rcvd_arr[index] = TWI_addr->TWDR;
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 99 00 	call	0x132	; 0x132 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
 284:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
 286:	84 fd       	sbrc	r24, 4
 288:	fd cf       	rjmp	.-6      	; 0x284 <TWI_master_receive+0x90>
			restartCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = 0;
		while((num_bytes != 0) && (1!=2)) //put error check here..
 28a:	e1 14       	cp	r14, r1
 28c:	f1 04       	cpc	r15, r1
 28e:	d1 f6       	brne	.-76     	; 0x244 <TWI_master_receive+0x50>
 290:	04 c0       	rjmp	.+8      	; 0x29a <TWI_master_receive+0xa6>
			
		}
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		if (temp8 == TWSR_NACK_rcvd)
 292:	88 34       	cpi	r24, 0x48	; 72
 294:	11 f4       	brne	.+4      	; 0x29a <TWI_master_receive+0xa6>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	00 c0       	rjmp	.+0      	; 0x29a <TWI_master_receive+0xa6>
		{
			return TWI_ERROR; //fixme, maybe a bus_busy error?
		}
	}
	
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <initialize_sta013>:
#include "twi_debug.h"
#include "GPIO_Outputs.h"
#include <util/delay.h>

uint8_t initialize_sta013()
{
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <initialize_sta013+0x16>
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	83 e2       	ldi	r24, 0x23	; 35
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	85 e3       	ldi	r24, 0x35	; 53
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <initialize_sta013+0x2e>
 2d8:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	85 b9       	out	0x05, r24	; 5
	GPIO_output_clear(PB, (1<<1));
	_delay_ms(.01);//this is like 1000ns or something
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	prnt_bffr=export_print_buffer();
 2e0:	0e 94 c7 01 	call	0x38e	; 0x38e <export_print_buffer>
 2e4:	a8 2e       	mov	r10, r24
 2e6:	b9 2e       	mov	r11, r25
	uint8_t array[3] = {0,0,0};
 2e8:	19 82       	std	Y+1, r1	; 0x01
 2ea:	1a 82       	std	Y+2, r1	; 0x02
 2ec:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint8_t timeout = 100;
 2ee:	14 e6       	ldi	r17, 0x64	; 100
	do 
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 3, array);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	6c 01       	movw	r12, r24
 2f6:	0f 2e       	mov	r0, r31
 2f8:	f3 e0       	ldi	r31, 0x03	; 3
 2fa:	ef 2e       	mov	r14, r31
 2fc:	f1 2c       	mov	r15, r1
 2fe:	f0 2d       	mov	r31, r0
 300:	00 e0       	ldi	r16, 0x00	; 0
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	a9 01       	movw	r20, r18
 308:	63 e4       	ldi	r22, 0x43	; 67
 30a:	88 ed       	ldi	r24, 0xD8	; 216
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TWI_master_receive>
		timeout--;
 312:	11 50       	subi	r17, 0x01	; 1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
 314:	88 23       	and	r24, r24
 316:	11 f0       	breq	.+4      	; 0x31c <initialize_sta013+0x76>
 318:	11 11       	cpse	r17, r1
 31a:	ea cf       	rjmp	.-44     	; 0x2f0 <initialize_sta013+0x4a>
	sprintf(prnt_bffr, "Received Value = %2.2bX\n\r", array[2]);
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	1f 92       	push	r1
 320:	8f 93       	push	r24
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	bf 92       	push	r11
 32c:	af 92       	push	r10
 32e:	0e 94 19 02 	call	0x432	; 0x432 <sprintf>
	UART_transmit_string(UART1, 0, prnt_bffr);
 332:	4a 2d       	mov	r20, r10
 334:	5b 2d       	mov	r21, r11
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	88 ec       	ldi	r24, 0xC8	; 200
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 ca 01 	call	0x394	; 0x394 <UART_transmit_string>
	
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	08 95       	ret

0000036a <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
 36a:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
 370:	90 81       	ld	r25, Z
		timeout++;
 372:	2f 5f       	subi	r18, 0xFF	; 255
 374:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
 376:	95 fd       	sbrc	r25, 5
 378:	03 c0       	rjmp	.+6      	; 0x380 <UART_transmit+0x16>
 37a:	21 15       	cp	r18, r1
 37c:	31 05       	cpc	r19, r1
 37e:	c1 f7       	brne	.-16     	; 0x370 <UART_transmit+0x6>
	if(0==timeout)
 380:	23 2b       	or	r18, r19
 382:	19 f0       	breq	.+6      	; 0x38a <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
 384:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
 38a:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
 38c:	08 95       	ret

0000038e <export_print_buffer>:
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 38e:	8a e1       	ldi	r24, 0x1A	; 26
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	08 95       	ret

00000394 <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	7c 01       	movw	r14, r24
 3a2:	8b 01       	movw	r16, r22
 3a4:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 3a6:	41 11       	cpse	r20, r1
 3a8:	18 c0       	rjmp	.+48     	; 0x3da <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 3aa:	fb 01       	movw	r30, r22
 3ac:	60 81       	ld	r22, Z
                index=0;
 3ae:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 3b2:	c7 01       	movw	r24, r14
 3b4:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_transmit>
			index++;
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 3ba:	f8 01       	movw	r30, r16
 3bc:	ec 0f       	add	r30, r28
 3be:	f1 1d       	adc	r31, r1
 3c0:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 3c2:	61 11       	cpse	r22, r1
 3c4:	f6 cf       	rjmp	.-20     	; 0x3b2 <UART_transmit_string+0x1e>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 3c8:	f8 01       	movw	r30, r16
 3ca:	ec 0f       	add	r30, r28
 3cc:	f1 1d       	adc	r31, r1
 3ce:	60 81       	ld	r22, Z
 3d0:	c7 01       	movw	r24, r14
 3d2:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 3d6:	cf 5f       	subi	r28, 0xFF	; 255
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <UART_transmit_string+0x48>
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	cd 17       	cp	r28, r29
 3de:	a0 f3       	brcs	.-24     	; 0x3c8 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	08 95       	ret

000003ee <__udivmodsi4>:
 3ee:	a1 e2       	ldi	r26, 0x21	; 33
 3f0:	1a 2e       	mov	r1, r26
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	fd 01       	movw	r30, r26
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__udivmodsi4_ep>

000003fa <__udivmodsi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	ee 1f       	adc	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	a2 17       	cp	r26, r18
 404:	b3 07       	cpc	r27, r19
 406:	e4 07       	cpc	r30, r20
 408:	f5 07       	cpc	r31, r21
 40a:	20 f0       	brcs	.+8      	; 0x414 <__udivmodsi4_ep>
 40c:	a2 1b       	sub	r26, r18
 40e:	b3 0b       	sbc	r27, r19
 410:	e4 0b       	sbc	r30, r20
 412:	f5 0b       	sbc	r31, r21

00000414 <__udivmodsi4_ep>:
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	1a 94       	dec	r1
 41e:	69 f7       	brne	.-38     	; 0x3fa <__udivmodsi4_loop>
 420:	60 95       	com	r22
 422:	70 95       	com	r23
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	9b 01       	movw	r18, r22
 42a:	ac 01       	movw	r20, r24
 42c:	bd 01       	movw	r22, r26
 42e:	cf 01       	movw	r24, r30
 430:	08 95       	ret

00000432 <sprintf>:
 432:	ae e0       	ldi	r26, 0x0E	; 14
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ef e1       	ldi	r30, 0x1F	; 31
 438:	f2 e0       	ldi	r31, 0x02	; 2
 43a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__prologue_saves__+0x1c>
 43e:	0d 89       	ldd	r16, Y+21	; 0x15
 440:	1e 89       	ldd	r17, Y+22	; 0x16
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	8c 83       	std	Y+4, r24	; 0x04
 446:	1a 83       	std	Y+2, r17	; 0x02
 448:	09 83       	std	Y+1, r16	; 0x01
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f e7       	ldi	r25, 0x7F	; 127
 44e:	9e 83       	std	Y+6, r25	; 0x06
 450:	8d 83       	std	Y+5, r24	; 0x05
 452:	ae 01       	movw	r20, r28
 454:	47 5e       	subi	r20, 0xE7	; 231
 456:	5f 4f       	sbci	r21, 0xFF	; 255
 458:	6f 89       	ldd	r22, Y+23	; 0x17
 45a:	78 8d       	ldd	r23, Y+24	; 0x18
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 3b 02 	call	0x476	; 0x476 <vfprintf>
 464:	ef 81       	ldd	r30, Y+7	; 0x07
 466:	f8 85       	ldd	r31, Y+8	; 0x08
 468:	e0 0f       	add	r30, r16
 46a:	f1 1f       	adc	r31, r17
 46c:	10 82       	st	Z, r1
 46e:	2e 96       	adiw	r28, 0x0e	; 14
 470:	e4 e0       	ldi	r30, 0x04	; 4
 472:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__epilogue_restores__+0x1c>

00000476 <vfprintf>:
 476:	ab e0       	ldi	r26, 0x0B	; 11
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e1 e4       	ldi	r30, 0x41	; 65
 47c:	f2 e0       	ldi	r31, 0x02	; 2
 47e:	0c 94 cc 04 	jmp	0x998	; 0x998 <__prologue_saves__>
 482:	6c 01       	movw	r12, r24
 484:	7b 01       	movw	r14, r22
 486:	8a 01       	movw	r16, r20
 488:	fc 01       	movw	r30, r24
 48a:	17 82       	std	Z+7, r1	; 0x07
 48c:	16 82       	std	Z+6, r1	; 0x06
 48e:	83 81       	ldd	r24, Z+3	; 0x03
 490:	81 ff       	sbrs	r24, 1
 492:	cc c1       	rjmp	.+920    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	3c 01       	movw	r6, r24
 49a:	f6 01       	movw	r30, r12
 49c:	93 81       	ldd	r25, Z+3	; 0x03
 49e:	f7 01       	movw	r30, r14
 4a0:	93 fd       	sbrc	r25, 3
 4a2:	85 91       	lpm	r24, Z+
 4a4:	93 ff       	sbrs	r25, 3
 4a6:	81 91       	ld	r24, Z+
 4a8:	7f 01       	movw	r14, r30
 4aa:	88 23       	and	r24, r24
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <vfprintf+0x3a>
 4ae:	ba c1       	rjmp	.+884    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 4b0:	85 32       	cpi	r24, 0x25	; 37
 4b2:	39 f4       	brne	.+14     	; 0x4c2 <vfprintf+0x4c>
 4b4:	93 fd       	sbrc	r25, 3
 4b6:	85 91       	lpm	r24, Z+
 4b8:	93 ff       	sbrs	r25, 3
 4ba:	81 91       	ld	r24, Z+
 4bc:	7f 01       	movw	r14, r30
 4be:	85 32       	cpi	r24, 0x25	; 37
 4c0:	29 f4       	brne	.+10     	; 0x4cc <vfprintf+0x56>
 4c2:	b6 01       	movw	r22, r12
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 4ca:	e7 cf       	rjmp	.-50     	; 0x49a <vfprintf+0x24>
 4cc:	91 2c       	mov	r9, r1
 4ce:	21 2c       	mov	r2, r1
 4d0:	31 2c       	mov	r3, r1
 4d2:	ff e1       	ldi	r31, 0x1F	; 31
 4d4:	f3 15       	cp	r31, r3
 4d6:	d8 f0       	brcs	.+54     	; 0x50e <vfprintf+0x98>
 4d8:	8b 32       	cpi	r24, 0x2B	; 43
 4da:	79 f0       	breq	.+30     	; 0x4fa <vfprintf+0x84>
 4dc:	38 f4       	brcc	.+14     	; 0x4ec <vfprintf+0x76>
 4de:	80 32       	cpi	r24, 0x20	; 32
 4e0:	79 f0       	breq	.+30     	; 0x500 <vfprintf+0x8a>
 4e2:	83 32       	cpi	r24, 0x23	; 35
 4e4:	a1 f4       	brne	.+40     	; 0x50e <vfprintf+0x98>
 4e6:	23 2d       	mov	r18, r3
 4e8:	20 61       	ori	r18, 0x10	; 16
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <vfprintf+0xb0>
 4ec:	8d 32       	cpi	r24, 0x2D	; 45
 4ee:	61 f0       	breq	.+24     	; 0x508 <vfprintf+0x92>
 4f0:	80 33       	cpi	r24, 0x30	; 48
 4f2:	69 f4       	brne	.+26     	; 0x50e <vfprintf+0x98>
 4f4:	23 2d       	mov	r18, r3
 4f6:	21 60       	ori	r18, 0x01	; 1
 4f8:	16 c0       	rjmp	.+44     	; 0x526 <vfprintf+0xb0>
 4fa:	83 2d       	mov	r24, r3
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	38 2e       	mov	r3, r24
 500:	e3 2d       	mov	r30, r3
 502:	e4 60       	ori	r30, 0x04	; 4
 504:	3e 2e       	mov	r3, r30
 506:	2a c0       	rjmp	.+84     	; 0x55c <vfprintf+0xe6>
 508:	f3 2d       	mov	r31, r3
 50a:	f8 60       	ori	r31, 0x08	; 8
 50c:	1d c0       	rjmp	.+58     	; 0x548 <vfprintf+0xd2>
 50e:	37 fc       	sbrc	r3, 7
 510:	2d c0       	rjmp	.+90     	; 0x56c <vfprintf+0xf6>
 512:	20 ed       	ldi	r18, 0xD0	; 208
 514:	28 0f       	add	r18, r24
 516:	2a 30       	cpi	r18, 0x0A	; 10
 518:	40 f0       	brcs	.+16     	; 0x52a <vfprintf+0xb4>
 51a:	8e 32       	cpi	r24, 0x2E	; 46
 51c:	b9 f4       	brne	.+46     	; 0x54c <vfprintf+0xd6>
 51e:	36 fc       	sbrc	r3, 6
 520:	81 c1       	rjmp	.+770    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 522:	23 2d       	mov	r18, r3
 524:	20 64       	ori	r18, 0x40	; 64
 526:	32 2e       	mov	r3, r18
 528:	19 c0       	rjmp	.+50     	; 0x55c <vfprintf+0xe6>
 52a:	36 fe       	sbrs	r3, 6
 52c:	06 c0       	rjmp	.+12     	; 0x53a <vfprintf+0xc4>
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	98 9e       	mul	r9, r24
 532:	20 0d       	add	r18, r0
 534:	11 24       	eor	r1, r1
 536:	92 2e       	mov	r9, r18
 538:	11 c0       	rjmp	.+34     	; 0x55c <vfprintf+0xe6>
 53a:	ea e0       	ldi	r30, 0x0A	; 10
 53c:	2e 9e       	mul	r2, r30
 53e:	20 0d       	add	r18, r0
 540:	11 24       	eor	r1, r1
 542:	22 2e       	mov	r2, r18
 544:	f3 2d       	mov	r31, r3
 546:	f0 62       	ori	r31, 0x20	; 32
 548:	3f 2e       	mov	r3, r31
 54a:	08 c0       	rjmp	.+16     	; 0x55c <vfprintf+0xe6>
 54c:	8c 36       	cpi	r24, 0x6C	; 108
 54e:	21 f4       	brne	.+8      	; 0x558 <vfprintf+0xe2>
 550:	83 2d       	mov	r24, r3
 552:	80 68       	ori	r24, 0x80	; 128
 554:	38 2e       	mov	r3, r24
 556:	02 c0       	rjmp	.+4      	; 0x55c <vfprintf+0xe6>
 558:	88 36       	cpi	r24, 0x68	; 104
 55a:	41 f4       	brne	.+16     	; 0x56c <vfprintf+0xf6>
 55c:	f7 01       	movw	r30, r14
 55e:	93 fd       	sbrc	r25, 3
 560:	85 91       	lpm	r24, Z+
 562:	93 ff       	sbrs	r25, 3
 564:	81 91       	ld	r24, Z+
 566:	7f 01       	movw	r14, r30
 568:	81 11       	cpse	r24, r1
 56a:	b3 cf       	rjmp	.-154    	; 0x4d2 <vfprintf+0x5c>
 56c:	98 2f       	mov	r25, r24
 56e:	9f 7d       	andi	r25, 0xDF	; 223
 570:	95 54       	subi	r25, 0x45	; 69
 572:	93 30       	cpi	r25, 0x03	; 3
 574:	28 f4       	brcc	.+10     	; 0x580 <vfprintf+0x10a>
 576:	0c 5f       	subi	r16, 0xFC	; 252
 578:	1f 4f       	sbci	r17, 0xFF	; 255
 57a:	9f e3       	ldi	r25, 0x3F	; 63
 57c:	99 83       	std	Y+1, r25	; 0x01
 57e:	0d c0       	rjmp	.+26     	; 0x59a <vfprintf+0x124>
 580:	83 36       	cpi	r24, 0x63	; 99
 582:	31 f0       	breq	.+12     	; 0x590 <vfprintf+0x11a>
 584:	83 37       	cpi	r24, 0x73	; 115
 586:	71 f0       	breq	.+28     	; 0x5a4 <vfprintf+0x12e>
 588:	83 35       	cpi	r24, 0x53	; 83
 58a:	09 f0       	breq	.+2      	; 0x58e <vfprintf+0x118>
 58c:	59 c0       	rjmp	.+178    	; 0x640 <vfprintf+0x1ca>
 58e:	21 c0       	rjmp	.+66     	; 0x5d2 <vfprintf+0x15c>
 590:	f8 01       	movw	r30, r16
 592:	80 81       	ld	r24, Z
 594:	89 83       	std	Y+1, r24	; 0x01
 596:	0e 5f       	subi	r16, 0xFE	; 254
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	88 24       	eor	r8, r8
 59c:	83 94       	inc	r8
 59e:	91 2c       	mov	r9, r1
 5a0:	53 01       	movw	r10, r6
 5a2:	13 c0       	rjmp	.+38     	; 0x5ca <vfprintf+0x154>
 5a4:	28 01       	movw	r4, r16
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
 5a8:	4f 0e       	add	r4, r31
 5aa:	51 1c       	adc	r5, r1
 5ac:	f8 01       	movw	r30, r16
 5ae:	a0 80       	ld	r10, Z
 5b0:	b1 80       	ldd	r11, Z+1	; 0x01
 5b2:	36 fe       	sbrs	r3, 6
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <vfprintf+0x146>
 5b6:	69 2d       	mov	r22, r9
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <vfprintf+0x14a>
 5bc:	6f ef       	ldi	r22, 0xFF	; 255
 5be:	7f ef       	ldi	r23, 0xFF	; 255
 5c0:	c5 01       	movw	r24, r10
 5c2:	0e 94 27 04 	call	0x84e	; 0x84e <strnlen>
 5c6:	4c 01       	movw	r8, r24
 5c8:	82 01       	movw	r16, r4
 5ca:	f3 2d       	mov	r31, r3
 5cc:	ff 77       	andi	r31, 0x7F	; 127
 5ce:	3f 2e       	mov	r3, r31
 5d0:	16 c0       	rjmp	.+44     	; 0x5fe <vfprintf+0x188>
 5d2:	28 01       	movw	r4, r16
 5d4:	22 e0       	ldi	r18, 0x02	; 2
 5d6:	42 0e       	add	r4, r18
 5d8:	51 1c       	adc	r5, r1
 5da:	f8 01       	movw	r30, r16
 5dc:	a0 80       	ld	r10, Z
 5de:	b1 80       	ldd	r11, Z+1	; 0x01
 5e0:	36 fe       	sbrs	r3, 6
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <vfprintf+0x174>
 5e4:	69 2d       	mov	r22, r9
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0x178>
 5ea:	6f ef       	ldi	r22, 0xFF	; 255
 5ec:	7f ef       	ldi	r23, 0xFF	; 255
 5ee:	c5 01       	movw	r24, r10
 5f0:	0e 94 1c 04 	call	0x838	; 0x838 <strnlen_P>
 5f4:	4c 01       	movw	r8, r24
 5f6:	f3 2d       	mov	r31, r3
 5f8:	f0 68       	ori	r31, 0x80	; 128
 5fa:	3f 2e       	mov	r3, r31
 5fc:	82 01       	movw	r16, r4
 5fe:	33 fc       	sbrc	r3, 3
 600:	1b c0       	rjmp	.+54     	; 0x638 <vfprintf+0x1c2>
 602:	82 2d       	mov	r24, r2
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	88 16       	cp	r8, r24
 608:	99 06       	cpc	r9, r25
 60a:	b0 f4       	brcc	.+44     	; 0x638 <vfprintf+0x1c2>
 60c:	b6 01       	movw	r22, r12
 60e:	80 e2       	ldi	r24, 0x20	; 32
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 616:	2a 94       	dec	r2
 618:	f4 cf       	rjmp	.-24     	; 0x602 <vfprintf+0x18c>
 61a:	f5 01       	movw	r30, r10
 61c:	37 fc       	sbrc	r3, 7
 61e:	85 91       	lpm	r24, Z+
 620:	37 fe       	sbrs	r3, 7
 622:	81 91       	ld	r24, Z+
 624:	5f 01       	movw	r10, r30
 626:	b6 01       	movw	r22, r12
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 62e:	21 10       	cpse	r2, r1
 630:	2a 94       	dec	r2
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	82 1a       	sub	r8, r18
 636:	91 08       	sbc	r9, r1
 638:	81 14       	cp	r8, r1
 63a:	91 04       	cpc	r9, r1
 63c:	71 f7       	brne	.-36     	; 0x61a <vfprintf+0x1a4>
 63e:	e8 c0       	rjmp	.+464    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 640:	84 36       	cpi	r24, 0x64	; 100
 642:	11 f0       	breq	.+4      	; 0x648 <vfprintf+0x1d2>
 644:	89 36       	cpi	r24, 0x69	; 105
 646:	41 f5       	brne	.+80     	; 0x698 <vfprintf+0x222>
 648:	f8 01       	movw	r30, r16
 64a:	37 fe       	sbrs	r3, 7
 64c:	07 c0       	rjmp	.+14     	; 0x65c <vfprintf+0x1e6>
 64e:	60 81       	ld	r22, Z
 650:	71 81       	ldd	r23, Z+1	; 0x01
 652:	82 81       	ldd	r24, Z+2	; 0x02
 654:	93 81       	ldd	r25, Z+3	; 0x03
 656:	0c 5f       	subi	r16, 0xFC	; 252
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	08 c0       	rjmp	.+16     	; 0x66c <vfprintf+0x1f6>
 65c:	60 81       	ld	r22, Z
 65e:	71 81       	ldd	r23, Z+1	; 0x01
 660:	07 2e       	mov	r0, r23
 662:	00 0c       	add	r0, r0
 664:	88 0b       	sbc	r24, r24
 666:	99 0b       	sbc	r25, r25
 668:	0e 5f       	subi	r16, 0xFE	; 254
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	f3 2d       	mov	r31, r3
 66e:	ff 76       	andi	r31, 0x6F	; 111
 670:	3f 2e       	mov	r3, r31
 672:	97 ff       	sbrs	r25, 7
 674:	09 c0       	rjmp	.+18     	; 0x688 <vfprintf+0x212>
 676:	90 95       	com	r25
 678:	80 95       	com	r24
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	f0 68       	ori	r31, 0x80	; 128
 686:	3f 2e       	mov	r3, r31
 688:	2a e0       	ldi	r18, 0x0A	; 10
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	a3 01       	movw	r20, r6
 68e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__ultoa_invert>
 692:	88 2e       	mov	r8, r24
 694:	86 18       	sub	r8, r6
 696:	45 c0       	rjmp	.+138    	; 0x722 <vfprintf+0x2ac>
 698:	85 37       	cpi	r24, 0x75	; 117
 69a:	31 f4       	brne	.+12     	; 0x6a8 <vfprintf+0x232>
 69c:	23 2d       	mov	r18, r3
 69e:	2f 7e       	andi	r18, 0xEF	; 239
 6a0:	b2 2e       	mov	r11, r18
 6a2:	2a e0       	ldi	r18, 0x0A	; 10
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	25 c0       	rjmp	.+74     	; 0x6f2 <vfprintf+0x27c>
 6a8:	93 2d       	mov	r25, r3
 6aa:	99 7f       	andi	r25, 0xF9	; 249
 6ac:	b9 2e       	mov	r11, r25
 6ae:	8f 36       	cpi	r24, 0x6F	; 111
 6b0:	c1 f0       	breq	.+48     	; 0x6e2 <vfprintf+0x26c>
 6b2:	18 f4       	brcc	.+6      	; 0x6ba <vfprintf+0x244>
 6b4:	88 35       	cpi	r24, 0x58	; 88
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <vfprintf+0x260>
 6b8:	b5 c0       	rjmp	.+362    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 6ba:	80 37       	cpi	r24, 0x70	; 112
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <vfprintf+0x24e>
 6be:	88 37       	cpi	r24, 0x78	; 120
 6c0:	21 f0       	breq	.+8      	; 0x6ca <vfprintf+0x254>
 6c2:	b0 c0       	rjmp	.+352    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 6c4:	e9 2f       	mov	r30, r25
 6c6:	e0 61       	ori	r30, 0x10	; 16
 6c8:	be 2e       	mov	r11, r30
 6ca:	b4 fe       	sbrs	r11, 4
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <vfprintf+0x272>
 6ce:	fb 2d       	mov	r31, r11
 6d0:	f4 60       	ori	r31, 0x04	; 4
 6d2:	bf 2e       	mov	r11, r31
 6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <vfprintf+0x272>
 6d6:	34 fe       	sbrs	r3, 4
 6d8:	0a c0       	rjmp	.+20     	; 0x6ee <vfprintf+0x278>
 6da:	29 2f       	mov	r18, r25
 6dc:	26 60       	ori	r18, 0x06	; 6
 6de:	b2 2e       	mov	r11, r18
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <vfprintf+0x278>
 6e2:	28 e0       	ldi	r18, 0x08	; 8
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <vfprintf+0x27c>
 6e8:	20 e1       	ldi	r18, 0x10	; 16
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <vfprintf+0x27c>
 6ee:	20 e1       	ldi	r18, 0x10	; 16
 6f0:	32 e0       	ldi	r19, 0x02	; 2
 6f2:	f8 01       	movw	r30, r16
 6f4:	b7 fe       	sbrs	r11, 7
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <vfprintf+0x290>
 6f8:	60 81       	ld	r22, Z
 6fa:	71 81       	ldd	r23, Z+1	; 0x01
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0x29c>
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 5f       	subi	r16, 0xFE	; 254
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	a3 01       	movw	r20, r6
 714:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__ultoa_invert>
 718:	88 2e       	mov	r8, r24
 71a:	86 18       	sub	r8, r6
 71c:	fb 2d       	mov	r31, r11
 71e:	ff 77       	andi	r31, 0x7F	; 127
 720:	3f 2e       	mov	r3, r31
 722:	36 fe       	sbrs	r3, 6
 724:	0d c0       	rjmp	.+26     	; 0x740 <vfprintf+0x2ca>
 726:	23 2d       	mov	r18, r3
 728:	2e 7f       	andi	r18, 0xFE	; 254
 72a:	a2 2e       	mov	r10, r18
 72c:	89 14       	cp	r8, r9
 72e:	58 f4       	brcc	.+22     	; 0x746 <vfprintf+0x2d0>
 730:	34 fe       	sbrs	r3, 4
 732:	0b c0       	rjmp	.+22     	; 0x74a <vfprintf+0x2d4>
 734:	32 fc       	sbrc	r3, 2
 736:	09 c0       	rjmp	.+18     	; 0x74a <vfprintf+0x2d4>
 738:	83 2d       	mov	r24, r3
 73a:	8e 7e       	andi	r24, 0xEE	; 238
 73c:	a8 2e       	mov	r10, r24
 73e:	05 c0       	rjmp	.+10     	; 0x74a <vfprintf+0x2d4>
 740:	b8 2c       	mov	r11, r8
 742:	a3 2c       	mov	r10, r3
 744:	03 c0       	rjmp	.+6      	; 0x74c <vfprintf+0x2d6>
 746:	b8 2c       	mov	r11, r8
 748:	01 c0       	rjmp	.+2      	; 0x74c <vfprintf+0x2d6>
 74a:	b9 2c       	mov	r11, r9
 74c:	a4 fe       	sbrs	r10, 4
 74e:	0f c0       	rjmp	.+30     	; 0x76e <vfprintf+0x2f8>
 750:	fe 01       	movw	r30, r28
 752:	e8 0d       	add	r30, r8
 754:	f1 1d       	adc	r31, r1
 756:	80 81       	ld	r24, Z
 758:	80 33       	cpi	r24, 0x30	; 48
 75a:	21 f4       	brne	.+8      	; 0x764 <vfprintf+0x2ee>
 75c:	9a 2d       	mov	r25, r10
 75e:	99 7e       	andi	r25, 0xE9	; 233
 760:	a9 2e       	mov	r10, r25
 762:	09 c0       	rjmp	.+18     	; 0x776 <vfprintf+0x300>
 764:	a2 fe       	sbrs	r10, 2
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0x2fe>
 768:	b3 94       	inc	r11
 76a:	b3 94       	inc	r11
 76c:	04 c0       	rjmp	.+8      	; 0x776 <vfprintf+0x300>
 76e:	8a 2d       	mov	r24, r10
 770:	86 78       	andi	r24, 0x86	; 134
 772:	09 f0       	breq	.+2      	; 0x776 <vfprintf+0x300>
 774:	b3 94       	inc	r11
 776:	a3 fc       	sbrc	r10, 3
 778:	11 c0       	rjmp	.+34     	; 0x79c <vfprintf+0x326>
 77a:	a0 fe       	sbrs	r10, 0
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0x314>
 77e:	b2 14       	cp	r11, r2
 780:	88 f4       	brcc	.+34     	; 0x7a4 <vfprintf+0x32e>
 782:	28 0c       	add	r2, r8
 784:	92 2c       	mov	r9, r2
 786:	9b 18       	sub	r9, r11
 788:	0e c0       	rjmp	.+28     	; 0x7a6 <vfprintf+0x330>
 78a:	b2 14       	cp	r11, r2
 78c:	60 f4       	brcc	.+24     	; 0x7a6 <vfprintf+0x330>
 78e:	b6 01       	movw	r22, r12
 790:	80 e2       	ldi	r24, 0x20	; 32
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 798:	b3 94       	inc	r11
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <vfprintf+0x314>
 79c:	b2 14       	cp	r11, r2
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <vfprintf+0x330>
 7a0:	2b 18       	sub	r2, r11
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <vfprintf+0x332>
 7a4:	98 2c       	mov	r9, r8
 7a6:	21 2c       	mov	r2, r1
 7a8:	a4 fe       	sbrs	r10, 4
 7aa:	10 c0       	rjmp	.+32     	; 0x7cc <vfprintf+0x356>
 7ac:	b6 01       	movw	r22, r12
 7ae:	80 e3       	ldi	r24, 0x30	; 48
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 7b6:	a2 fe       	sbrs	r10, 2
 7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <vfprintf+0x372>
 7ba:	a1 fc       	sbrc	r10, 1
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x34e>
 7be:	88 e7       	ldi	r24, 0x78	; 120
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x352>
 7c4:	88 e5       	ldi	r24, 0x58	; 88
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	b6 01       	movw	r22, r12
 7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <vfprintf+0x36e>
 7cc:	8a 2d       	mov	r24, r10
 7ce:	86 78       	andi	r24, 0x86	; 134
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <vfprintf+0x372>
 7d2:	a1 fe       	sbrs	r10, 1
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0x364>
 7d6:	8b e2       	ldi	r24, 0x2B	; 43
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <vfprintf+0x366>
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	a7 fc       	sbrc	r10, 7
 7de:	8d e2       	ldi	r24, 0x2D	; 45
 7e0:	b6 01       	movw	r22, r12
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 7e8:	89 14       	cp	r8, r9
 7ea:	38 f4       	brcc	.+14     	; 0x7fa <vfprintf+0x384>
 7ec:	b6 01       	movw	r22, r12
 7ee:	80 e3       	ldi	r24, 0x30	; 48
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 7f6:	9a 94       	dec	r9
 7f8:	f7 cf       	rjmp	.-18     	; 0x7e8 <vfprintf+0x372>
 7fa:	8a 94       	dec	r8
 7fc:	f3 01       	movw	r30, r6
 7fe:	e8 0d       	add	r30, r8
 800:	f1 1d       	adc	r31, r1
 802:	80 81       	ld	r24, Z
 804:	b6 01       	movw	r22, r12
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 80c:	81 10       	cpse	r8, r1
 80e:	f5 cf       	rjmp	.-22     	; 0x7fa <vfprintf+0x384>
 810:	22 20       	and	r2, r2
 812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	42 ce       	rjmp	.-892    	; 0x49a <vfprintf+0x24>
 816:	b6 01       	movw	r22, r12
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 32 04 	call	0x864	; 0x864 <fputc>
 820:	2a 94       	dec	r2
 822:	f6 cf       	rjmp	.-20     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 824:	f6 01       	movw	r30, r12
 826:	86 81       	ldd	r24, Z+6	; 0x06
 828:	97 81       	ldd	r25, Z+7	; 0x07
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	8f ef       	ldi	r24, 0xFF	; 255
 82e:	9f ef       	ldi	r25, 0xFF	; 255
 830:	2b 96       	adiw	r28, 0x0b	; 11
 832:	e2 e1       	ldi	r30, 0x12	; 18
 834:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__epilogue_restores__>

00000838 <strnlen_P>:
 838:	fc 01       	movw	r30, r24
 83a:	05 90       	lpm	r0, Z+
 83c:	61 50       	subi	r22, 0x01	; 1
 83e:	70 40       	sbci	r23, 0x00	; 0
 840:	01 10       	cpse	r0, r1
 842:	d8 f7       	brcc	.-10     	; 0x83a <strnlen_P+0x2>
 844:	80 95       	com	r24
 846:	90 95       	com	r25
 848:	8e 0f       	add	r24, r30
 84a:	9f 1f       	adc	r25, r31
 84c:	08 95       	ret

0000084e <strnlen>:
 84e:	fc 01       	movw	r30, r24
 850:	61 50       	subi	r22, 0x01	; 1
 852:	70 40       	sbci	r23, 0x00	; 0
 854:	01 90       	ld	r0, Z+
 856:	01 10       	cpse	r0, r1
 858:	d8 f7       	brcc	.-10     	; 0x850 <strnlen+0x2>
 85a:	80 95       	com	r24
 85c:	90 95       	com	r25
 85e:	8e 0f       	add	r24, r30
 860:	9f 1f       	adc	r25, r31
 862:	08 95       	ret

00000864 <fputc>:
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	fb 01       	movw	r30, r22
 86e:	23 81       	ldd	r18, Z+3	; 0x03
 870:	21 fd       	sbrc	r18, 1
 872:	03 c0       	rjmp	.+6      	; 0x87a <fputc+0x16>
 874:	8f ef       	ldi	r24, 0xFF	; 255
 876:	9f ef       	ldi	r25, 0xFF	; 255
 878:	2c c0       	rjmp	.+88     	; 0x8d2 <fputc+0x6e>
 87a:	22 ff       	sbrs	r18, 2
 87c:	16 c0       	rjmp	.+44     	; 0x8aa <fputc+0x46>
 87e:	46 81       	ldd	r20, Z+6	; 0x06
 880:	57 81       	ldd	r21, Z+7	; 0x07
 882:	24 81       	ldd	r18, Z+4	; 0x04
 884:	35 81       	ldd	r19, Z+5	; 0x05
 886:	42 17       	cp	r20, r18
 888:	53 07       	cpc	r21, r19
 88a:	44 f4       	brge	.+16     	; 0x89c <fputc+0x38>
 88c:	a0 81       	ld	r26, Z
 88e:	b1 81       	ldd	r27, Z+1	; 0x01
 890:	9d 01       	movw	r18, r26
 892:	2f 5f       	subi	r18, 0xFF	; 255
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	31 83       	std	Z+1, r19	; 0x01
 898:	20 83       	st	Z, r18
 89a:	8c 93       	st	X, r24
 89c:	26 81       	ldd	r18, Z+6	; 0x06
 89e:	37 81       	ldd	r19, Z+7	; 0x07
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	37 83       	std	Z+7, r19	; 0x07
 8a6:	26 83       	std	Z+6, r18	; 0x06
 8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <fputc+0x6e>
 8aa:	8b 01       	movw	r16, r22
 8ac:	ec 01       	movw	r28, r24
 8ae:	fb 01       	movw	r30, r22
 8b0:	00 84       	ldd	r0, Z+8	; 0x08
 8b2:	f1 85       	ldd	r31, Z+9	; 0x09
 8b4:	e0 2d       	mov	r30, r0
 8b6:	09 95       	icall
 8b8:	89 2b       	or	r24, r25
 8ba:	e1 f6       	brne	.-72     	; 0x874 <fputc+0x10>
 8bc:	d8 01       	movw	r26, r16
 8be:	16 96       	adiw	r26, 0x06	; 6
 8c0:	8d 91       	ld	r24, X+
 8c2:	9c 91       	ld	r25, X
 8c4:	17 97       	sbiw	r26, 0x07	; 7
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	17 96       	adiw	r26, 0x07	; 7
 8ca:	9c 93       	st	X, r25
 8cc:	8e 93       	st	-X, r24
 8ce:	16 97       	sbiw	r26, 0x06	; 6
 8d0:	ce 01       	movw	r24, r28
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <__ultoa_invert>:
 8dc:	fa 01       	movw	r30, r20
 8de:	aa 27       	eor	r26, r26
 8e0:	28 30       	cpi	r18, 0x08	; 8
 8e2:	51 f1       	breq	.+84     	; 0x938 <__stack+0x39>
 8e4:	20 31       	cpi	r18, 0x10	; 16
 8e6:	81 f1       	breq	.+96     	; 0x948 <__stack+0x49>
 8e8:	e8 94       	clt
 8ea:	6f 93       	push	r22
 8ec:	6e 7f       	andi	r22, 0xFE	; 254
 8ee:	6e 5f       	subi	r22, 0xFE	; 254
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	af 4f       	sbci	r26, 0xFF	; 255
 8f8:	b1 e0       	ldi	r27, 0x01	; 1
 8fa:	3e d0       	rcall	.+124    	; 0x978 <__stack+0x79>
 8fc:	b4 e0       	ldi	r27, 0x04	; 4
 8fe:	3c d0       	rcall	.+120    	; 0x978 <__stack+0x79>
 900:	67 0f       	add	r22, r23
 902:	78 1f       	adc	r23, r24
 904:	89 1f       	adc	r24, r25
 906:	9a 1f       	adc	r25, r26
 908:	a1 1d       	adc	r26, r1
 90a:	68 0f       	add	r22, r24
 90c:	79 1f       	adc	r23, r25
 90e:	8a 1f       	adc	r24, r26
 910:	91 1d       	adc	r25, r1
 912:	a1 1d       	adc	r26, r1
 914:	6a 0f       	add	r22, r26
 916:	71 1d       	adc	r23, r1
 918:	81 1d       	adc	r24, r1
 91a:	91 1d       	adc	r25, r1
 91c:	a1 1d       	adc	r26, r1
 91e:	20 d0       	rcall	.+64     	; 0x960 <__stack+0x61>
 920:	09 f4       	brne	.+2      	; 0x924 <__stack+0x25>
 922:	68 94       	set
 924:	3f 91       	pop	r19
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	26 9f       	mul	r18, r22
 92a:	11 24       	eor	r1, r1
 92c:	30 19       	sub	r19, r0
 92e:	30 5d       	subi	r19, 0xD0	; 208
 930:	31 93       	st	Z+, r19
 932:	de f6       	brtc	.-74     	; 0x8ea <__ultoa_invert+0xe>
 934:	cf 01       	movw	r24, r30
 936:	08 95       	ret
 938:	46 2f       	mov	r20, r22
 93a:	47 70       	andi	r20, 0x07	; 7
 93c:	40 5d       	subi	r20, 0xD0	; 208
 93e:	41 93       	st	Z+, r20
 940:	b3 e0       	ldi	r27, 0x03	; 3
 942:	0f d0       	rcall	.+30     	; 0x962 <__stack+0x63>
 944:	c9 f7       	brne	.-14     	; 0x938 <__stack+0x39>
 946:	f6 cf       	rjmp	.-20     	; 0x934 <__stack+0x35>
 948:	46 2f       	mov	r20, r22
 94a:	4f 70       	andi	r20, 0x0F	; 15
 94c:	40 5d       	subi	r20, 0xD0	; 208
 94e:	4a 33       	cpi	r20, 0x3A	; 58
 950:	18 f0       	brcs	.+6      	; 0x958 <__stack+0x59>
 952:	49 5d       	subi	r20, 0xD9	; 217
 954:	31 fd       	sbrc	r19, 1
 956:	40 52       	subi	r20, 0x20	; 32
 958:	41 93       	st	Z+, r20
 95a:	02 d0       	rcall	.+4      	; 0x960 <__stack+0x61>
 95c:	a9 f7       	brne	.-22     	; 0x948 <__stack+0x49>
 95e:	ea cf       	rjmp	.-44     	; 0x934 <__stack+0x35>
 960:	b4 e0       	ldi	r27, 0x04	; 4
 962:	a6 95       	lsr	r26
 964:	97 95       	ror	r25
 966:	87 95       	ror	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	ba 95       	dec	r27
 96e:	c9 f7       	brne	.-14     	; 0x962 <__stack+0x63>
 970:	00 97       	sbiw	r24, 0x00	; 0
 972:	61 05       	cpc	r22, r1
 974:	71 05       	cpc	r23, r1
 976:	08 95       	ret
 978:	9b 01       	movw	r18, r22
 97a:	ac 01       	movw	r20, r24
 97c:	0a 2e       	mov	r0, r26
 97e:	06 94       	lsr	r0
 980:	57 95       	ror	r21
 982:	47 95       	ror	r20
 984:	37 95       	ror	r19
 986:	27 95       	ror	r18
 988:	ba 95       	dec	r27
 98a:	c9 f7       	brne	.-14     	; 0x97e <__stack+0x7f>
 98c:	62 0f       	add	r22, r18
 98e:	73 1f       	adc	r23, r19
 990:	84 1f       	adc	r24, r20
 992:	95 1f       	adc	r25, r21
 994:	a0 1d       	adc	r26, r0
 996:	08 95       	ret

00000998 <__prologue_saves__>:
 998:	2f 92       	push	r2
 99a:	3f 92       	push	r3
 99c:	4f 92       	push	r4
 99e:	5f 92       	push	r5
 9a0:	6f 92       	push	r6
 9a2:	7f 92       	push	r7
 9a4:	8f 92       	push	r8
 9a6:	9f 92       	push	r9
 9a8:	af 92       	push	r10
 9aa:	bf 92       	push	r11
 9ac:	cf 92       	push	r12
 9ae:	df 92       	push	r13
 9b0:	ef 92       	push	r14
 9b2:	ff 92       	push	r15
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	ca 1b       	sub	r28, r26
 9c2:	db 0b       	sbc	r29, r27
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	09 94       	ijmp

000009d0 <__epilogue_restores__>:
 9d0:	2a 88       	ldd	r2, Y+18	; 0x12
 9d2:	39 88       	ldd	r3, Y+17	; 0x11
 9d4:	48 88       	ldd	r4, Y+16	; 0x10
 9d6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9d8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9da:	7d 84       	ldd	r7, Y+13	; 0x0d
 9dc:	8c 84       	ldd	r8, Y+12	; 0x0c
 9de:	9b 84       	ldd	r9, Y+11	; 0x0b
 9e0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9e2:	b9 84       	ldd	r11, Y+9	; 0x09
 9e4:	c8 84       	ldd	r12, Y+8	; 0x08
 9e6:	df 80       	ldd	r13, Y+7	; 0x07
 9e8:	ee 80       	ldd	r14, Y+6	; 0x06
 9ea:	fd 80       	ldd	r15, Y+5	; 0x05
 9ec:	0c 81       	ldd	r16, Y+4	; 0x04
 9ee:	1b 81       	ldd	r17, Y+3	; 0x03
 9f0:	aa 81       	ldd	r26, Y+2	; 0x02
 9f2:	b9 81       	ldd	r27, Y+1	; 0x01
 9f4:	ce 0f       	add	r28, r30
 9f6:	d1 1d       	adc	r29, r1
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	ed 01       	movw	r28, r26
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
