
Experiment4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000dfa  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800146  00800146  00000ed4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e4  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001126  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf3  00000000  00000000  0000429a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d5  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f04  00000000  00000000  000059e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000068e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  68:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  6c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  70:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  7c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  80:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  84:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  88:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  8c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  90:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  94:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  98:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  9c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  ac:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  bc:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	48 65       	ori	r20, 0x58	; 88
  ce:	6c 6c       	ori	r22, 0xCC	; 204
  d0:	6f 20       	and	r6, r15
  d2:	57 6f       	ori	r21, 0xF7	; 247
  d4:	72 6c       	ori	r23, 0xC2	; 194
  d6:	64 21       	and	r22, r4
  d8:	0a 0d       	add	r16, r10
	...

000000db <Prnt_bytes_prnt>:
  db:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
  eb:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
  fb:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
 10b:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...
	...

0000011c <__ctors_end>:
 11c:	11 24       	eor	r1, r1
 11e:	1f be       	out	0x3f, r1	; 63
 120:	cf ef       	ldi	r28, 0xFF	; 255
 122:	d8 e0       	ldi	r29, 0x08	; 8
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	ea ef       	ldi	r30, 0xFA	; 250
 130:	fd e0       	ldi	r31, 0x0D	; 13
 132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
 134:	05 90       	lpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	a6 34       	cpi	r26, 0x46	; 70
 13a:	b1 07       	cpc	r27, r17
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	a6 e4       	ldi	r26, 0x46	; 70
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
 146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
 148:	a6 39       	cpi	r26, 0x96	; 150
 14a:	b2 07       	cpc	r27, r18
 14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
 14e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
 152:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 15a:	fc 01       	movw	r30, r24
 15c:	21 81       	ldd	r18, Z+1	; 0x01
 15e:	62 2b       	or	r22, r18
 160:	61 83       	std	Z+1, r22	; 0x01
 162:	08 95       	ret

00000164 <LEDS_init>:
***************************************************************/

void LEDS_init(volatile GPIO_t * port_addr, uint8_t pin_mask, uint8_t active)
{
	//Set Port Pin to be an output with initial value '1'
	if(ACTIVE_LOW==active)
 164:	41 11       	cpse	r20, r1
 166:	05 c0       	rjmp	.+10     	; 0x172 <LEDS_init+0xe>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 168:	fc 01       	movw	r30, r24
 16a:	22 81       	ldd	r18, Z+2	; 0x02
 16c:	26 2b       	or	r18, r22
 16e:	22 83       	std	Z+2, r18	; 0x02
 170:	06 c0       	rjmp	.+12     	; 0x17e <LEDS_init+0x1a>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 172:	fc 01       	movw	r30, r24
 174:	22 81       	ldd	r18, Z+2	; 0x02
 176:	36 2f       	mov	r19, r22
 178:	30 95       	com	r19
 17a:	23 23       	and	r18, r19
 17c:	22 83       	std	Z+2, r18	; 0x02
	}
	else
	{
		GPIO_output_clear(port_addr,pin_mask);
	}
	GPIO_output_init(port_addr,pin_mask);
 17e:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_output_init>
 182:	08 95       	ret

00000184 <LEDS_on>:
*            Alternative version below eliminates the if for faster execution
***************************************************************/

void LEDS_on(volatile GPIO_t * port_addr, uint8_t pin_mask, uint8_t active)
{
	if(ACTIVE_LOW==active)
 184:	41 11       	cpse	r20, r1
 186:	06 c0       	rjmp	.+12     	; 0x194 <LEDS_on+0x10>
 188:	fc 01       	movw	r30, r24
 18a:	22 81       	ldd	r18, Z+2	; 0x02
 18c:	60 95       	com	r22
 18e:	62 23       	and	r22, r18
 190:	62 83       	std	Z+2, r22	; 0x02
 192:	08 95       	ret
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 194:	fc 01       	movw	r30, r24
 196:	22 81       	ldd	r18, Z+2	; 0x02
 198:	62 2b       	or	r22, r18
 19a:	62 83       	std	Z+2, r22	; 0x02
 19c:	08 95       	ret

0000019e <LEDS_off>:
*            Alternative version below eliminates the if for faster execution
***************************************************************/

void LEDS_off(volatile GPIO_t * port_addr, uint8_t pin_mask, uint8_t active)
{
	if(ACTIVE_LOW==active)
 19e:	41 11       	cpse	r20, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <LEDS_off+0xe>
 1a2:	fc 01       	movw	r30, r24
 1a4:	22 81       	ldd	r18, Z+2	; 0x02
 1a6:	62 2b       	or	r22, r18
 1a8:	62 83       	std	Z+2, r22	; 0x02
 1aa:	08 95       	ret
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 1ac:	fc 01       	movw	r30, r24
 1ae:	22 81       	ldd	r18, Z+2	; 0x02
 1b0:	60 95       	com	r22
 1b2:	62 23       	and	r22, r18
 1b4:	62 83       	std	Z+2, r22	; 0x02
 1b6:	08 95       	ret

000001b8 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(volatile UART_t * UART_addr)
{
 1b8:	8f 92       	push	r8
 1ba:	9f 92       	push	r9
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	2b 97       	sbiw	r28, 0x0b	; 11
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <long_serial_input+0x3a>
      {
        input_values[index]=0;
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e8 0f       	add	r30, r24
 1ec:	f1 1d       	adc	r31, r1
 1ee:	10 82       	st	Z, r1
uint32_t long_serial_input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	8b 30       	cpi	r24, 0x0B	; 11
 1f4:	b0 f3       	brcs	.-20     	; 0x1e2 <long_serial_input+0x2a>
 1f6:	88 24       	eor	r8, r8
 1f8:	8a 94       	dec	r8
 1fa:	98 2c       	mov	r9, r8
 1fc:	54 01       	movw	r10, r8
 1fe:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_receive(UART_addr);
 200:	c7 01       	movw	r24, r14
 202:	0e 94 57 03 	call	0x6ae	; 0x6ae <UART_receive>
 206:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
 208:	80 ed       	ldi	r24, 0xD0	; 208
 20a:	81 0f       	add	r24, r17
 20c:	8a 30       	cpi	r24, 0x0A	; 10
 20e:	68 f4       	brcc	.+26     	; 0x22a <long_serial_input+0x72>
         {
           UART_transmit(UART_addr,input);    // echo valid inputs only
 210:	61 2f       	mov	r22, r17
 212:	c7 01       	movw	r24, r14
 214:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
		   input_values[index]=input;
 218:	e1 e0       	ldi	r30, 0x01	; 1
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ec 0f       	add	r30, r28
 21e:	fd 1f       	adc	r31, r29
 220:	e0 0f       	add	r30, r16
 222:	f1 1d       	adc	r31, r1
 224:	10 83       	st	Z, r17
           index++;
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	2d c0       	rjmp	.+90     	; 0x284 <long_serial_input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
 22a:	18 30       	cpi	r17, 0x08	; 8
 22c:	11 f0       	breq	.+4      	; 0x232 <long_serial_input+0x7a>
 22e:	1f 37       	cpi	r17, 0x7F	; 127
 230:	a9 f4       	brne	.+42     	; 0x25c <long_serial_input+0xa4>
         {
           index--;
 232:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e0 0f       	add	r30, r16
 23e:	f1 1d       	adc	r31, r1
 240:	10 82       	st	Z, r1
		   UART_transmit(UART_addr,BS);
 242:	68 e0       	ldi	r22, 0x08	; 8
 244:	c7 01       	movw	r24, r14
 246:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
           UART_transmit(UART_addr,space);
 24a:	60 e2       	ldi	r22, 0x20	; 32
 24c:	c7 01       	movw	r24, r14
 24e:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
           UART_transmit(UART_addr,BS);
 252:	68 e0       	ldi	r22, 0x08	; 8
 254:	c7 01       	movw	r24, r14
 256:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
 25a:	14 c0       	rjmp	.+40     	; 0x284 <long_serial_input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
 25c:	1d 30       	cpi	r17, 0x0D	; 13
 25e:	21 f0       	breq	.+8      	; 0x268 <long_serial_input+0xb0>
 260:	1a 30       	cpi	r17, 0x0A	; 10
 262:	11 f0       	breq	.+4      	; 0x268 <long_serial_input+0xb0>
 264:	1e 32       	cpi	r17, 0x2E	; 46
 266:	71 f4       	brne	.+28     	; 0x284 <long_serial_input+0xcc>
         {
            output_value=atol(input_values);
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <atol>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
 274:	6d e0       	ldi	r22, 0x0D	; 13
 276:	c7 01       	movw	r24, r14
 278:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
			UART_transmit(UART_addr,LF);
 27c:	6a e0       	ldi	r22, 0x0A	; 10
 27e:	c7 01       	movw	r24, r14
 280:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
         }
         if(index==10)
 284:	0a 30       	cpi	r16, 0x0A	; 10
 286:	71 f4       	brne	.+28     	; 0x2a4 <long_serial_input+0xec>
         {
            output_value=atol(input_values);
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <atol>
 290:	4b 01       	movw	r8, r22
 292:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
 294:	6d e0       	ldi	r22, 0x0D	; 13
 296:	c7 01       	movw	r24, r14
 298:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
			UART_transmit(UART_addr,LF);
 29c:	6a e0       	ldi	r22, 0x0A	; 10
 29e:	c7 01       	movw	r24, r14
 2a0:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
         }
      }while(output_value==0xffffffff);
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	88 16       	cp	r8, r24
 2a8:	98 06       	cpc	r9, r24
 2aa:	a8 06       	cpc	r10, r24
 2ac:	b8 06       	cpc	r11, r24
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <long_serial_input+0xfa>
 2b0:	a7 cf       	rjmp	.-178    	; 0x200 <long_serial_input+0x48>

return output_value;
}
 2b2:	c5 01       	movw	r24, r10
 2b4:	b4 01       	movw	r22, r8
 2b6:	2b 96       	adiw	r28, 0x0b	; 11
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	08 95       	ret

000002d8 <main>:

const char test_string[15] PROGMEM = "Hello World!\n\r";


int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	a9 97       	sbiw	r28, 0x29	; 41
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	char temp8;
	char string_in_SRAM [41] = "This is a string in SRAM - Roger Younger";
 2ec:	89 e2       	ldi	r24, 0x29	; 41
 2ee:	e7 e0       	ldi	r30, 0x07	; 7
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	de 01       	movw	r26, r28
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	01 90       	ld	r0, Z+
 2f8:	0d 92       	st	X+, r0
 2fa:	8a 95       	dec	r24
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x1e>
	char *string_p;
	uint32_t temp32;

	LEDS_init(LED0_PORT, LED0_PIN, ACTIVE_LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	60 e8       	ldi	r22, 0x80	; 128
 302:	86 e2       	ldi	r24, 0x26	; 38
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 b2 00 	call	0x164	; 0x164 <LEDS_init>

	LEDS_init(LED1_PORT, LED1_PIN, ACTIVE_LOW);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	68 e0       	ldi	r22, 0x08	; 8
 30e:	83 e2       	ldi	r24, 0x23	; 35
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 b2 00 	call	0x164	; 0x164 <LEDS_init>

	LEDS_init(LED2_PORT, LED2_PIN, ACTIVE_LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	60 e1       	ldi	r22, 0x10	; 16
 31a:	8c e2       	ldi	r24, 0x2C	; 44
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 b2 00 	call	0x164	; 0x164 <LEDS_init>

	LEDS_init(LED3_PORT, LED3_PIN, ACTIVE_LOW);
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	60 e8       	ldi	r22, 0x80	; 128
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 b2 00 	call	0x164	; 0x164 <LEDS_init>
	UART_init(UART1,9600);
 32e:	40 e8       	ldi	r20, 0x80	; 128
 330:	55 e2       	ldi	r21, 0x25	; 37
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	88 ec       	ldi	r24, 0xC8	; 200
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_init>
	string_p=export_print_buffer();
 33e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <export_print_buffer>
 342:	08 2f       	mov	r16, r24
 344:	19 2f       	mov	r17, r25
	copy_string_to_buffer(test_string,string_p,0);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	68 2f       	mov	r22, r24
 34a:	79 2f       	mov	r23, r25
 34c:	8c ec       	ldi	r24, 0xCC	; 204
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 60 03 	call	0x6c0	; 0x6c0 <copy_string_to_buffer>
	UART_transmit_string(print_port,string_p,0);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	60 2f       	mov	r22, r16
 358:	71 2f       	mov	r23, r17
 35a:	88 ec       	ldi	r24, 0xC8	; 200
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
	print_memory((uint8_t *)string_in_SRAM,50);
 362:	62 e3       	ldi	r22, 0x32	; 50
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <print_memory>
	while (1)
	{
		temp8=UART_receive(UART1);
 36e:	88 ec       	ldi	r24, 0xC8	; 200
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 57 03 	call	0x6ae	; 0x6ae <UART_receive>
		UART_transmit(UART1,temp8);
 376:	68 2f       	mov	r22, r24
 378:	88 ec       	ldi	r24, 0xC8	; 200
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
		
		LEDS_on(LED0_PORT, LED0_PIN, ACTIVE_LOW);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	60 e8       	ldi	r22, 0x80	; 128
 384:	86 e2       	ldi	r24, 0x26	; 38
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 c2 00 	call	0x184	; 0x184 <LEDS_on>
		UART_transmit(UART1,'U');
 38c:	65 e5       	ldi	r22, 0x55	; 85
 38e:	88 ec       	ldi	r24, 0xC8	; 200
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	81 ee       	ldi	r24, 0xE1	; 225
 39a:	94 e0       	ldi	r25, 0x04	; 4
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0xc4>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0xce>
 3a6:	00 00       	nop
		_delay_ms(100);
		
		LEDS_off(LED0_PORT, LED0_PIN, ACTIVE_LOW);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	60 e8       	ldi	r22, 0x80	; 128
 3ac:	86 e2       	ldi	r24, 0x26	; 38
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_off>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	81 ef       	ldi	r24, 0xF1	; 241
 3b8:	9b e2       	ldi	r25, 0x2B	; 43
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0xe2>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xec>
 3c4:	00 00       	nop
		_delay_ms(900);
		
		LEDS_on(LED1_PORT, LED1_PIN, ACTIVE_LOW);
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	68 e0       	ldi	r22, 0x08	; 8
 3ca:	83 e2       	ldi	r24, 0x23	; 35
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 c2 00 	call	0x184	; 0x184 <LEDS_on>
		UART_transmit(UART1,CR);
 3d2:	6d e0       	ldi	r22, 0x0D	; 13
 3d4:	88 ec       	ldi	r24, 0xC8	; 200
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	81 ee       	ldi	r24, 0xE1	; 225
 3e0:	94 e0       	ldi	r25, 0x04	; 4
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x10a>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x114>
 3ec:	00 00       	nop
		_delay_ms(100);
		
		LEDS_off(LED1_PORT, LED1_PIN, ACTIVE_LOW);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	68 e0       	ldi	r22, 0x08	; 8
 3f2:	83 e2       	ldi	r24, 0x23	; 35
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_off>
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	81 ef       	ldi	r24, 0xF1	; 241
 3fe:	9b e2       	ldi	r25, 0x2B	; 43
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
		_delay_ms(900);
		
		LEDS_on(LED2_PORT, LED2_PIN, ACTIVE_LOW);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	60 e1       	ldi	r22, 0x10	; 16
 410:	8c e2       	ldi	r24, 0x2C	; 44
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 c2 00 	call	0x184	; 0x184 <LEDS_on>
		UART_transmit(UART1,LF);
 418:	6a e0       	ldi	r22, 0x0A	; 10
 41a:	88 ec       	ldi	r24, 0xC8	; 200
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	81 ee       	ldi	r24, 0xE1	; 225
 426:	94 e0       	ldi	r25, 0x04	; 4
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
		_delay_ms(100);
		
		LEDS_off(LED2_PORT, LED2_PIN, ACTIVE_LOW);
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	60 e1       	ldi	r22, 0x10	; 16
 438:	8c e2       	ldi	r24, 0x2C	; 44
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_off>
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	81 ef       	ldi	r24, 0xF1	; 241
 444:	9b e2       	ldi	r25, 0x2B	; 43
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
		_delay_ms(900);
		
		LEDS_on(LED3_PORT, LED3_PIN, ACTIVE_LOW);
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	60 e8       	ldi	r22, 0x80	; 128
 456:	80 e2       	ldi	r24, 0x20	; 32
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 c2 00 	call	0x184	; 0x184 <LEDS_on>
		UART_transmit(UART1,':');
 45e:	6a e3       	ldi	r22, 0x3A	; 58
 460:	88 ec       	ldi	r24, 0xC8	; 200
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	81 ee       	ldi	r24, 0xE1	; 225
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
		_delay_ms(100);
		
		LEDS_off(LED3_PORT, LED3_PIN, ACTIVE_LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	60 e8       	ldi	r22, 0x80	; 128
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_off>
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	81 ef       	ldi	r24, 0xF1	; 241
 48a:	9b e2       	ldi	r25, 0x2B	; 43
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 496:	00 00       	nop
		_delay_ms(900);
		temp32=long_serial_input(UART1);
 498:	88 ec       	ldi	r24, 0xC8	; 200
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <long_serial_input>
		sprintf(string_p,"%lu \n\r",temp32);   // %lu is used for an unsigned long
 4a0:	9f 93       	push	r25
 4a2:	8f 93       	push	r24
 4a4:	7f 93       	push	r23
 4a6:	6f 93       	push	r22
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	1f 93       	push	r17
 4b2:	0f 93       	push	r16
 4b4:	0e 94 11 04 	call	0x822	; 0x822 <sprintf>
		UART_transmit_string(UART1,string_p,0);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	60 2f       	mov	r22, r16
 4bc:	71 2f       	mov	r23, r17
 4be:	88 ec       	ldi	r24, 0xC8	; 200
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	f8 94       	cli
 4ca:	de bf       	out	0x3e, r29	; 62
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	cd bf       	out	0x3d, r28	; 61
 4d0:	4e cf       	rjmp	.-356    	; 0x36e <main+0x96>

000004d2 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t * array_in, uint16_t offset)
{
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	8c 01       	movw	r16, r24
 4e2:	6b 01       	movw	r12, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
 4e4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <export_print_buffer>
 4e8:	f8 2e       	mov	r15, r24
 4ea:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
 4ec:	0c 0d       	add	r16, r12
 4ee:	1d 1d       	adc	r17, r13
   sprintf(prnt_bffr, "%p ",input);
 4f0:	1f 93       	push	r17
 4f2:	0f 93       	push	r16
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	9f 93       	push	r25
 4fa:	8f 93       	push	r24
 4fc:	df 93       	push	r29
 4fe:	ff 92       	push	r15
 500:	0e 94 11 04 	call	0x822	; 0x822 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	6f 2d       	mov	r22, r15
 508:	7d 2f       	mov	r23, r29
 50a:	88 ec       	ldi	r24, 0xC8	; 200
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
 512:	df 92       	push	r13
 514:	cf 92       	push	r12
 516:	84 e3       	ldi	r24, 0x34	; 52
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	9f 93       	push	r25
 51c:	8f 93       	push	r24
 51e:	df 93       	push	r29
 520:	ff 92       	push	r15
 522:	0e 94 11 04 	call	0x822	; 0x822 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	6f 2d       	mov	r22, r15
 52a:	7d 2f       	mov	r23, r29
 52c:	88 ec       	ldi	r24, 0xC8	; 200
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
   for (index=0;index<16;index++)
 534:	8d b7       	in	r24, 0x3d	; 61
 536:	9e b7       	in	r25, 0x3e	; 62
 538:	0c 96       	adiw	r24, 0x0c	; 12
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	9e bf       	out	0x3e, r25	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	8d bf       	out	0x3d, r24	; 61
 544:	c0 e0       	ldi	r28, 0x00	; 0
 546:	1c c0       	rjmp	.+56     	; 0x580 <print_16bytes+0xae>
   {
      dat=*(input+index);
 548:	f8 01       	movw	r30, r16
 54a:	ec 0f       	add	r30, r28
 54c:	f1 1d       	adc	r31, r1
 54e:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 550:	1f 92       	push	r1
 552:	8f 93       	push	r24
 554:	2e e3       	ldi	r18, 0x3E	; 62
 556:	31 e0       	ldi	r19, 0x01	; 1
 558:	3f 93       	push	r19
 55a:	2f 93       	push	r18
 55c:	df 93       	push	r29
 55e:	ff 92       	push	r15
 560:	0e 94 11 04 	call	0x822	; 0x822 <sprintf>
	  UART_transmit_string(print_port,prnt_bffr,0);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	6f 2d       	mov	r22, r15
 568:	7d 2f       	mov	r23, r29
 56a:	88 ec       	ldi	r24, 0xC8	; 200
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_transmit_string(print_port,prnt_bffr,0);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_transmit_string(print_port,prnt_bffr,0);
   for (index=0;index<16;index++)
 572:	cf 5f       	subi	r28, 0xFF	; 255
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	c0 31       	cpi	r28, 0x10	; 16
 582:	10 f3       	brcs	.-60     	; 0x548 <print_16bytes+0x76>
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <print_16bytes+0xd2>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
 588:	f8 01       	movw	r30, r16
 58a:	ec 0f       	add	r30, r28
 58c:	f1 1d       	adc	r31, r1
 58e:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
 590:	80 ee       	ldi	r24, 0xE0	; 224
 592:	86 0f       	add	r24, r22
 594:	80 36       	cpi	r24, 0x60	; 96
 596:	08 f0       	brcs	.+2      	; 0x59a <print_16bytes+0xc8>
 598:	6e e2       	ldi	r22, 0x2E	; 46
      UART_transmit(print_port,dat);
 59a:	88 ec       	ldi	r24, 0xC8	; 200
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
 5a2:	cf 5f       	subi	r28, 0xFF	; 255
 5a4:	c0 31       	cpi	r28, 0x10	; 16
 5a6:	80 f3       	brcs	.-32     	; 0x588 <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_transmit(print_port,dat);
   }
   UART_transmit(print_port,CR);
 5a8:	6d e0       	ldi	r22, 0x0D	; 13
 5aa:	88 ec       	ldi	r24, 0xC8	; 200
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
   UART_transmit(print_port,LF);
 5b2:	6a e0       	ldi	r22, 0x0A	; 10
 5b4:	88 ec       	ldi	r24, 0xC8	; 200
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	df 90       	pop	r13
 5c8:	cf 90       	pop	r12
 5ca:	08 95       	ret

000005cc <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t * array_in, uint16_t number_of_bytes)
{
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	7c 01       	movw	r14, r24
 5da:	8b 01       	movw	r16, r22
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
 5dc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <export_print_buffer>
 5e0:	ec 01       	movw	r28, r24
   
   input = 0;
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	bc 01       	movw	r22, r24
 5e6:	8b ed       	ldi	r24, 0xDB	; 219
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 60 03 	call	0x6c0	; 0x6c0 <copy_string_to_buffer>
   UART_transmit_string(print_port,prnt_bffr,0);
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	be 01       	movw	r22, r28
 5f2:	88 ec       	ldi	r24, 0xC8	; 200
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 86 03 	call	0x70c	; 0x70c <UART_transmit_string>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
   
   input = 0;
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
   UART_transmit_string(print_port,prnt_bffr,0);
   do
   {
      print_16bytes(array_in,input);
 5fe:	be 01       	movw	r22, r28
 600:	c7 01       	movw	r24, r14
 602:	0e 94 69 02 	call	0x4d2	; 0x4d2 <print_16bytes>
      input+=16;
 606:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
 608:	c0 17       	cp	r28, r16
 60a:	d1 07       	cpc	r29, r17
 60c:	c0 f3       	brcs	.-16     	; 0x5fe <print_memory+0x32>
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	08 95       	ret

0000061c <UART_init>:
*             Calculates and sets the baud rate reload register
*
*   Caution: Does not check the for valid input parameters
***************************************************************/
void UART_init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X_bit)*Baud_Rate))/(8UL*(2-U2X_bit)*Baud_Rate))-1);
 622:	db 01       	movw	r26, r22
 624:	ca 01       	movw	r24, r20
 626:	80 58       	subi	r24, 0x80	; 128
 628:	9b 47       	sbci	r25, 0x7B	; 123
 62a:	a1 4e       	sbci	r26, 0xE1	; 225
 62c:	bf 4f       	sbci	r27, 0xFF	; 255
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	aa 1f       	adc	r26, r26
 634:	bb 1f       	adc	r27, r27
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	aa 1f       	adc	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	66 1f       	adc	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	9a 01       	movw	r18, r20
 658:	ab 01       	movw	r20, r22
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	44 1f       	adc	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	44 1f       	adc	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	bc 01       	movw	r22, r24
 66c:	cd 01       	movw	r24, r26
 66e:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 672:	21 50       	subi	r18, 0x01	; 1
 674:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
 676:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
 678:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
 67a:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
 680:	88 e1       	ldi	r24, 0x18	; 24
 682:	89 83       	std	Y+1, r24	; 0x01
}
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
 68a:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
 690:	90 81       	ld	r25, Z
		timeout++;
 692:	2f 5f       	subi	r18, 0xFF	; 255
 694:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
 696:	95 fd       	sbrc	r25, 5
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <UART_transmit+0x16>
 69a:	21 15       	cp	r18, r1
 69c:	31 05       	cpc	r19, r1
 69e:	c1 f7       	brne	.-16     	; 0x690 <UART_transmit+0x6>
	if(0==timeout)
 6a0:	23 2b       	or	r18, r19
 6a2:	19 f0       	breq	.+6      	; 0x6aa <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
 6a4:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
 6aa:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
 6ac:	08 95       	ret

000006ae <UART_receive>:
*   Caution: Will not receive if RXEN is not set in UART_init
*            Waits forever until a value is received
***************************************************************/

char UART_receive(volatile UART_t * UART_addr)
{
 6ae:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UCSRA);
 6b0:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
 6b2:	99 23       	and	r25, r25
 6b4:	ec f7       	brge	.-6      	; 0x6b0 <UART_receive+0x2>
	return (UART_addr->UDR);  // return the value in the receive buffer
 6b6:	86 81       	ldd	r24, Z+6	; 0x06
}
 6b8:	08 95       	ret

000006ba <export_print_buffer>:
******/    
char * export_print_buffer(void)
{
	
	return print_buffer;
}
 6ba:	86 e4       	ldi	r24, 0x46	; 70
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	08 95       	ret

000006c0 <copy_string_to_buffer>:
*
*   Caution: Will not work properly if first string is not in Flash
***************************************************************/

uint8_t copy_string_to_buffer(const char flash_string[], char buffer_p[], uint8_t num_bytes)
{
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
 6c6:	41 11       	cpse	r20, r1
 6c8:	1a c0       	rjmp	.+52     	; 0x6fe <copy_string_to_buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
 6ca:	24 2f       	mov	r18, r20
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	fd 01       	movw	r30, r26
 6d0:	e2 0f       	add	r30, r18
 6d2:	f3 1f       	adc	r31, r19
 6d4:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 6d6:	eb 01       	movw	r28, r22
 6d8:	c2 0f       	add	r28, r18
 6da:	d3 1f       	adc	r29, r19
 6dc:	e8 83       	st	Y, r30
			index++;
 6de:	4f 5f       	subi	r20, 0xFF	; 255
		} while (value!=0);
 6e0:	e1 11       	cpse	r30, r1
 6e2:	f3 cf       	rjmp	.-26     	; 0x6ca <copy_string_to_buffer+0xa>
 6e4:	0f c0       	rjmp	.+30     	; 0x704 <copy_string_to_buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
 6e6:	29 2f       	mov	r18, r25
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	fd 01       	movw	r30, r26
 6ec:	e2 0f       	add	r30, r18
 6ee:	f3 1f       	adc	r31, r19
 6f0:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 6f2:	eb 01       	movw	r28, r22
 6f4:	c2 0f       	add	r28, r18
 6f6:	d3 1f       	adc	r29, r19
 6f8:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <copy_string_to_buffer+0x40>
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	94 17       	cp	r25, r20
 702:	88 f3       	brcs	.-30     	; 0x6e6 <copy_string_to_buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 704:	84 2f       	mov	r24, r20
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	7c 01       	movw	r14, r24
 71a:	8b 01       	movw	r16, r22
 71c:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 71e:	41 11       	cpse	r20, r1
 720:	18 c0       	rjmp	.+48     	; 0x752 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 722:	fb 01       	movw	r30, r22
 724:	60 81       	ld	r22, Z
                index=0;
 726:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 728:	08 c0       	rjmp	.+16     	; 0x73a <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 72a:	c7 01       	movw	r24, r14
 72c:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
			index++;
 730:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 732:	f8 01       	movw	r30, r16
 734:	ec 0f       	add	r30, r28
 736:	f1 1d       	adc	r31, r1
 738:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 73a:	61 11       	cpse	r22, r1
 73c:	f6 cf       	rjmp	.-20     	; 0x72a <UART_transmit_string+0x1e>
 73e:	0c c0       	rjmp	.+24     	; 0x758 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 740:	f8 01       	movw	r30, r16
 742:	ec 0f       	add	r30, r28
 744:	f1 1d       	adc	r31, r1
 746:	60 81       	ld	r22, Z
 748:	c7 01       	movw	r24, r14
 74a:	0e 94 45 03 	call	0x68a	; 0x68a <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 74e:	cf 5f       	subi	r28, 0xFF	; 255
 750:	01 c0       	rjmp	.+2      	; 0x754 <UART_transmit_string+0x48>
 752:	c0 e0       	ldi	r28, 0x00	; 0
 754:	cd 17       	cp	r28, r29
 756:	a0 f3       	brcs	.-24     	; 0x740 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	ff 90       	pop	r15
 762:	ef 90       	pop	r14
 764:	08 95       	ret

00000766 <__udivmodsi4>:
 766:	a1 e2       	ldi	r26, 0x21	; 33
 768:	1a 2e       	mov	r1, r26
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	fd 01       	movw	r30, r26
 770:	0d c0       	rjmp	.+26     	; 0x78c <__udivmodsi4_ep>

00000772 <__udivmodsi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	ee 1f       	adc	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	a2 17       	cp	r26, r18
 77c:	b3 07       	cpc	r27, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__udivmodsi4_ep>
 784:	a2 1b       	sub	r26, r18
 786:	b3 0b       	sbc	r27, r19
 788:	e4 0b       	sbc	r30, r20
 78a:	f5 0b       	sbc	r31, r21

0000078c <__udivmodsi4_ep>:
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a 94       	dec	r1
 796:	69 f7       	brne	.-38     	; 0x772 <__udivmodsi4_loop>
 798:	60 95       	com	r22
 79a:	70 95       	com	r23
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	9b 01       	movw	r18, r22
 7a2:	ac 01       	movw	r20, r24
 7a4:	bd 01       	movw	r22, r26
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret

000007aa <atol>:
 7aa:	1f 93       	push	r17
 7ac:	fc 01       	movw	r30, r24
 7ae:	99 27       	eor	r25, r25
 7b0:	88 27       	eor	r24, r24
 7b2:	bc 01       	movw	r22, r24
 7b4:	e8 94       	clt
 7b6:	11 91       	ld	r17, Z+
 7b8:	10 32       	cpi	r17, 0x20	; 32
 7ba:	e9 f3       	breq	.-6      	; 0x7b6 <atol+0xc>
 7bc:	19 30       	cpi	r17, 0x09	; 9
 7be:	10 f0       	brcs	.+4      	; 0x7c4 <atol+0x1a>
 7c0:	1e 30       	cpi	r17, 0x0E	; 14
 7c2:	c8 f3       	brcs	.-14     	; 0x7b6 <atol+0xc>
 7c4:	1b 32       	cpi	r17, 0x2B	; 43
 7c6:	51 f0       	breq	.+20     	; 0x7dc <atol+0x32>
 7c8:	1d 32       	cpi	r17, 0x2D	; 45
 7ca:	49 f4       	brne	.+18     	; 0x7de <atol+0x34>
 7cc:	68 94       	set
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <atol+0x32>
 7d0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__mulsi_const_10>
 7d4:	61 0f       	add	r22, r17
 7d6:	71 1d       	adc	r23, r1
 7d8:	81 1d       	adc	r24, r1
 7da:	91 1d       	adc	r25, r1
 7dc:	11 91       	ld	r17, Z+
 7de:	10 53       	subi	r17, 0x30	; 48
 7e0:	1a 30       	cpi	r17, 0x0A	; 10
 7e2:	b0 f3       	brcs	.-20     	; 0x7d0 <atol+0x26>
 7e4:	3e f4       	brtc	.+14     	; 0x7f4 <atol+0x4a>
 7e6:	90 95       	com	r25
 7e8:	80 95       	com	r24
 7ea:	70 95       	com	r23
 7ec:	61 95       	neg	r22
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	1f 91       	pop	r17
 7f6:	08 95       	ret

000007f8 <__mulsi_const_10>:
 7f8:	59 2f       	mov	r21, r25
 7fa:	48 2f       	mov	r20, r24
 7fc:	37 2f       	mov	r19, r23
 7fe:	26 2f       	mov	r18, r22
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	66 0f       	add	r22, r22
 80a:	77 1f       	adc	r23, r23
 80c:	88 1f       	adc	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	62 0f       	add	r22, r18
 812:	73 1f       	adc	r23, r19
 814:	84 1f       	adc	r24, r20
 816:	95 1f       	adc	r25, r21
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	08 95       	ret

00000822 <sprintf>:
 822:	ae e0       	ldi	r26, 0x0E	; 14
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e7 e1       	ldi	r30, 0x17	; 23
 828:	f4 e0       	ldi	r31, 0x04	; 4
 82a:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__prologue_saves__+0x1c>
 82e:	0d 89       	ldd	r16, Y+21	; 0x15
 830:	1e 89       	ldd	r17, Y+22	; 0x16
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	8c 83       	std	Y+4, r24	; 0x04
 836:	1a 83       	std	Y+2, r17	; 0x02
 838:	09 83       	std	Y+1, r16	; 0x01
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	9f e7       	ldi	r25, 0x7F	; 127
 83e:	9e 83       	std	Y+6, r25	; 0x06
 840:	8d 83       	std	Y+5, r24	; 0x05
 842:	ae 01       	movw	r20, r28
 844:	47 5e       	subi	r20, 0xE7	; 231
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	6f 89       	ldd	r22, Y+23	; 0x17
 84a:	78 8d       	ldd	r23, Y+24	; 0x18
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	0e 94 33 04 	call	0x866	; 0x866 <vfprintf>
 854:	ef 81       	ldd	r30, Y+7	; 0x07
 856:	f8 85       	ldd	r31, Y+8	; 0x08
 858:	e0 0f       	add	r30, r16
 85a:	f1 1f       	adc	r31, r17
 85c:	10 82       	st	Z, r1
 85e:	2e 96       	adiw	r28, 0x0e	; 14
 860:	e4 e0       	ldi	r30, 0x04	; 4
 862:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__epilogue_restores__+0x1c>

00000866 <vfprintf>:
 866:	ab e0       	ldi	r26, 0x0B	; 11
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	e9 e3       	ldi	r30, 0x39	; 57
 86c:	f4 e0       	ldi	r31, 0x04	; 4
 86e:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__prologue_saves__>
 872:	6c 01       	movw	r12, r24
 874:	7b 01       	movw	r14, r22
 876:	8a 01       	movw	r16, r20
 878:	fc 01       	movw	r30, r24
 87a:	17 82       	std	Z+7, r1	; 0x07
 87c:	16 82       	std	Z+6, r1	; 0x06
 87e:	83 81       	ldd	r24, Z+3	; 0x03
 880:	81 ff       	sbrs	r24, 1
 882:	cc c1       	rjmp	.+920    	; 0xc1c <__stack+0x31d>
 884:	ce 01       	movw	r24, r28
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	3c 01       	movw	r6, r24
 88a:	f6 01       	movw	r30, r12
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	f7 01       	movw	r30, r14
 890:	93 fd       	sbrc	r25, 3
 892:	85 91       	lpm	r24, Z+
 894:	93 ff       	sbrs	r25, 3
 896:	81 91       	ld	r24, Z+
 898:	7f 01       	movw	r14, r30
 89a:	88 23       	and	r24, r24
 89c:	09 f4       	brne	.+2      	; 0x8a0 <vfprintf+0x3a>
 89e:	ba c1       	rjmp	.+884    	; 0xc14 <__stack+0x315>
 8a0:	85 32       	cpi	r24, 0x25	; 37
 8a2:	39 f4       	brne	.+14     	; 0x8b2 <vfprintf+0x4c>
 8a4:	93 fd       	sbrc	r25, 3
 8a6:	85 91       	lpm	r24, Z+
 8a8:	93 ff       	sbrs	r25, 3
 8aa:	81 91       	ld	r24, Z+
 8ac:	7f 01       	movw	r14, r30
 8ae:	85 32       	cpi	r24, 0x25	; 37
 8b0:	29 f4       	brne	.+10     	; 0x8bc <vfprintf+0x56>
 8b2:	b6 01       	movw	r22, r12
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 8ba:	e7 cf       	rjmp	.-50     	; 0x88a <vfprintf+0x24>
 8bc:	91 2c       	mov	r9, r1
 8be:	21 2c       	mov	r2, r1
 8c0:	31 2c       	mov	r3, r1
 8c2:	ff e1       	ldi	r31, 0x1F	; 31
 8c4:	f3 15       	cp	r31, r3
 8c6:	d8 f0       	brcs	.+54     	; 0x8fe <vfprintf+0x98>
 8c8:	8b 32       	cpi	r24, 0x2B	; 43
 8ca:	79 f0       	breq	.+30     	; 0x8ea <vfprintf+0x84>
 8cc:	38 f4       	brcc	.+14     	; 0x8dc <vfprintf+0x76>
 8ce:	80 32       	cpi	r24, 0x20	; 32
 8d0:	79 f0       	breq	.+30     	; 0x8f0 <vfprintf+0x8a>
 8d2:	83 32       	cpi	r24, 0x23	; 35
 8d4:	a1 f4       	brne	.+40     	; 0x8fe <vfprintf+0x98>
 8d6:	23 2d       	mov	r18, r3
 8d8:	20 61       	ori	r18, 0x10	; 16
 8da:	1d c0       	rjmp	.+58     	; 0x916 <__stack+0x17>
 8dc:	8d 32       	cpi	r24, 0x2D	; 45
 8de:	61 f0       	breq	.+24     	; 0x8f8 <vfprintf+0x92>
 8e0:	80 33       	cpi	r24, 0x30	; 48
 8e2:	69 f4       	brne	.+26     	; 0x8fe <vfprintf+0x98>
 8e4:	23 2d       	mov	r18, r3
 8e6:	21 60       	ori	r18, 0x01	; 1
 8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
 8ea:	83 2d       	mov	r24, r3
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	38 2e       	mov	r3, r24
 8f0:	e3 2d       	mov	r30, r3
 8f2:	e4 60       	ori	r30, 0x04	; 4
 8f4:	3e 2e       	mov	r3, r30
 8f6:	2a c0       	rjmp	.+84     	; 0x94c <__stack+0x4d>
 8f8:	f3 2d       	mov	r31, r3
 8fa:	f8 60       	ori	r31, 0x08	; 8
 8fc:	1d c0       	rjmp	.+58     	; 0x938 <__stack+0x39>
 8fe:	37 fc       	sbrc	r3, 7
 900:	2d c0       	rjmp	.+90     	; 0x95c <__stack+0x5d>
 902:	20 ed       	ldi	r18, 0xD0	; 208
 904:	28 0f       	add	r18, r24
 906:	2a 30       	cpi	r18, 0x0A	; 10
 908:	40 f0       	brcs	.+16     	; 0x91a <__stack+0x1b>
 90a:	8e 32       	cpi	r24, 0x2E	; 46
 90c:	b9 f4       	brne	.+46     	; 0x93c <__stack+0x3d>
 90e:	36 fc       	sbrc	r3, 6
 910:	81 c1       	rjmp	.+770    	; 0xc14 <__stack+0x315>
 912:	23 2d       	mov	r18, r3
 914:	20 64       	ori	r18, 0x40	; 64
 916:	32 2e       	mov	r3, r18
 918:	19 c0       	rjmp	.+50     	; 0x94c <__stack+0x4d>
 91a:	36 fe       	sbrs	r3, 6
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0x2b>
 91e:	8a e0       	ldi	r24, 0x0A	; 10
 920:	98 9e       	mul	r9, r24
 922:	20 0d       	add	r18, r0
 924:	11 24       	eor	r1, r1
 926:	92 2e       	mov	r9, r18
 928:	11 c0       	rjmp	.+34     	; 0x94c <__stack+0x4d>
 92a:	ea e0       	ldi	r30, 0x0A	; 10
 92c:	2e 9e       	mul	r2, r30
 92e:	20 0d       	add	r18, r0
 930:	11 24       	eor	r1, r1
 932:	22 2e       	mov	r2, r18
 934:	f3 2d       	mov	r31, r3
 936:	f0 62       	ori	r31, 0x20	; 32
 938:	3f 2e       	mov	r3, r31
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__stack+0x4d>
 93c:	8c 36       	cpi	r24, 0x6C	; 108
 93e:	21 f4       	brne	.+8      	; 0x948 <__stack+0x49>
 940:	83 2d       	mov	r24, r3
 942:	80 68       	ori	r24, 0x80	; 128
 944:	38 2e       	mov	r3, r24
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	88 36       	cpi	r24, 0x68	; 104
 94a:	41 f4       	brne	.+16     	; 0x95c <__stack+0x5d>
 94c:	f7 01       	movw	r30, r14
 94e:	93 fd       	sbrc	r25, 3
 950:	85 91       	lpm	r24, Z+
 952:	93 ff       	sbrs	r25, 3
 954:	81 91       	ld	r24, Z+
 956:	7f 01       	movw	r14, r30
 958:	81 11       	cpse	r24, r1
 95a:	b3 cf       	rjmp	.-154    	; 0x8c2 <vfprintf+0x5c>
 95c:	98 2f       	mov	r25, r24
 95e:	9f 7d       	andi	r25, 0xDF	; 223
 960:	95 54       	subi	r25, 0x45	; 69
 962:	93 30       	cpi	r25, 0x03	; 3
 964:	28 f4       	brcc	.+10     	; 0x970 <__stack+0x71>
 966:	0c 5f       	subi	r16, 0xFC	; 252
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	9f e3       	ldi	r25, 0x3F	; 63
 96c:	99 83       	std	Y+1, r25	; 0x01
 96e:	0d c0       	rjmp	.+26     	; 0x98a <__stack+0x8b>
 970:	83 36       	cpi	r24, 0x63	; 99
 972:	31 f0       	breq	.+12     	; 0x980 <__stack+0x81>
 974:	83 37       	cpi	r24, 0x73	; 115
 976:	71 f0       	breq	.+28     	; 0x994 <__stack+0x95>
 978:	83 35       	cpi	r24, 0x53	; 83
 97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x7f>
 97c:	59 c0       	rjmp	.+178    	; 0xa30 <__stack+0x131>
 97e:	21 c0       	rjmp	.+66     	; 0x9c2 <__stack+0xc3>
 980:	f8 01       	movw	r30, r16
 982:	80 81       	ld	r24, Z
 984:	89 83       	std	Y+1, r24	; 0x01
 986:	0e 5f       	subi	r16, 0xFE	; 254
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	88 24       	eor	r8, r8
 98c:	83 94       	inc	r8
 98e:	91 2c       	mov	r9, r1
 990:	53 01       	movw	r10, r6
 992:	13 c0       	rjmp	.+38     	; 0x9ba <__stack+0xbb>
 994:	28 01       	movw	r4, r16
 996:	f2 e0       	ldi	r31, 0x02	; 2
 998:	4f 0e       	add	r4, r31
 99a:	51 1c       	adc	r5, r1
 99c:	f8 01       	movw	r30, r16
 99e:	a0 80       	ld	r10, Z
 9a0:	b1 80       	ldd	r11, Z+1	; 0x01
 9a2:	36 fe       	sbrs	r3, 6
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
 9a6:	69 2d       	mov	r22, r9
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	6f ef       	ldi	r22, 0xFF	; 255
 9ae:	7f ef       	ldi	r23, 0xFF	; 255
 9b0:	c5 01       	movw	r24, r10
 9b2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <strnlen>
 9b6:	4c 01       	movw	r8, r24
 9b8:	82 01       	movw	r16, r4
 9ba:	f3 2d       	mov	r31, r3
 9bc:	ff 77       	andi	r31, 0x7F	; 127
 9be:	3f 2e       	mov	r3, r31
 9c0:	16 c0       	rjmp	.+44     	; 0x9ee <__stack+0xef>
 9c2:	28 01       	movw	r4, r16
 9c4:	22 e0       	ldi	r18, 0x02	; 2
 9c6:	42 0e       	add	r4, r18
 9c8:	51 1c       	adc	r5, r1
 9ca:	f8 01       	movw	r30, r16
 9cc:	a0 80       	ld	r10, Z
 9ce:	b1 80       	ldd	r11, Z+1	; 0x01
 9d0:	36 fe       	sbrs	r3, 6
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <__stack+0xdb>
 9d4:	69 2d       	mov	r22, r9
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	6f ef       	ldi	r22, 0xFF	; 255
 9dc:	7f ef       	ldi	r23, 0xFF	; 255
 9de:	c5 01       	movw	r24, r10
 9e0:	0e 94 14 06 	call	0xc28	; 0xc28 <strnlen_P>
 9e4:	4c 01       	movw	r8, r24
 9e6:	f3 2d       	mov	r31, r3
 9e8:	f0 68       	ori	r31, 0x80	; 128
 9ea:	3f 2e       	mov	r3, r31
 9ec:	82 01       	movw	r16, r4
 9ee:	33 fc       	sbrc	r3, 3
 9f0:	1b c0       	rjmp	.+54     	; 0xa28 <__stack+0x129>
 9f2:	82 2d       	mov	r24, r2
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	88 16       	cp	r8, r24
 9f8:	99 06       	cpc	r9, r25
 9fa:	b0 f4       	brcc	.+44     	; 0xa28 <__stack+0x129>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 a06:	2a 94       	dec	r2
 a08:	f4 cf       	rjmp	.-24     	; 0x9f2 <__stack+0xf3>
 a0a:	f5 01       	movw	r30, r10
 a0c:	37 fc       	sbrc	r3, 7
 a0e:	85 91       	lpm	r24, Z+
 a10:	37 fe       	sbrs	r3, 7
 a12:	81 91       	ld	r24, Z+
 a14:	5f 01       	movw	r10, r30
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 a1e:	21 10       	cpse	r2, r1
 a20:	2a 94       	dec	r2
 a22:	21 e0       	ldi	r18, 0x01	; 1
 a24:	82 1a       	sub	r8, r18
 a26:	91 08       	sbc	r9, r1
 a28:	81 14       	cp	r8, r1
 a2a:	91 04       	cpc	r9, r1
 a2c:	71 f7       	brne	.-36     	; 0xa0a <__stack+0x10b>
 a2e:	e8 c0       	rjmp	.+464    	; 0xc00 <__stack+0x301>
 a30:	84 36       	cpi	r24, 0x64	; 100
 a32:	11 f0       	breq	.+4      	; 0xa38 <__stack+0x139>
 a34:	89 36       	cpi	r24, 0x69	; 105
 a36:	41 f5       	brne	.+80     	; 0xa88 <__stack+0x189>
 a38:	f8 01       	movw	r30, r16
 a3a:	37 fe       	sbrs	r3, 7
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__stack+0x14d>
 a3e:	60 81       	ld	r22, Z
 a40:	71 81       	ldd	r23, Z+1	; 0x01
 a42:	82 81       	ldd	r24, Z+2	; 0x02
 a44:	93 81       	ldd	r25, Z+3	; 0x03
 a46:	0c 5f       	subi	r16, 0xFC	; 252
 a48:	1f 4f       	sbci	r17, 0xFF	; 255
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>
 a4c:	60 81       	ld	r22, Z
 a4e:	71 81       	ldd	r23, Z+1	; 0x01
 a50:	07 2e       	mov	r0, r23
 a52:	00 0c       	add	r0, r0
 a54:	88 0b       	sbc	r24, r24
 a56:	99 0b       	sbc	r25, r25
 a58:	0e 5f       	subi	r16, 0xFE	; 254
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	f3 2d       	mov	r31, r3
 a5e:	ff 76       	andi	r31, 0x6F	; 111
 a60:	3f 2e       	mov	r3, r31
 a62:	97 ff       	sbrs	r25, 7
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <__stack+0x179>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	f0 68       	ori	r31, 0x80	; 128
 a76:	3f 2e       	mov	r3, r31
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	a3 01       	movw	r20, r6
 a7e:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 a82:	88 2e       	mov	r8, r24
 a84:	86 18       	sub	r8, r6
 a86:	45 c0       	rjmp	.+138    	; 0xb12 <__stack+0x213>
 a88:	85 37       	cpi	r24, 0x75	; 117
 a8a:	31 f4       	brne	.+12     	; 0xa98 <__stack+0x199>
 a8c:	23 2d       	mov	r18, r3
 a8e:	2f 7e       	andi	r18, 0xEF	; 239
 a90:	b2 2e       	mov	r11, r18
 a92:	2a e0       	ldi	r18, 0x0A	; 10
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	25 c0       	rjmp	.+74     	; 0xae2 <__stack+0x1e3>
 a98:	93 2d       	mov	r25, r3
 a9a:	99 7f       	andi	r25, 0xF9	; 249
 a9c:	b9 2e       	mov	r11, r25
 a9e:	8f 36       	cpi	r24, 0x6F	; 111
 aa0:	c1 f0       	breq	.+48     	; 0xad2 <__stack+0x1d3>
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <__stack+0x1ab>
 aa4:	88 35       	cpi	r24, 0x58	; 88
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__stack+0x1c7>
 aa8:	b5 c0       	rjmp	.+362    	; 0xc14 <__stack+0x315>
 aaa:	80 37       	cpi	r24, 0x70	; 112
 aac:	19 f0       	breq	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	88 37       	cpi	r24, 0x78	; 120
 ab0:	21 f0       	breq	.+8      	; 0xaba <__stack+0x1bb>
 ab2:	b0 c0       	rjmp	.+352    	; 0xc14 <__stack+0x315>
 ab4:	e9 2f       	mov	r30, r25
 ab6:	e0 61       	ori	r30, 0x10	; 16
 ab8:	be 2e       	mov	r11, r30
 aba:	b4 fe       	sbrs	r11, 4
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__stack+0x1d9>
 abe:	fb 2d       	mov	r31, r11
 ac0:	f4 60       	ori	r31, 0x04	; 4
 ac2:	bf 2e       	mov	r11, r31
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__stack+0x1d9>
 ac6:	34 fe       	sbrs	r3, 4
 ac8:	0a c0       	rjmp	.+20     	; 0xade <__stack+0x1df>
 aca:	29 2f       	mov	r18, r25
 acc:	26 60       	ori	r18, 0x06	; 6
 ace:	b2 2e       	mov	r11, r18
 ad0:	06 c0       	rjmp	.+12     	; 0xade <__stack+0x1df>
 ad2:	28 e0       	ldi	r18, 0x08	; 8
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__stack+0x1e3>
 ad8:	20 e1       	ldi	r18, 0x10	; 16
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x1e3>
 ade:	20 e1       	ldi	r18, 0x10	; 16
 ae0:	32 e0       	ldi	r19, 0x02	; 2
 ae2:	f8 01       	movw	r30, r16
 ae4:	b7 fe       	sbrs	r11, 7
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <__stack+0x1f7>
 ae8:	60 81       	ld	r22, Z
 aea:	71 81       	ldd	r23, Z+1	; 0x01
 aec:	82 81       	ldd	r24, Z+2	; 0x02
 aee:	93 81       	ldd	r25, Z+3	; 0x03
 af0:	0c 5f       	subi	r16, 0xFC	; 252
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <__stack+0x203>
 af6:	60 81       	ld	r22, Z
 af8:	71 81       	ldd	r23, Z+1	; 0x01
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 5f       	subi	r16, 0xFE	; 254
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	a3 01       	movw	r20, r6
 b04:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 b08:	88 2e       	mov	r8, r24
 b0a:	86 18       	sub	r8, r6
 b0c:	fb 2d       	mov	r31, r11
 b0e:	ff 77       	andi	r31, 0x7F	; 127
 b10:	3f 2e       	mov	r3, r31
 b12:	36 fe       	sbrs	r3, 6
 b14:	0d c0       	rjmp	.+26     	; 0xb30 <__stack+0x231>
 b16:	23 2d       	mov	r18, r3
 b18:	2e 7f       	andi	r18, 0xFE	; 254
 b1a:	a2 2e       	mov	r10, r18
 b1c:	89 14       	cp	r8, r9
 b1e:	58 f4       	brcc	.+22     	; 0xb36 <__stack+0x237>
 b20:	34 fe       	sbrs	r3, 4
 b22:	0b c0       	rjmp	.+22     	; 0xb3a <__stack+0x23b>
 b24:	32 fc       	sbrc	r3, 2
 b26:	09 c0       	rjmp	.+18     	; 0xb3a <__stack+0x23b>
 b28:	83 2d       	mov	r24, r3
 b2a:	8e 7e       	andi	r24, 0xEE	; 238
 b2c:	a8 2e       	mov	r10, r24
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__stack+0x23b>
 b30:	b8 2c       	mov	r11, r8
 b32:	a3 2c       	mov	r10, r3
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <__stack+0x23d>
 b36:	b8 2c       	mov	r11, r8
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <__stack+0x23d>
 b3a:	b9 2c       	mov	r11, r9
 b3c:	a4 fe       	sbrs	r10, 4
 b3e:	0f c0       	rjmp	.+30     	; 0xb5e <__stack+0x25f>
 b40:	fe 01       	movw	r30, r28
 b42:	e8 0d       	add	r30, r8
 b44:	f1 1d       	adc	r31, r1
 b46:	80 81       	ld	r24, Z
 b48:	80 33       	cpi	r24, 0x30	; 48
 b4a:	21 f4       	brne	.+8      	; 0xb54 <__stack+0x255>
 b4c:	9a 2d       	mov	r25, r10
 b4e:	99 7e       	andi	r25, 0xE9	; 233
 b50:	a9 2e       	mov	r10, r25
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <__stack+0x267>
 b54:	a2 fe       	sbrs	r10, 2
 b56:	06 c0       	rjmp	.+12     	; 0xb64 <__stack+0x265>
 b58:	b3 94       	inc	r11
 b5a:	b3 94       	inc	r11
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__stack+0x267>
 b5e:	8a 2d       	mov	r24, r10
 b60:	86 78       	andi	r24, 0x86	; 134
 b62:	09 f0       	breq	.+2      	; 0xb66 <__stack+0x267>
 b64:	b3 94       	inc	r11
 b66:	a3 fc       	sbrc	r10, 3
 b68:	11 c0       	rjmp	.+34     	; 0xb8c <__stack+0x28d>
 b6a:	a0 fe       	sbrs	r10, 0
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x27b>
 b6e:	b2 14       	cp	r11, r2
 b70:	88 f4       	brcc	.+34     	; 0xb94 <__stack+0x295>
 b72:	28 0c       	add	r2, r8
 b74:	92 2c       	mov	r9, r2
 b76:	9b 18       	sub	r9, r11
 b78:	0e c0       	rjmp	.+28     	; 0xb96 <__stack+0x297>
 b7a:	b2 14       	cp	r11, r2
 b7c:	60 f4       	brcc	.+24     	; 0xb96 <__stack+0x297>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 b88:	b3 94       	inc	r11
 b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <__stack+0x27b>
 b8c:	b2 14       	cp	r11, r2
 b8e:	18 f4       	brcc	.+6      	; 0xb96 <__stack+0x297>
 b90:	2b 18       	sub	r2, r11
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x299>
 b94:	98 2c       	mov	r9, r8
 b96:	21 2c       	mov	r2, r1
 b98:	a4 fe       	sbrs	r10, 4
 b9a:	10 c0       	rjmp	.+32     	; 0xbbc <__stack+0x2bd>
 b9c:	b6 01       	movw	r22, r12
 b9e:	80 e3       	ldi	r24, 0x30	; 48
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 ba6:	a2 fe       	sbrs	r10, 2
 ba8:	17 c0       	rjmp	.+46     	; 0xbd8 <__stack+0x2d9>
 baa:	a1 fc       	sbrc	r10, 1
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <__stack+0x2b5>
 bae:	88 e7       	ldi	r24, 0x78	; 120
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__stack+0x2b9>
 bb4:	88 e5       	ldi	r24, 0x58	; 88
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	b6 01       	movw	r22, r12
 bba:	0c c0       	rjmp	.+24     	; 0xbd4 <__stack+0x2d5>
 bbc:	8a 2d       	mov	r24, r10
 bbe:	86 78       	andi	r24, 0x86	; 134
 bc0:	59 f0       	breq	.+22     	; 0xbd8 <__stack+0x2d9>
 bc2:	a1 fe       	sbrs	r10, 1
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
 bc6:	8b e2       	ldi	r24, 0x2B	; 43
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <__stack+0x2cd>
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	a7 fc       	sbrc	r10, 7
 bce:	8d e2       	ldi	r24, 0x2D	; 45
 bd0:	b6 01       	movw	r22, r12
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 bd8:	89 14       	cp	r8, r9
 bda:	38 f4       	brcc	.+14     	; 0xbea <__stack+0x2eb>
 bdc:	b6 01       	movw	r22, r12
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 be6:	9a 94       	dec	r9
 be8:	f7 cf       	rjmp	.-18     	; 0xbd8 <__stack+0x2d9>
 bea:	8a 94       	dec	r8
 bec:	f3 01       	movw	r30, r6
 bee:	e8 0d       	add	r30, r8
 bf0:	f1 1d       	adc	r31, r1
 bf2:	80 81       	ld	r24, Z
 bf4:	b6 01       	movw	r22, r12
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 bfc:	81 10       	cpse	r8, r1
 bfe:	f5 cf       	rjmp	.-22     	; 0xbea <__stack+0x2eb>
 c00:	22 20       	and	r2, r2
 c02:	09 f4       	brne	.+2      	; 0xc06 <__stack+0x307>
 c04:	42 ce       	rjmp	.-892    	; 0x88a <vfprintf+0x24>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 c10:	2a 94       	dec	r2
 c12:	f6 cf       	rjmp	.-20     	; 0xc00 <__stack+0x301>
 c14:	f6 01       	movw	r30, r12
 c16:	86 81       	ldd	r24, Z+6	; 0x06
 c18:	97 81       	ldd	r25, Z+7	; 0x07
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	8f ef       	ldi	r24, 0xFF	; 255
 c1e:	9f ef       	ldi	r25, 0xFF	; 255
 c20:	2b 96       	adiw	r28, 0x0b	; 11
 c22:	e2 e1       	ldi	r30, 0x12	; 18
 c24:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__epilogue_restores__>

00000c28 <strnlen_P>:
 c28:	fc 01       	movw	r30, r24
 c2a:	05 90       	lpm	r0, Z+
 c2c:	61 50       	subi	r22, 0x01	; 1
 c2e:	70 40       	sbci	r23, 0x00	; 0
 c30:	01 10       	cpse	r0, r1
 c32:	d8 f7       	brcc	.-10     	; 0xc2a <strnlen_P+0x2>
 c34:	80 95       	com	r24
 c36:	90 95       	com	r25
 c38:	8e 0f       	add	r24, r30
 c3a:	9f 1f       	adc	r25, r31
 c3c:	08 95       	ret

00000c3e <strnlen>:
 c3e:	fc 01       	movw	r30, r24
 c40:	61 50       	subi	r22, 0x01	; 1
 c42:	70 40       	sbci	r23, 0x00	; 0
 c44:	01 90       	ld	r0, Z+
 c46:	01 10       	cpse	r0, r1
 c48:	d8 f7       	brcc	.-10     	; 0xc40 <strnlen+0x2>
 c4a:	80 95       	com	r24
 c4c:	90 95       	com	r25
 c4e:	8e 0f       	add	r24, r30
 c50:	9f 1f       	adc	r25, r31
 c52:	08 95       	ret

00000c54 <fputc>:
 c54:	0f 93       	push	r16
 c56:	1f 93       	push	r17
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	fb 01       	movw	r30, r22
 c5e:	23 81       	ldd	r18, Z+3	; 0x03
 c60:	21 fd       	sbrc	r18, 1
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <fputc+0x16>
 c64:	8f ef       	ldi	r24, 0xFF	; 255
 c66:	9f ef       	ldi	r25, 0xFF	; 255
 c68:	2c c0       	rjmp	.+88     	; 0xcc2 <fputc+0x6e>
 c6a:	22 ff       	sbrs	r18, 2
 c6c:	16 c0       	rjmp	.+44     	; 0xc9a <fputc+0x46>
 c6e:	46 81       	ldd	r20, Z+6	; 0x06
 c70:	57 81       	ldd	r21, Z+7	; 0x07
 c72:	24 81       	ldd	r18, Z+4	; 0x04
 c74:	35 81       	ldd	r19, Z+5	; 0x05
 c76:	42 17       	cp	r20, r18
 c78:	53 07       	cpc	r21, r19
 c7a:	44 f4       	brge	.+16     	; 0xc8c <fputc+0x38>
 c7c:	a0 81       	ld	r26, Z
 c7e:	b1 81       	ldd	r27, Z+1	; 0x01
 c80:	9d 01       	movw	r18, r26
 c82:	2f 5f       	subi	r18, 0xFF	; 255
 c84:	3f 4f       	sbci	r19, 0xFF	; 255
 c86:	31 83       	std	Z+1, r19	; 0x01
 c88:	20 83       	st	Z, r18
 c8a:	8c 93       	st	X, r24
 c8c:	26 81       	ldd	r18, Z+6	; 0x06
 c8e:	37 81       	ldd	r19, Z+7	; 0x07
 c90:	2f 5f       	subi	r18, 0xFF	; 255
 c92:	3f 4f       	sbci	r19, 0xFF	; 255
 c94:	37 83       	std	Z+7, r19	; 0x07
 c96:	26 83       	std	Z+6, r18	; 0x06
 c98:	14 c0       	rjmp	.+40     	; 0xcc2 <fputc+0x6e>
 c9a:	8b 01       	movw	r16, r22
 c9c:	ec 01       	movw	r28, r24
 c9e:	fb 01       	movw	r30, r22
 ca0:	00 84       	ldd	r0, Z+8	; 0x08
 ca2:	f1 85       	ldd	r31, Z+9	; 0x09
 ca4:	e0 2d       	mov	r30, r0
 ca6:	09 95       	icall
 ca8:	89 2b       	or	r24, r25
 caa:	e1 f6       	brne	.-72     	; 0xc64 <fputc+0x10>
 cac:	d8 01       	movw	r26, r16
 cae:	16 96       	adiw	r26, 0x06	; 6
 cb0:	8d 91       	ld	r24, X+
 cb2:	9c 91       	ld	r25, X
 cb4:	17 97       	sbiw	r26, 0x07	; 7
 cb6:	01 96       	adiw	r24, 0x01	; 1
 cb8:	17 96       	adiw	r26, 0x07	; 7
 cba:	9c 93       	st	X, r25
 cbc:	8e 93       	st	-X, r24
 cbe:	16 97       	sbiw	r26, 0x06	; 6
 cc0:	ce 01       	movw	r24, r28
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	1f 91       	pop	r17
 cc8:	0f 91       	pop	r16
 cca:	08 95       	ret

00000ccc <__ultoa_invert>:
 ccc:	fa 01       	movw	r30, r20
 cce:	aa 27       	eor	r26, r26
 cd0:	28 30       	cpi	r18, 0x08	; 8
 cd2:	51 f1       	breq	.+84     	; 0xd28 <__ultoa_invert+0x5c>
 cd4:	20 31       	cpi	r18, 0x10	; 16
 cd6:	81 f1       	breq	.+96     	; 0xd38 <__ultoa_invert+0x6c>
 cd8:	e8 94       	clt
 cda:	6f 93       	push	r22
 cdc:	6e 7f       	andi	r22, 0xFE	; 254
 cde:	6e 5f       	subi	r22, 0xFE	; 254
 ce0:	7f 4f       	sbci	r23, 0xFF	; 255
 ce2:	8f 4f       	sbci	r24, 0xFF	; 255
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	af 4f       	sbci	r26, 0xFF	; 255
 ce8:	b1 e0       	ldi	r27, 0x01	; 1
 cea:	3e d0       	rcall	.+124    	; 0xd68 <__ultoa_invert+0x9c>
 cec:	b4 e0       	ldi	r27, 0x04	; 4
 cee:	3c d0       	rcall	.+120    	; 0xd68 <__ultoa_invert+0x9c>
 cf0:	67 0f       	add	r22, r23
 cf2:	78 1f       	adc	r23, r24
 cf4:	89 1f       	adc	r24, r25
 cf6:	9a 1f       	adc	r25, r26
 cf8:	a1 1d       	adc	r26, r1
 cfa:	68 0f       	add	r22, r24
 cfc:	79 1f       	adc	r23, r25
 cfe:	8a 1f       	adc	r24, r26
 d00:	91 1d       	adc	r25, r1
 d02:	a1 1d       	adc	r26, r1
 d04:	6a 0f       	add	r22, r26
 d06:	71 1d       	adc	r23, r1
 d08:	81 1d       	adc	r24, r1
 d0a:	91 1d       	adc	r25, r1
 d0c:	a1 1d       	adc	r26, r1
 d0e:	20 d0       	rcall	.+64     	; 0xd50 <__ultoa_invert+0x84>
 d10:	09 f4       	brne	.+2      	; 0xd14 <__ultoa_invert+0x48>
 d12:	68 94       	set
 d14:	3f 91       	pop	r19
 d16:	2a e0       	ldi	r18, 0x0A	; 10
 d18:	26 9f       	mul	r18, r22
 d1a:	11 24       	eor	r1, r1
 d1c:	30 19       	sub	r19, r0
 d1e:	30 5d       	subi	r19, 0xD0	; 208
 d20:	31 93       	st	Z+, r19
 d22:	de f6       	brtc	.-74     	; 0xcda <__ultoa_invert+0xe>
 d24:	cf 01       	movw	r24, r30
 d26:	08 95       	ret
 d28:	46 2f       	mov	r20, r22
 d2a:	47 70       	andi	r20, 0x07	; 7
 d2c:	40 5d       	subi	r20, 0xD0	; 208
 d2e:	41 93       	st	Z+, r20
 d30:	b3 e0       	ldi	r27, 0x03	; 3
 d32:	0f d0       	rcall	.+30     	; 0xd52 <__ultoa_invert+0x86>
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__ultoa_invert+0x5c>
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <__ultoa_invert+0x58>
 d38:	46 2f       	mov	r20, r22
 d3a:	4f 70       	andi	r20, 0x0F	; 15
 d3c:	40 5d       	subi	r20, 0xD0	; 208
 d3e:	4a 33       	cpi	r20, 0x3A	; 58
 d40:	18 f0       	brcs	.+6      	; 0xd48 <__ultoa_invert+0x7c>
 d42:	49 5d       	subi	r20, 0xD9	; 217
 d44:	31 fd       	sbrc	r19, 1
 d46:	40 52       	subi	r20, 0x20	; 32
 d48:	41 93       	st	Z+, r20
 d4a:	02 d0       	rcall	.+4      	; 0xd50 <__ultoa_invert+0x84>
 d4c:	a9 f7       	brne	.-22     	; 0xd38 <__ultoa_invert+0x6c>
 d4e:	ea cf       	rjmp	.-44     	; 0xd24 <__ultoa_invert+0x58>
 d50:	b4 e0       	ldi	r27, 0x04	; 4
 d52:	a6 95       	lsr	r26
 d54:	97 95       	ror	r25
 d56:	87 95       	ror	r24
 d58:	77 95       	ror	r23
 d5a:	67 95       	ror	r22
 d5c:	ba 95       	dec	r27
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0x86>
 d60:	00 97       	sbiw	r24, 0x00	; 0
 d62:	61 05       	cpc	r22, r1
 d64:	71 05       	cpc	r23, r1
 d66:	08 95       	ret
 d68:	9b 01       	movw	r18, r22
 d6a:	ac 01       	movw	r20, r24
 d6c:	0a 2e       	mov	r0, r26
 d6e:	06 94       	lsr	r0
 d70:	57 95       	ror	r21
 d72:	47 95       	ror	r20
 d74:	37 95       	ror	r19
 d76:	27 95       	ror	r18
 d78:	ba 95       	dec	r27
 d7a:	c9 f7       	brne	.-14     	; 0xd6e <__ultoa_invert+0xa2>
 d7c:	62 0f       	add	r22, r18
 d7e:	73 1f       	adc	r23, r19
 d80:	84 1f       	adc	r24, r20
 d82:	95 1f       	adc	r25, r21
 d84:	a0 1d       	adc	r26, r0
 d86:	08 95       	ret

00000d88 <__prologue_saves__>:
 d88:	2f 92       	push	r2
 d8a:	3f 92       	push	r3
 d8c:	4f 92       	push	r4
 d8e:	5f 92       	push	r5
 d90:	6f 92       	push	r6
 d92:	7f 92       	push	r7
 d94:	8f 92       	push	r8
 d96:	9f 92       	push	r9
 d98:	af 92       	push	r10
 d9a:	bf 92       	push	r11
 d9c:	cf 92       	push	r12
 d9e:	df 92       	push	r13
 da0:	ef 92       	push	r14
 da2:	ff 92       	push	r15
 da4:	0f 93       	push	r16
 da6:	1f 93       	push	r17
 da8:	cf 93       	push	r28
 daa:	df 93       	push	r29
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	ca 1b       	sub	r28, r26
 db2:	db 0b       	sbc	r29, r27
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	09 94       	ijmp

00000dc0 <__epilogue_restores__>:
 dc0:	2a 88       	ldd	r2, Y+18	; 0x12
 dc2:	39 88       	ldd	r3, Y+17	; 0x11
 dc4:	48 88       	ldd	r4, Y+16	; 0x10
 dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
 dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dca:	7d 84       	ldd	r7, Y+13	; 0x0d
 dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
 dce:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd2:	b9 84       	ldd	r11, Y+9	; 0x09
 dd4:	c8 84       	ldd	r12, Y+8	; 0x08
 dd6:	df 80       	ldd	r13, Y+7	; 0x07
 dd8:	ee 80       	ldd	r14, Y+6	; 0x06
 dda:	fd 80       	ldd	r15, Y+5	; 0x05
 ddc:	0c 81       	ldd	r16, Y+4	; 0x04
 dde:	1b 81       	ldd	r17, Y+3	; 0x03
 de0:	aa 81       	ldd	r26, Y+2	; 0x02
 de2:	b9 81       	ldd	r27, Y+1	; 0x01
 de4:	ce 0f       	add	r28, r30
 de6:	d1 1d       	adc	r29, r1
 de8:	0f b6       	in	r0, 0x3f	; 63
 dea:	f8 94       	cli
 dec:	de bf       	out	0x3e, r29	; 62
 dee:	0f be       	out	0x3f, r0	; 63
 df0:	cd bf       	out	0x3d, r28	; 61
 df2:	ed 01       	movw	r28, r26
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
