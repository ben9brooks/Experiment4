
experiment4_try3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000dda  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800194  00800194  00000f02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021e0  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8a  00000000  00000000  000043d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  0000525c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094c  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117d  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00007005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea ed       	ldi	r30, 0xDA	; 218
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 39       	cpi	r26, 0x94	; 148
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e9       	ldi	r26, 0x94	; 148
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a4 3e       	cpi	r26, 0xE4	; 228
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 102:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <main>:
	uint32_t i2c_freq = 100000; /* 100k */ 
	uint8_t bkpt = 0;
	uint8_t array[3] = {0,0,0};
	uint8_t timer = 10;
	
	UART_init(UART1, 9600); /* baud = 9600 */ 
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	55 e2       	ldi	r21, 0x25	; 37
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	88 ec       	ldi	r24, 0xC8	; 200
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_init>
	UART_transmit_string(UART1, "\nSTART\n", 7);
 124:	47 e0       	ldi	r20, 0x07	; 7
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	88 ec       	ldi	r24, 0xC8	; 200
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
	*
	* Step 1 - init
	*
	******************/

	error = TWI_master_init(TWI1_Base, i2c_freq); 
 132:	40 ea       	ldi	r20, 0xA0	; 160
 134:	56 e8       	ldi	r21, 0x86	; 134
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	88 ed       	ldi	r24, 0xD8	; 216
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_master_init>
	if (error != 0)
 142:	88 23       	and	r24, r24
 144:	39 f0       	breq	.+14     	; 0x154 <main+0x40>
	{
		UART_transmit_string(UART1, "twi_init_fail\n", 14);
 146:	4e e0       	ldi	r20, 0x0E	; 14
 148:	68 e0       	ldi	r22, 0x08	; 8
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	88 ec       	ldi	r24, 0xC8	; 200
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
	*
	* Step 3 - Debug
	*
	******************/
	
	error = initialize_sta013();
 154:	0e 94 5e 02 	call	0x4bc	; 0x4bc <initialize_sta013>
	if (error != 0)
 158:	88 23       	and	r24, r24
 15a:	39 f0       	breq	.+14     	; 0x16a <main+0x56>
	{
		UART_transmit_string(UART1, "sta_timeout\n", 12);
 15c:	4c e0       	ldi	r20, 0x0C	; 12
 15e:	67 e1       	ldi	r22, 0x17	; 23
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	88 ec       	ldi	r24, 0xC8	; 200
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	83 ed       	ldi	r24, 0xD3	; 211
 16e:	90 e3       	ldi	r25, 0x30	; 48
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x5c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x66>
 17a:	00 00       	nop
	*
	* Step 4/5
	*
	************/
	
	step5();
 17c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <step5>




	
	UART_transmit_string(UART1, "\nEND\n", 5);
 180:	45 e0       	ldi	r20, 0x05	; 5
 182:	64 e2       	ldi	r22, 0x24	; 36
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	88 ec       	ldi	r24, 0xC8	; 200
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x7a>

00000190 <stopCond>:
#include "twi.h"

void stopCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (0<<TWEA) | (1<<TWEN));
 190:	24 e8       	ldi	r18, 0x84	; 132
 192:	fc 01       	movw	r30, r24
 194:	24 83       	std	Z+4, r18	; 0x04
 196:	08 95       	ret

00000198 <fullStopCond>:
}

void fullStopCond(volatile TWI_t* TWI_addr)
{
 198:	fc 01       	movw	r30, r24
	uint8_t status;
	uint8_t timeout = 200;
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	84 83       	std	Z+4, r24	; 0x04
	do 
	{
		status = TWI_addr->TWCR;
 19e:	94 81       	ldd	r25, Z+4	; 0x04
		//timeout--;
	} while (((status& 0x10) != 0) && (timeout != 0));
 1a0:	94 fd       	sbrc	r25, 4
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <fullStopCond+0x6>
	if(timeout == 0)
	{
		TWI_addr->TWCR &= 0xEF;  //0b0001000    &0b11101111
	}
}
 1a4:	08 95       	ret

000001a6 <startCond>:

void startCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
 1a6:	24 ea       	ldi	r18, 0xA4	; 164
 1a8:	fc 01       	movw	r30, r24
 1aa:	24 83       	std	Z+4, r18	; 0x04
 1ac:	08 95       	ret

000001ae <restartCond>:
}

void restartCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEA) | (1<<TWEN));	
 1ae:	24 ec       	ldi	r18, 0xC4	; 196
 1b0:	fc 01       	movw	r30, r24
 1b2:	24 83       	std	Z+4, r18	; 0x04
 1b4:	08 95       	ret

000001b6 <TWI_master_init>:
}
    
uint8_t TWI_master_init(volatile TWI_t *TWI_addr, uint32_t I2C_freq)
{
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
 1c4:	9a 01       	movw	r18, r20
 1c6:	ab 01       	movw	r20, r22
    //TWI_ERROR_CODES error = TWI_OK; 
	uint32_t temp32 = I2C_freq;
    uint8_t twps_val;
	uint32_t prescale;
	prescale = (F_CPU/OSC_DIV);
	prescale = prescale/I2C_freq;
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
	prescale = prescale - 16UL;
 1d4:	69 01       	movw	r12, r18
 1d6:	7a 01       	movw	r14, r20
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	c8 1a       	sub	r12, r24
 1dc:	d1 08       	sbc	r13, r1
 1de:	e1 08       	sbc	r14, r1
 1e0:	f1 08       	sbc	r15, r1
	prescale = prescale/(2UL*255);
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	2e ef       	ldi	r18, 0xFE	; 254
 1e8:	31 e0       	ldi	r19, 0x01	; 1
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
 1f2:	21 15       	cp	r18, r1
 1f4:	31 05       	cpc	r19, r1
 1f6:	41 05       	cpc	r20, r1
 1f8:	51 05       	cpc	r21, r1
 1fa:	a9 f0       	breq	.+42     	; 0x226 <TWI_master_init+0x70>
		prescale = 1;
        twps_val = 0x00;
    } else if (prescale < 4) {
 1fc:	24 30       	cpi	r18, 0x04	; 4
 1fe:	31 05       	cpc	r19, r1
 200:	41 05       	cpc	r20, r1
 202:	51 05       	cpc	r21, r1
 204:	b0 f0       	brcs	.+44     	; 0x232 <TWI_master_init+0x7c>
		prescale = 4;
        twps_val = 0x01;
    } else if (prescale < 16) {
 206:	20 31       	cpi	r18, 0x10	; 16
 208:	31 05       	cpc	r19, r1
 20a:	41 05       	cpc	r20, r1
 20c:	51 05       	cpc	r21, r1
 20e:	b8 f0       	brcs	.+46     	; 0x23e <TWI_master_init+0x88>
		prescale = 16;
        twps_val = 0x02;
    } else if (prescale < 64) {
 210:	20 34       	cpi	r18, 0x40	; 64
 212:	31 05       	cpc	r19, r1
 214:	41 05       	cpc	r20, r1
 216:	51 05       	cpc	r21, r1
 218:	28 f5       	brcc	.+74     	; 0x264 <TWI_master_init+0xae>
		prescale = 64;
 21a:	40 e4       	ldi	r20, 0x40	; 64
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x03;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	11 c0       	rjmp	.+34     	; 0x248 <TWI_master_init+0x92>
	prescale = prescale/I2C_freq;
	prescale = prescale - 16UL;
	prescale = prescale/(2UL*255);
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
		prescale = 1;
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x00;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0b c0       	rjmp	.+22     	; 0x248 <TWI_master_init+0x92>
    } else if (prescale < 4) {
		prescale = 4;
 232:	44 e0       	ldi	r20, 0x04	; 4
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x01;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	05 c0       	rjmp	.+10     	; 0x248 <TWI_master_init+0x92>
    } else if (prescale < 16) {
		prescale = 16;
 23e:	40 e1       	ldi	r20, 0x10	; 16
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x02;
 246:	82 e0       	ldi	r24, 0x02	; 2
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWSR = twps_val;
 248:	89 83       	std	Y+1, r24	; 0x01

    uint8_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
 24a:	9a 01       	movw	r18, r20
 24c:	ab 01       	movw	r20, r22
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	44 1f       	adc	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
    if (TWBR >= 256)
    {
        return TWI_ERROR_TWO; // fail
    }

    TWI_addr->TWBR = TWBR;
 25e:	28 83       	st	Y, r18
    
    return 0;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <TWI_master_init+0xb0>
        twps_val = 0x02;
    } else if (prescale < 64) {
		prescale = 64;
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
 264:	81 e0       	ldi	r24, 0x01	; 1
    }

    TWI_addr->TWBR = TWBR;
    
    return 0;
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	08 95       	ret

00000274 <TWI_master_receive>:

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
	uint8_t index;
	//internal address is optional and a bonus, along with int_addr_sz
	
	
	//send device address with a 1 in LSB (SLA+R). LSB being a 1 means read, see lecture
	send_value = (device_addr<<1) | 0x01;
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	16 2f       	mov	r17, r22
 28c:	11 60       	ori	r17, 0x01	; 1
	
	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
 28e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <startCond>
	//TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
	
	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
 292:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
 294:	88 23       	and	r24, r24
 296:	ec f7       	brge	.-6      	; 0x292 <TWI_master_receive+0x1e>
	
	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	88 7f       	andi	r24, 0xF8	; 248
	
	//if start sent, then send SLA+R (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat))
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	19 f0       	breq	.+6      	; 0x2a6 <TWI_master_receive+0x32>
 2a0:	80 31       	cpi	r24, 0x10	; 16
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <TWI_master_receive+0x32>
 2a4:	4c c0       	rjmp	.+152    	; 0x33e <TWI_master_receive+0xca>
	{
		TWI_addr->TWDR = send_value;
 2a6:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	// Wait for TWINT to be set indicating transmission of SLA+R and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
 2ac:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
 2ae:	88 23       	and	r24, r24
 2b0:	ec f7       	brge	.-6      	; 0x2ac <TWI_master_receive+0x38>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	88 7f       	andi	r24, 0xF8	; 248
	
	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(temp8 == TWSR_R_ACK_rcvd) //SLA+R sent, ACK received
 2b6:	80 34       	cpi	r24, 0x40	; 64
 2b8:	f1 f5       	brne	.+124    	; 0x336 <TWI_master_receive+0xc2>
	{
		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	e8 16       	cp	r14, r24
 2be:	f1 04       	cpc	r15, r1
 2c0:	29 f4       	brne	.+10     	; 0x2cc <TWI_master_receive+0x58>
		{
			stopCond(TWI_addr);
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 c8 00 	call	0x190	; 0x190 <stopCond>
    
    return 0;
}

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	30 c0       	rjmp	.+96     	; 0x32c <TWI_master_receive+0xb8>
			stopCond(TWI_addr);
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			restartCond(TWI_addr);
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <restartCond>
 2d2:	fa cf       	rjmp	.-12     	; 0x2c8 <TWI_master_receive+0x54>
		while((num_bytes != 0) && (1!=2)) //put error check here..
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
 2d6:	88 23       	and	r24, r24
 2d8:	ec f7       	brge	.-6      	; 0x2d4 <TWI_master_receive+0x60>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_R_ACK_rtrnd) //data byte received, ack sent back
 2de:	80 35       	cpi	r24, 0x50	; 80
 2e0:	a9 f4       	brne	.+42     	; 0x30c <TWI_master_receive+0x98>
			{
				num_bytes--;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	e8 1a       	sub	r14, r24
 2e6:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 2e8:	f6 01       	movw	r30, r12
 2ea:	e1 0f       	add	r30, r17
 2ec:	f1 1d       	adc	r31, r1
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	80 83       	st	Z, r24
				index++;
 2f2:	1f 5f       	subi	r17, 0xFF	; 255
				if(num_bytes == 1)
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	e8 16       	cp	r14, r24
 2f8:	f1 04       	cpc	r15, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <TWI_master_receive+0x90>
				{
					stopCond(TWI_addr);
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 c8 00 	call	0x190	; 0x190 <stopCond>
 302:	14 c0       	rjmp	.+40     	; 0x32c <TWI_master_receive+0xb8>
				}
				else
				{
					restartCond(TWI_addr);
 304:	ce 01       	movw	r24, r28
 306:	0e 94 d7 00 	call	0x1ae	; 0x1ae <restartCond>
 30a:	10 c0       	rjmp	.+32     	; 0x32c <TWI_master_receive+0xb8>
				}
			}
			else if (temp8 == TWSR_R_NACK_rtrnd)
 30c:	88 35       	cpi	r24, 0x58	; 88
 30e:	71 f4       	brne	.+28     	; 0x32c <TWI_master_receive+0xb8>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	e8 1a       	sub	r14, r24
 314:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	f6 01       	movw	r30, r12
 31a:	e1 0f       	add	r30, r17
 31c:	f1 1d       	adc	r31, r1
 31e:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
 320:	ce 01       	movw	r24, r28
 322:	0e 94 cc 00 	call	0x198	; 0x198 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
 326:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
 328:	84 fd       	sbrc	r24, 4
 32a:	fd cf       	rjmp	.-6      	; 0x326 <TWI_master_receive+0xb2>
			restartCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = 0;
		while((num_bytes != 0) && (1!=2)) //put error check here..
 32c:	e1 14       	cp	r14, r1
 32e:	f1 04       	cpc	r15, r1
 330:	89 f6       	brne	.-94     	; 0x2d4 <TWI_master_receive+0x60>
		if (temp8 == TWSR_R_NACK_rcvd)
		{
			return TWI_ERROR_NACK;
		}
	}
	return 0;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	07 c0       	rjmp	.+14     	; 0x344 <TWI_master_receive+0xd0>
			
		}
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		if (temp8 == TWSR_R_NACK_rcvd)
 336:	88 34       	cpi	r24, 0x48	; 72
 338:	21 f4       	brne	.+8      	; 0x342 <TWI_master_receive+0xce>
		{
			return TWI_ERROR_NACK;
 33a:	85 e0       	ldi	r24, 0x05	; 5
 33c:	03 c0       	rjmp	.+6      	; 0x344 <TWI_master_receive+0xd0>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	01 c0       	rjmp	.+2      	; 0x344 <TWI_master_receive+0xd0>
		if (temp8 == TWSR_R_NACK_rcvd)
		{
			return TWI_ERROR_NACK;
		}
	}
	return 0;
 342:	80 e0       	ldi	r24, 0x00	; 0
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	08 95       	ret

00000354 <TWI_master_transmit>:

uint8_t TWI_master_transmit(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 354:	8f 92       	push	r8
 356:	9f 92       	push	r9
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
 36e:	49 01       	movw	r8, r18
 370:	5a 01       	movw	r10, r20
	uint8_t temp8;
	uint8_t send_value;
	uint8_t index;

	//send device address with a 0 in LSB (SLA+W). LSB being a 1 means write, see lecture
	send_value = (device_addr<<1);
 372:	16 2f       	mov	r17, r22
 374:	11 0f       	add	r17, r17

	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
 376:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <startCond>

	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
 37a:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
 37c:	88 23       	and	r24, r24
 37e:	ec f7       	brge	.-6      	; 0x37a <TWI_master_transmit+0x26>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	88 7f       	andi	r24, 0xF8	; 248

	//if start sent, then send SLA+W (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat))
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	19 f0       	breq	.+6      	; 0x38e <TWI_master_transmit+0x3a>
 388:	80 31       	cpi	r24, 0x10	; 16
 38a:	09 f0       	breq	.+2      	; 0x38e <TWI_master_transmit+0x3a>
 38c:	83 c0       	rjmp	.+262    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	{
		TWI_addr->TWDR = send_value;
 38e:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 390:	84 e8       	ldi	r24, 0x84	; 132
 392:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Wait for TWINT to be set indicating transmission of SLA+W and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
 394:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
 396:	88 23       	and	r24, r24
 398:	ec f7       	brge	.-6      	; 0x394 <TWI_master_transmit+0x40>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	98 2f       	mov	r25, r24
 39e:	98 7f       	andi	r25, 0xF8	; 248
	* INT ADDR
	*
	************/

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	88 7f       	andi	r24, 0xF8	; 248
 3a4:	88 31       	cpi	r24, 0x18	; 24
 3a6:	09 f0       	breq	.+2      	; 0x3aa <TWI_master_transmit+0x56>
 3a8:	71 c0       	rjmp	.+226    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 3aa:	28 c0       	rjmp	.+80     	; 0x3fc <TWI_master_transmit+0xa8>
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
		{
			//send byte(s), MSB first
			TWI_addr->TWDR = (int_addr >> (8 * (int_addr_sz - i - 1))) & 0xFF;
 3ac:	80 2f       	mov	r24, r16
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	82 1b       	sub	r24, r18
 3b2:	91 09       	sbc	r25, r1
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	b5 01       	movw	r22, r10
 3c4:	a4 01       	movw	r20, r8
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <TWI_master_transmit+0x7c>
 3c8:	76 95       	lsr	r23
 3ca:	67 95       	ror	r22
 3cc:	57 95       	ror	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	d2 f7       	brpl	.-12     	; 0x3c8 <TWI_master_transmit+0x74>
 3d4:	4b 83       	std	Y+3, r20	; 0x03
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 3d6:	84 e8       	ldi	r24, 0x84	; 132
 3d8:	8c 83       	std	Y+4, r24	; 0x04

			//wait for TWINT
			do 
			{
				status = TWI_addr->TWCR;
 3da:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status & 0x80) == 0);
 3dc:	88 23       	and	r24, r24
 3de:	ec f7       	brge	.-6      	; 0x3da <TWI_master_transmit+0x86>

			//receive ACK from slave
			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 7f       	andi	r24, 0xF8	; 248

			//receive ACK From slave -> break if NACK received
			if(temp8 == TWSR_W_NACK_rcvd_int)
 3e4:	80 32       	cpi	r24, 0x20	; 32
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <TWI_master_transmit+0x9e>
			{
				fullStopCond(TWI_addr);
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 cc 00 	call	0x198	; 0x198 <fullStopCond>
				return TWI_ERROR_NACK;
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			}
			if(temp8 == TWSR_ARB)
 3f2:	88 33       	cpi	r24, 0x38	; 56
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <TWI_master_transmit+0xa4>
 3f6:	50 c0       	rjmp	.+160    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
 3f8:	2f 5f       	subi	r18, 0xFF	; 255
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <TWI_master_transmit+0xaa>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	20 17       	cp	r18, r16
 400:	a8 f2       	brcs	.-86     	; 0x3ac <TWI_master_transmit+0x58>
		************/


		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
 402:	51 e0       	ldi	r21, 0x01	; 1
 404:	e5 16       	cp	r14, r21
 406:	f1 04       	cpc	r15, r1
 408:	21 f4       	brne	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			stopCond(TWI_addr);
 40a:	ce 01       	movw	r24, r28
 40c:	0e 94 c8 00 	call	0x190	; 0x190 <stopCond>
 410:	03 c0       	rjmp	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			restartCond(TWI_addr);
 412:	ce 01       	movw	r24, r28
 414:	0e 94 d7 00 	call	0x1ae	; 0x1ae <restartCond>
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
 418:	1f ef       	ldi	r17, 0xFF	; 255
 41a:	1e 0d       	add	r17, r14
		while((num_bytes != 0) && (1!=2)) //put error check here..
 41c:	2f c0       	rjmp	.+94     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
 420:	88 23       	and	r24, r24
 422:	ec f7       	brge	.-6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_W_ACK_rcvd_data) //data byte received, ack sent back
 428:	88 32       	cpi	r24, 0x28	; 40
 42a:	a9 f4       	brne	.+42     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				num_bytes--;
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	e6 1a       	sub	r14, r22
 430:	f1 08       	sbc	r15, r1
				TWI_addr->TWDR = arr[index];
 432:	f6 01       	movw	r30, r12
 434:	e1 0f       	add	r30, r17
 436:	f1 1d       	adc	r31, r1
 438:	80 81       	ld	r24, Z
 43a:	8b 83       	std	Y+3, r24	; 0x03
				index--;
 43c:	11 50       	subi	r17, 0x01	; 1
				if(num_bytes == 1)
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	e7 16       	cp	r14, r23
 442:	f1 04       	cpc	r15, r1
 444:	21 f4       	brne	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				{
					stopCond(TWI_addr);
 446:	ce 01       	movw	r24, r28
 448:	0e 94 c8 00 	call	0x190	; 0x190 <stopCond>
 44c:	17 c0       	rjmp	.+46     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				}
				else
				{
					restartCond(TWI_addr);
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 d7 00 	call	0x1ae	; 0x1ae <restartCond>
 454:	13 c0       	rjmp	.+38     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				}
			}
			else if (temp8 == TWSR_W_NACK_rcvd_data)
 456:	80 33       	cpi	r24, 0x30	; 48
 458:	79 f4       	brne	.+30     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	e8 1a       	sub	r14, r24
 45e:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	f6 01       	movw	r30, r12
 464:	e1 0f       	add	r30, r17
 466:	f1 1d       	adc	r31, r1
 468:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 cc 00 	call	0x198	; 0x198 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
 470:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
 472:	84 fd       	sbrc	r24, 4
 474:	fd cf       	rjmp	.-6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				
			}
			else if (temp8 == TWSR_ARB)
 478:	88 33       	cpi	r24, 0x38	; 56
 47a:	81 f0       	breq	.+32     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			restartCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
		while((num_bytes != 0) && (1!=2)) //put error check here..
 47c:	e1 14       	cp	r14, r1
 47e:	f1 04       	cpc	r15, r1
 480:	71 f6       	brne	.-100    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				return TWI_ERROR;
			}
			
		}
		fullStopCond(TWI_addr);
 482:	ce 01       	movw	r24, r28
 484:	0e 94 cc 00 	call	0x198	; 0x198 <fullStopCond>
		else
		{
			return TWI_ERROR;
		}
	}
	return 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		}
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		if (temp8 == TWSR_W_NACK_rcvd_int)
 48c:	90 32       	cpi	r25, 0x20	; 32
 48e:	41 f4       	brne	.+16     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		{
			return TWI_ERROR_NACK;
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	07 c0       	rjmp	.+14     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
 494:	84 e0       	ldi	r24, 0x04	; 4
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				fullStopCond(TWI_addr);
				return TWI_ERROR_NACK;
			}
			if(temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				} while ((status&0x10) != 0);
				
			}
			else if (temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		{
			return TWI_ERROR_NACK;
		}
		else
		{
			return TWI_ERROR;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	08 95       	ret

000004bc <initialize_sta013>:
#include "twi_debug.h"
#include "GPIO_Outputs.h"
#include <util/delay.h>

uint8_t initialize_sta013()
{
 4bc:	9f 92       	push	r9
 4be:	af 92       	push	r10
 4c0:	bf 92       	push	r11
 4c2:	cf 92       	push	r12
 4c4:	df 92       	push	r13
 4c6:	ef 92       	push	r14
 4c8:	ff 92       	push	r15
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <initialize_sta013+0x18>
 4d4:	1f 92       	push	r1
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	83 e2       	ldi	r24, 0x23	; 35
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 4e4:	85 b1       	in	r24, 0x05	; 5
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <initialize_sta013+0x30>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 4ec:	85 b1       	in	r24, 0x05	; 5
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
 4f2:	0e 94 af 03 	call	0x75e	; 0x75e <export_print_buffer>
 4f6:	98 2e       	mov	r9, r24
 4f8:	19 2f       	mov	r17, r25
	memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
 4fa:	e8 2f       	mov	r30, r24
 4fc:	f9 2f       	mov	r31, r25
 4fe:	80 e5       	ldi	r24, 0x50	; 80
 500:	df 01       	movw	r26, r30
 502:	1d 92       	st	X+, r1
 504:	8a 95       	dec	r24
 506:	e9 f7       	brne	.-6      	; 0x502 <initialize_sta013+0x46>
	
	uint8_t array[3] = {0,0,0};
 508:	19 82       	std	Y+1, r1	; 0x01
 50a:	1a 82       	std	Y+2, r1	; 0x02
 50c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
 50e:	0f 2e       	mov	r0, r31
 510:	f4 e6       	ldi	r31, 0x64	; 100
 512:	af 2e       	mov	r10, r31
 514:	b1 2c       	mov	r11, r1
 516:	f0 2d       	mov	r31, r0
	do 
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 3, array);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	6c 01       	movw	r12, r24
 51e:	0f 2e       	mov	r0, r31
 520:	f3 e0       	ldi	r31, 0x03	; 3
 522:	ef 2e       	mov	r14, r31
 524:	f1 2c       	mov	r15, r1
 526:	f0 2d       	mov	r31, r0
 528:	00 e0       	ldi	r16, 0x00	; 0
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	a9 01       	movw	r20, r18
 530:	63 e4       	ldi	r22, 0x43	; 67
 532:	88 ed       	ldi	r24, 0xD8	; 216
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 3a 01 	call	0x274	; 0x274 <TWI_master_receive>
		timeout--;
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	a9 1a       	sub	r10, r25
 53e:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
 540:	88 23       	and	r24, r24
 542:	19 f0       	breq	.+6      	; 0x54a <initialize_sta013+0x8e>
 544:	a1 14       	cp	r10, r1
 546:	b1 04       	cpc	r11, r1
 548:	39 f7       	brne	.-50     	; 0x518 <initialize_sta013+0x5c>
	if(timeout == 0)
 54a:	ab 28       	or	r10, r11
 54c:	d9 f0       	breq	.+54     	; 0x584 <initialize_sta013+0xc8>
		
		
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[2]);
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	1f 92       	push	r1
 552:	8f 93       	push	r24
 554:	8a e2       	ldi	r24, 0x2A	; 42
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	1f 93       	push	r17
 55e:	9f 92       	push	r9
 560:	0e 94 01 04 	call	0x802	; 0x802 <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
 564:	40 ea       	ldi	r20, 0xA0	; 160
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	69 2d       	mov	r22, r9
 56a:	71 2f       	mov	r23, r17
 56c:	88 ec       	ldi	r24, 0xC8	; 200
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
	
	return 0;
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	01 c0       	rjmp	.+2      	; 0x586 <initialize_sta013+0xca>
	if(timeout == 0)
	{
		
		
		
		return TWI_ERROR_TIMEOUT;
 584:	83 e0       	ldi	r24, 0x03	; 3
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[2]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
	
}
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	df 90       	pop	r13
 59a:	cf 90       	pop	r12
 59c:	bf 90       	pop	r11
 59e:	af 90       	pop	r10
 5a0:	9f 90       	pop	r9
 5a2:	08 95       	ret

000005a4 <step5>:

uint8_t step5()
{
 5a4:	9f 92       	push	r9
 5a6:	af 92       	push	r10
 5a8:	bf 92       	push	r11
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <step5+0x18>
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
 5c2:	62 e0       	ldi	r22, 0x02	; 2
 5c4:	83 e2       	ldi	r24, 0x23	; 35
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 5cc:	85 b1       	in	r24, 0x05	; 5
 5ce:	8d 7f       	andi	r24, 0xFD	; 253
 5d0:	85 b9       	out	0x05, r24	; 5
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <step5+0x30>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 5d4:	85 b1       	in	r24, 0x05	; 5
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
 5da:	0e 94 af 03 	call	0x75e	; 0x75e <export_print_buffer>
 5de:	98 2e       	mov	r9, r24
 5e0:	19 2f       	mov	r17, r25
	memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
 5e2:	e8 2f       	mov	r30, r24
 5e4:	f9 2f       	mov	r31, r25
 5e6:	80 e5       	ldi	r24, 0x50	; 80
 5e8:	df 01       	movw	r26, r30
 5ea:	1d 92       	st	X+, r1
 5ec:	8a 95       	dec	r24
 5ee:	e9 f7       	brne	.-6      	; 0x5ea <step5+0x46>
	
	uint8_t array[3] = {0,0,0};
 5f0:	19 82       	std	Y+1, r1	; 0x01
 5f2:	1a 82       	std	Y+2, r1	; 0x02
 5f4:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f4 e6       	ldi	r31, 0x64	; 100
 5fa:	af 2e       	mov	r10, r31
 5fc:	b1 2c       	mov	r11, r1
 5fe:	f0 2d       	mov	r31, r0
	do
	{
		error = TWI_master_transmit(TWI1_Base, 0x43, 0x01, 1, 0, array);
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	6c 01       	movw	r12, r24
 606:	e1 2c       	mov	r14, r1
 608:	f1 2c       	mov	r15, r1
 60a:	01 e0       	ldi	r16, 0x01	; 1
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	63 e4       	ldi	r22, 0x43	; 67
 616:	88 ed       	ldi	r24, 0xD8	; 216
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 aa 01 	call	0x354	; 0x354 <TWI_master_transmit>
		timeout--;
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	a9 1a       	sub	r10, r25
 622:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0));
 624:	88 23       	and	r24, r24
 626:	49 f0       	breq	.+18     	; 0x63a <step5+0x96>
 628:	a1 14       	cp	r10, r1
 62a:	b1 04       	cpc	r11, r1
 62c:	49 f7       	brne	.-46     	; 0x600 <step5+0x5c>
 62e:	0f 2e       	mov	r0, r31
 630:	f4 e6       	ldi	r31, 0x64	; 100
 632:	af 2e       	mov	r10, r31
 634:	b1 2c       	mov	r11, r1
 636:	f0 2d       	mov	r31, r0
 638:	05 c0       	rjmp	.+10     	; 0x644 <step5+0xa0>
 63a:	0f 2e       	mov	r0, r31
 63c:	f4 e6       	ldi	r31, 0x64	; 100
 63e:	af 2e       	mov	r10, r31
 640:	b1 2c       	mov	r11, r1
 642:	f0 2d       	mov	r31, r0

	timeout = 100;
	do
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 1, array);
 644:	de 01       	movw	r26, r28
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	6d 01       	movw	r12, r26
 64a:	ee 24       	eor	r14, r14
 64c:	e3 94       	inc	r14
 64e:	f1 2c       	mov	r15, r1
 650:	00 e0       	ldi	r16, 0x00	; 0
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	63 e4       	ldi	r22, 0x43	; 67
 65a:	88 ed       	ldi	r24, 0xD8	; 216
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 3a 01 	call	0x274	; 0x274 <TWI_master_receive>
		timeout--;
 662:	b1 e0       	ldi	r27, 0x01	; 1
 664:	ab 1a       	sub	r10, r27
 666:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
 668:	88 23       	and	r24, r24
 66a:	19 f0       	breq	.+6      	; 0x672 <step5+0xce>
 66c:	a1 14       	cp	r10, r1
 66e:	b1 04       	cpc	r11, r1
 670:	49 f7       	brne	.-46     	; 0x644 <step5+0xa0>
	
	if(timeout == 0)
 672:	ab 28       	or	r10, r11
 674:	d9 f0       	breq	.+54     	; 0x6ac <step5+0x108>
	{
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	1f 92       	push	r1
 67a:	8f 93       	push	r24
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	9f 93       	push	r25
 682:	8f 93       	push	r24
 684:	1f 93       	push	r17
 686:	9f 92       	push	r9
 688:	0e 94 01 04 	call	0x802	; 0x802 <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
 68c:	40 ea       	ldi	r20, 0xA0	; 160
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	69 2d       	mov	r22, r9
 692:	71 2f       	mov	r23, r17
 694:	88 ec       	ldi	r24, 0xC8	; 200
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 b2 03 	call	0x764	; 0x764 <UART_transmit_string>
	
	return 0;
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <step5+0x10a>
		timeout--;
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
	
	if(timeout == 0)
	{
		return TWI_ERROR_TIMEOUT;
 6ac:	83 e0       	ldi	r24, 0x03	; 3
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
}
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	bf 90       	pop	r11
 6c6:	af 90       	pop	r10
 6c8:	9f 90       	pop	r9
 6ca:	08 95       	ret

000006cc <UART_init>:
*             Calculates and sets the baud rate reload register
*
*   Caution: Does not check the for valid input parameters
***************************************************************/
void UART_init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X_bit)*Baud_Rate))/(8UL*(2-U2X_bit)*Baud_Rate))-1);
 6d2:	db 01       	movw	r26, r22
 6d4:	ca 01       	movw	r24, r20
 6d6:	80 58       	subi	r24, 0x80	; 128
 6d8:	9b 47       	sbci	r25, 0x7B	; 123
 6da:	a1 4e       	sbci	r26, 0xE1	; 225
 6dc:	bf 4f       	sbci	r27, 0xFF	; 255
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	aa 1f       	adc	r26, r26
 6e4:	bb 1f       	adc	r27, r27
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	66 1f       	adc	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	66 1f       	adc	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	9a 01       	movw	r18, r20
 708:	ab 01       	movw	r20, r22
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	44 1f       	adc	r20, r20
 710:	55 1f       	adc	r21, r21
 712:	22 0f       	add	r18, r18
 714:	33 1f       	adc	r19, r19
 716:	44 1f       	adc	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	bc 01       	movw	r22, r24
 71c:	cd 01       	movw	r24, r26
 71e:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
 722:	21 50       	subi	r18, 0x01	; 1
 724:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
 726:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
 728:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
 72a:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 72c:	86 e0       	ldi	r24, 0x06	; 6
 72e:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
 730:	88 e1       	ldi	r24, 0x18	; 24
 732:	89 83       	std	Y+1, r24	; 0x01
}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
 73a:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
 740:	90 81       	ld	r25, Z
		timeout++;
 742:	2f 5f       	subi	r18, 0xFF	; 255
 744:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
 746:	95 fd       	sbrc	r25, 5
 748:	03 c0       	rjmp	.+6      	; 0x750 <UART_transmit+0x16>
 74a:	21 15       	cp	r18, r1
 74c:	31 05       	cpc	r19, r1
 74e:	c1 f7       	brne	.-16     	; 0x740 <UART_transmit+0x6>
	if(0==timeout)
 750:	23 2b       	or	r18, r19
 752:	19 f0       	breq	.+6      	; 0x75a <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
 754:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
 75a:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
 75c:	08 95       	ret

0000075e <export_print_buffer>:
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 75e:	84 e9       	ldi	r24, 0x94	; 148
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	08 95       	ret

00000764 <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	7c 01       	movw	r14, r24
 772:	8b 01       	movw	r16, r22
 774:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 776:	41 11       	cpse	r20, r1
 778:	18 c0       	rjmp	.+48     	; 0x7aa <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 77a:	fb 01       	movw	r30, r22
 77c:	60 81       	ld	r22, Z
                index=0;
 77e:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 780:	08 c0       	rjmp	.+16     	; 0x792 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 782:	c7 01       	movw	r24, r14
 784:	0e 94 9d 03 	call	0x73a	; 0x73a <UART_transmit>
			index++;
 788:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 78a:	f8 01       	movw	r30, r16
 78c:	ec 0f       	add	r30, r28
 78e:	f1 1d       	adc	r31, r1
 790:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 792:	61 11       	cpse	r22, r1
 794:	f6 cf       	rjmp	.-20     	; 0x782 <UART_transmit_string+0x1e>
 796:	0c c0       	rjmp	.+24     	; 0x7b0 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 798:	f8 01       	movw	r30, r16
 79a:	ec 0f       	add	r30, r28
 79c:	f1 1d       	adc	r31, r1
 79e:	60 81       	ld	r22, Z
 7a0:	c7 01       	movw	r24, r14
 7a2:	0e 94 9d 03 	call	0x73a	; 0x73a <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 7a6:	cf 5f       	subi	r28, 0xFF	; 255
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <UART_transmit_string+0x48>
 7aa:	c0 e0       	ldi	r28, 0x00	; 0
 7ac:	cd 17       	cp	r28, r29
 7ae:	a0 f3       	brcs	.-24     	; 0x798 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	08 95       	ret

000007be <__udivmodsi4>:
 7be:	a1 e2       	ldi	r26, 0x21	; 33
 7c0:	1a 2e       	mov	r1, r26
 7c2:	aa 1b       	sub	r26, r26
 7c4:	bb 1b       	sub	r27, r27
 7c6:	fd 01       	movw	r30, r26
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <__udivmodsi4_ep>

000007ca <__udivmodsi4_loop>:
 7ca:	aa 1f       	adc	r26, r26
 7cc:	bb 1f       	adc	r27, r27
 7ce:	ee 1f       	adc	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	a2 17       	cp	r26, r18
 7d4:	b3 07       	cpc	r27, r19
 7d6:	e4 07       	cpc	r30, r20
 7d8:	f5 07       	cpc	r31, r21
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__udivmodsi4_ep>
 7dc:	a2 1b       	sub	r26, r18
 7de:	b3 0b       	sbc	r27, r19
 7e0:	e4 0b       	sbc	r30, r20
 7e2:	f5 0b       	sbc	r31, r21

000007e4 <__udivmodsi4_ep>:
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	1a 94       	dec	r1
 7ee:	69 f7       	brne	.-38     	; 0x7ca <__udivmodsi4_loop>
 7f0:	60 95       	com	r22
 7f2:	70 95       	com	r23
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
 7fc:	bd 01       	movw	r22, r26
 7fe:	cf 01       	movw	r24, r30
 800:	08 95       	ret

00000802 <sprintf>:
 802:	ae e0       	ldi	r26, 0x0E	; 14
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e7 e0       	ldi	r30, 0x07	; 7
 808:	f4 e0       	ldi	r31, 0x04	; 4
 80a:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__prologue_saves__+0x1c>
 80e:	0d 89       	ldd	r16, Y+21	; 0x15
 810:	1e 89       	ldd	r17, Y+22	; 0x16
 812:	86 e0       	ldi	r24, 0x06	; 6
 814:	8c 83       	std	Y+4, r24	; 0x04
 816:	1a 83       	std	Y+2, r17	; 0x02
 818:	09 83       	std	Y+1, r16	; 0x01
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	9f e7       	ldi	r25, 0x7F	; 127
 81e:	9e 83       	std	Y+6, r25	; 0x06
 820:	8d 83       	std	Y+5, r24	; 0x05
 822:	ae 01       	movw	r20, r28
 824:	47 5e       	subi	r20, 0xE7	; 231
 826:	5f 4f       	sbci	r21, 0xFF	; 255
 828:	6f 89       	ldd	r22, Y+23	; 0x17
 82a:	78 8d       	ldd	r23, Y+24	; 0x18
 82c:	ce 01       	movw	r24, r28
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	0e 94 23 04 	call	0x846	; 0x846 <vfprintf>
 834:	ef 81       	ldd	r30, Y+7	; 0x07
 836:	f8 85       	ldd	r31, Y+8	; 0x08
 838:	e0 0f       	add	r30, r16
 83a:	f1 1f       	adc	r31, r17
 83c:	10 82       	st	Z, r1
 83e:	2e 96       	adiw	r28, 0x0e	; 14
 840:	e4 e0       	ldi	r30, 0x04	; 4
 842:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__epilogue_restores__+0x1c>

00000846 <vfprintf>:
 846:	ab e0       	ldi	r26, 0x0B	; 11
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e2       	ldi	r30, 0x29	; 41
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__prologue_saves__>
 852:	6c 01       	movw	r12, r24
 854:	7b 01       	movw	r14, r22
 856:	8a 01       	movw	r16, r20
 858:	fc 01       	movw	r30, r24
 85a:	17 82       	std	Z+7, r1	; 0x07
 85c:	16 82       	std	Z+6, r1	; 0x06
 85e:	83 81       	ldd	r24, Z+3	; 0x03
 860:	81 ff       	sbrs	r24, 1
 862:	cc c1       	rjmp	.+920    	; 0xbfc <__stack+0x2fd>
 864:	ce 01       	movw	r24, r28
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	3c 01       	movw	r6, r24
 86a:	f6 01       	movw	r30, r12
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	f7 01       	movw	r30, r14
 870:	93 fd       	sbrc	r25, 3
 872:	85 91       	lpm	r24, Z+
 874:	93 ff       	sbrs	r25, 3
 876:	81 91       	ld	r24, Z+
 878:	7f 01       	movw	r14, r30
 87a:	88 23       	and	r24, r24
 87c:	09 f4       	brne	.+2      	; 0x880 <vfprintf+0x3a>
 87e:	ba c1       	rjmp	.+884    	; 0xbf4 <__stack+0x2f5>
 880:	85 32       	cpi	r24, 0x25	; 37
 882:	39 f4       	brne	.+14     	; 0x892 <vfprintf+0x4c>
 884:	93 fd       	sbrc	r25, 3
 886:	85 91       	lpm	r24, Z+
 888:	93 ff       	sbrs	r25, 3
 88a:	81 91       	ld	r24, Z+
 88c:	7f 01       	movw	r14, r30
 88e:	85 32       	cpi	r24, 0x25	; 37
 890:	29 f4       	brne	.+10     	; 0x89c <vfprintf+0x56>
 892:	b6 01       	movw	r22, r12
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 89a:	e7 cf       	rjmp	.-50     	; 0x86a <vfprintf+0x24>
 89c:	91 2c       	mov	r9, r1
 89e:	21 2c       	mov	r2, r1
 8a0:	31 2c       	mov	r3, r1
 8a2:	ff e1       	ldi	r31, 0x1F	; 31
 8a4:	f3 15       	cp	r31, r3
 8a6:	d8 f0       	brcs	.+54     	; 0x8de <vfprintf+0x98>
 8a8:	8b 32       	cpi	r24, 0x2B	; 43
 8aa:	79 f0       	breq	.+30     	; 0x8ca <vfprintf+0x84>
 8ac:	38 f4       	brcc	.+14     	; 0x8bc <vfprintf+0x76>
 8ae:	80 32       	cpi	r24, 0x20	; 32
 8b0:	79 f0       	breq	.+30     	; 0x8d0 <vfprintf+0x8a>
 8b2:	83 32       	cpi	r24, 0x23	; 35
 8b4:	a1 f4       	brne	.+40     	; 0x8de <vfprintf+0x98>
 8b6:	23 2d       	mov	r18, r3
 8b8:	20 61       	ori	r18, 0x10	; 16
 8ba:	1d c0       	rjmp	.+58     	; 0x8f6 <vfprintf+0xb0>
 8bc:	8d 32       	cpi	r24, 0x2D	; 45
 8be:	61 f0       	breq	.+24     	; 0x8d8 <vfprintf+0x92>
 8c0:	80 33       	cpi	r24, 0x30	; 48
 8c2:	69 f4       	brne	.+26     	; 0x8de <vfprintf+0x98>
 8c4:	23 2d       	mov	r18, r3
 8c6:	21 60       	ori	r18, 0x01	; 1
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <vfprintf+0xb0>
 8ca:	83 2d       	mov	r24, r3
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	38 2e       	mov	r3, r24
 8d0:	e3 2d       	mov	r30, r3
 8d2:	e4 60       	ori	r30, 0x04	; 4
 8d4:	3e 2e       	mov	r3, r30
 8d6:	2a c0       	rjmp	.+84     	; 0x92c <__stack+0x2d>
 8d8:	f3 2d       	mov	r31, r3
 8da:	f8 60       	ori	r31, 0x08	; 8
 8dc:	1d c0       	rjmp	.+58     	; 0x918 <__stack+0x19>
 8de:	37 fc       	sbrc	r3, 7
 8e0:	2d c0       	rjmp	.+90     	; 0x93c <__stack+0x3d>
 8e2:	20 ed       	ldi	r18, 0xD0	; 208
 8e4:	28 0f       	add	r18, r24
 8e6:	2a 30       	cpi	r18, 0x0A	; 10
 8e8:	40 f0       	brcs	.+16     	; 0x8fa <vfprintf+0xb4>
 8ea:	8e 32       	cpi	r24, 0x2E	; 46
 8ec:	b9 f4       	brne	.+46     	; 0x91c <__stack+0x1d>
 8ee:	36 fc       	sbrc	r3, 6
 8f0:	81 c1       	rjmp	.+770    	; 0xbf4 <__stack+0x2f5>
 8f2:	23 2d       	mov	r18, r3
 8f4:	20 64       	ori	r18, 0x40	; 64
 8f6:	32 2e       	mov	r3, r18
 8f8:	19 c0       	rjmp	.+50     	; 0x92c <__stack+0x2d>
 8fa:	36 fe       	sbrs	r3, 6
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <__stack+0xb>
 8fe:	8a e0       	ldi	r24, 0x0A	; 10
 900:	98 9e       	mul	r9, r24
 902:	20 0d       	add	r18, r0
 904:	11 24       	eor	r1, r1
 906:	92 2e       	mov	r9, r18
 908:	11 c0       	rjmp	.+34     	; 0x92c <__stack+0x2d>
 90a:	ea e0       	ldi	r30, 0x0A	; 10
 90c:	2e 9e       	mul	r2, r30
 90e:	20 0d       	add	r18, r0
 910:	11 24       	eor	r1, r1
 912:	22 2e       	mov	r2, r18
 914:	f3 2d       	mov	r31, r3
 916:	f0 62       	ori	r31, 0x20	; 32
 918:	3f 2e       	mov	r3, r31
 91a:	08 c0       	rjmp	.+16     	; 0x92c <__stack+0x2d>
 91c:	8c 36       	cpi	r24, 0x6C	; 108
 91e:	21 f4       	brne	.+8      	; 0x928 <__stack+0x29>
 920:	83 2d       	mov	r24, r3
 922:	80 68       	ori	r24, 0x80	; 128
 924:	38 2e       	mov	r3, r24
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	88 36       	cpi	r24, 0x68	; 104
 92a:	41 f4       	brne	.+16     	; 0x93c <__stack+0x3d>
 92c:	f7 01       	movw	r30, r14
 92e:	93 fd       	sbrc	r25, 3
 930:	85 91       	lpm	r24, Z+
 932:	93 ff       	sbrs	r25, 3
 934:	81 91       	ld	r24, Z+
 936:	7f 01       	movw	r14, r30
 938:	81 11       	cpse	r24, r1
 93a:	b3 cf       	rjmp	.-154    	; 0x8a2 <vfprintf+0x5c>
 93c:	98 2f       	mov	r25, r24
 93e:	9f 7d       	andi	r25, 0xDF	; 223
 940:	95 54       	subi	r25, 0x45	; 69
 942:	93 30       	cpi	r25, 0x03	; 3
 944:	28 f4       	brcc	.+10     	; 0x950 <__stack+0x51>
 946:	0c 5f       	subi	r16, 0xFC	; 252
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	9f e3       	ldi	r25, 0x3F	; 63
 94c:	99 83       	std	Y+1, r25	; 0x01
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__stack+0x6b>
 950:	83 36       	cpi	r24, 0x63	; 99
 952:	31 f0       	breq	.+12     	; 0x960 <__stack+0x61>
 954:	83 37       	cpi	r24, 0x73	; 115
 956:	71 f0       	breq	.+28     	; 0x974 <__stack+0x75>
 958:	83 35       	cpi	r24, 0x53	; 83
 95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
 95c:	59 c0       	rjmp	.+178    	; 0xa10 <__stack+0x111>
 95e:	21 c0       	rjmp	.+66     	; 0x9a2 <__stack+0xa3>
 960:	f8 01       	movw	r30, r16
 962:	80 81       	ld	r24, Z
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	88 24       	eor	r8, r8
 96c:	83 94       	inc	r8
 96e:	91 2c       	mov	r9, r1
 970:	53 01       	movw	r10, r6
 972:	13 c0       	rjmp	.+38     	; 0x99a <__stack+0x9b>
 974:	28 01       	movw	r4, r16
 976:	f2 e0       	ldi	r31, 0x02	; 2
 978:	4f 0e       	add	r4, r31
 97a:	51 1c       	adc	r5, r1
 97c:	f8 01       	movw	r30, r16
 97e:	a0 80       	ld	r10, Z
 980:	b1 80       	ldd	r11, Z+1	; 0x01
 982:	36 fe       	sbrs	r3, 6
 984:	03 c0       	rjmp	.+6      	; 0x98c <__stack+0x8d>
 986:	69 2d       	mov	r22, r9
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	6f ef       	ldi	r22, 0xFF	; 255
 98e:	7f ef       	ldi	r23, 0xFF	; 255
 990:	c5 01       	movw	r24, r10
 992:	0e 94 0f 06 	call	0xc1e	; 0xc1e <strnlen>
 996:	4c 01       	movw	r8, r24
 998:	82 01       	movw	r16, r4
 99a:	f3 2d       	mov	r31, r3
 99c:	ff 77       	andi	r31, 0x7F	; 127
 99e:	3f 2e       	mov	r3, r31
 9a0:	16 c0       	rjmp	.+44     	; 0x9ce <__stack+0xcf>
 9a2:	28 01       	movw	r4, r16
 9a4:	22 e0       	ldi	r18, 0x02	; 2
 9a6:	42 0e       	add	r4, r18
 9a8:	51 1c       	adc	r5, r1
 9aa:	f8 01       	movw	r30, r16
 9ac:	a0 80       	ld	r10, Z
 9ae:	b1 80       	ldd	r11, Z+1	; 0x01
 9b0:	36 fe       	sbrs	r3, 6
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <__stack+0xbb>
 9b4:	69 2d       	mov	r22, r9
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <__stack+0xbf>
 9ba:	6f ef       	ldi	r22, 0xFF	; 255
 9bc:	7f ef       	ldi	r23, 0xFF	; 255
 9be:	c5 01       	movw	r24, r10
 9c0:	0e 94 04 06 	call	0xc08	; 0xc08 <strnlen_P>
 9c4:	4c 01       	movw	r8, r24
 9c6:	f3 2d       	mov	r31, r3
 9c8:	f0 68       	ori	r31, 0x80	; 128
 9ca:	3f 2e       	mov	r3, r31
 9cc:	82 01       	movw	r16, r4
 9ce:	33 fc       	sbrc	r3, 3
 9d0:	1b c0       	rjmp	.+54     	; 0xa08 <__stack+0x109>
 9d2:	82 2d       	mov	r24, r2
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	88 16       	cp	r8, r24
 9d8:	99 06       	cpc	r9, r25
 9da:	b0 f4       	brcc	.+44     	; 0xa08 <__stack+0x109>
 9dc:	b6 01       	movw	r22, r12
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 9e6:	2a 94       	dec	r2
 9e8:	f4 cf       	rjmp	.-24     	; 0x9d2 <__stack+0xd3>
 9ea:	f5 01       	movw	r30, r10
 9ec:	37 fc       	sbrc	r3, 7
 9ee:	85 91       	lpm	r24, Z+
 9f0:	37 fe       	sbrs	r3, 7
 9f2:	81 91       	ld	r24, Z+
 9f4:	5f 01       	movw	r10, r30
 9f6:	b6 01       	movw	r22, r12
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 9fe:	21 10       	cpse	r2, r1
 a00:	2a 94       	dec	r2
 a02:	21 e0       	ldi	r18, 0x01	; 1
 a04:	82 1a       	sub	r8, r18
 a06:	91 08       	sbc	r9, r1
 a08:	81 14       	cp	r8, r1
 a0a:	91 04       	cpc	r9, r1
 a0c:	71 f7       	brne	.-36     	; 0x9ea <__stack+0xeb>
 a0e:	e8 c0       	rjmp	.+464    	; 0xbe0 <__stack+0x2e1>
 a10:	84 36       	cpi	r24, 0x64	; 100
 a12:	11 f0       	breq	.+4      	; 0xa18 <__stack+0x119>
 a14:	89 36       	cpi	r24, 0x69	; 105
 a16:	41 f5       	brne	.+80     	; 0xa68 <__stack+0x169>
 a18:	f8 01       	movw	r30, r16
 a1a:	37 fe       	sbrs	r3, 7
 a1c:	07 c0       	rjmp	.+14     	; 0xa2c <__stack+0x12d>
 a1e:	60 81       	ld	r22, Z
 a20:	71 81       	ldd	r23, Z+1	; 0x01
 a22:	82 81       	ldd	r24, Z+2	; 0x02
 a24:	93 81       	ldd	r25, Z+3	; 0x03
 a26:	0c 5f       	subi	r16, 0xFC	; 252
 a28:	1f 4f       	sbci	r17, 0xFF	; 255
 a2a:	08 c0       	rjmp	.+16     	; 0xa3c <__stack+0x13d>
 a2c:	60 81       	ld	r22, Z
 a2e:	71 81       	ldd	r23, Z+1	; 0x01
 a30:	07 2e       	mov	r0, r23
 a32:	00 0c       	add	r0, r0
 a34:	88 0b       	sbc	r24, r24
 a36:	99 0b       	sbc	r25, r25
 a38:	0e 5f       	subi	r16, 0xFE	; 254
 a3a:	1f 4f       	sbci	r17, 0xFF	; 255
 a3c:	f3 2d       	mov	r31, r3
 a3e:	ff 76       	andi	r31, 0x6F	; 111
 a40:	3f 2e       	mov	r3, r31
 a42:	97 ff       	sbrs	r25, 7
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <__stack+0x159>
 a46:	90 95       	com	r25
 a48:	80 95       	com	r24
 a4a:	70 95       	com	r23
 a4c:	61 95       	neg	r22
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	f0 68       	ori	r31, 0x80	; 128
 a56:	3f 2e       	mov	r3, r31
 a58:	2a e0       	ldi	r18, 0x0A	; 10
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	a3 01       	movw	r20, r6
 a5e:	0e 94 56 06 	call	0xcac	; 0xcac <__ultoa_invert>
 a62:	88 2e       	mov	r8, r24
 a64:	86 18       	sub	r8, r6
 a66:	45 c0       	rjmp	.+138    	; 0xaf2 <__stack+0x1f3>
 a68:	85 37       	cpi	r24, 0x75	; 117
 a6a:	31 f4       	brne	.+12     	; 0xa78 <__stack+0x179>
 a6c:	23 2d       	mov	r18, r3
 a6e:	2f 7e       	andi	r18, 0xEF	; 239
 a70:	b2 2e       	mov	r11, r18
 a72:	2a e0       	ldi	r18, 0x0A	; 10
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	25 c0       	rjmp	.+74     	; 0xac2 <__stack+0x1c3>
 a78:	93 2d       	mov	r25, r3
 a7a:	99 7f       	andi	r25, 0xF9	; 249
 a7c:	b9 2e       	mov	r11, r25
 a7e:	8f 36       	cpi	r24, 0x6F	; 111
 a80:	c1 f0       	breq	.+48     	; 0xab2 <__stack+0x1b3>
 a82:	18 f4       	brcc	.+6      	; 0xa8a <__stack+0x18b>
 a84:	88 35       	cpi	r24, 0x58	; 88
 a86:	79 f0       	breq	.+30     	; 0xaa6 <__stack+0x1a7>
 a88:	b5 c0       	rjmp	.+362    	; 0xbf4 <__stack+0x2f5>
 a8a:	80 37       	cpi	r24, 0x70	; 112
 a8c:	19 f0       	breq	.+6      	; 0xa94 <__stack+0x195>
 a8e:	88 37       	cpi	r24, 0x78	; 120
 a90:	21 f0       	breq	.+8      	; 0xa9a <__stack+0x19b>
 a92:	b0 c0       	rjmp	.+352    	; 0xbf4 <__stack+0x2f5>
 a94:	e9 2f       	mov	r30, r25
 a96:	e0 61       	ori	r30, 0x10	; 16
 a98:	be 2e       	mov	r11, r30
 a9a:	b4 fe       	sbrs	r11, 4
 a9c:	0d c0       	rjmp	.+26     	; 0xab8 <__stack+0x1b9>
 a9e:	fb 2d       	mov	r31, r11
 aa0:	f4 60       	ori	r31, 0x04	; 4
 aa2:	bf 2e       	mov	r11, r31
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__stack+0x1b9>
 aa6:	34 fe       	sbrs	r3, 4
 aa8:	0a c0       	rjmp	.+20     	; 0xabe <__stack+0x1bf>
 aaa:	29 2f       	mov	r18, r25
 aac:	26 60       	ori	r18, 0x06	; 6
 aae:	b2 2e       	mov	r11, r18
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <__stack+0x1bf>
 ab2:	28 e0       	ldi	r18, 0x08	; 8
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__stack+0x1c3>
 ab8:	20 e1       	ldi	r18, 0x10	; 16
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <__stack+0x1c3>
 abe:	20 e1       	ldi	r18, 0x10	; 16
 ac0:	32 e0       	ldi	r19, 0x02	; 2
 ac2:	f8 01       	movw	r30, r16
 ac4:	b7 fe       	sbrs	r11, 7
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <__stack+0x1d7>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	82 81       	ldd	r24, Z+2	; 0x02
 ace:	93 81       	ldd	r25, Z+3	; 0x03
 ad0:	0c 5f       	subi	r16, 0xFC	; 252
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	06 c0       	rjmp	.+12     	; 0xae2 <__stack+0x1e3>
 ad6:	60 81       	ld	r22, Z
 ad8:	71 81       	ldd	r23, Z+1	; 0x01
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 5f       	subi	r16, 0xFE	; 254
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	a3 01       	movw	r20, r6
 ae4:	0e 94 56 06 	call	0xcac	; 0xcac <__ultoa_invert>
 ae8:	88 2e       	mov	r8, r24
 aea:	86 18       	sub	r8, r6
 aec:	fb 2d       	mov	r31, r11
 aee:	ff 77       	andi	r31, 0x7F	; 127
 af0:	3f 2e       	mov	r3, r31
 af2:	36 fe       	sbrs	r3, 6
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <__stack+0x211>
 af6:	23 2d       	mov	r18, r3
 af8:	2e 7f       	andi	r18, 0xFE	; 254
 afa:	a2 2e       	mov	r10, r18
 afc:	89 14       	cp	r8, r9
 afe:	58 f4       	brcc	.+22     	; 0xb16 <__stack+0x217>
 b00:	34 fe       	sbrs	r3, 4
 b02:	0b c0       	rjmp	.+22     	; 0xb1a <__stack+0x21b>
 b04:	32 fc       	sbrc	r3, 2
 b06:	09 c0       	rjmp	.+18     	; 0xb1a <__stack+0x21b>
 b08:	83 2d       	mov	r24, r3
 b0a:	8e 7e       	andi	r24, 0xEE	; 238
 b0c:	a8 2e       	mov	r10, r24
 b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__stack+0x21b>
 b10:	b8 2c       	mov	r11, r8
 b12:	a3 2c       	mov	r10, r3
 b14:	03 c0       	rjmp	.+6      	; 0xb1c <__stack+0x21d>
 b16:	b8 2c       	mov	r11, r8
 b18:	01 c0       	rjmp	.+2      	; 0xb1c <__stack+0x21d>
 b1a:	b9 2c       	mov	r11, r9
 b1c:	a4 fe       	sbrs	r10, 4
 b1e:	0f c0       	rjmp	.+30     	; 0xb3e <__stack+0x23f>
 b20:	fe 01       	movw	r30, r28
 b22:	e8 0d       	add	r30, r8
 b24:	f1 1d       	adc	r31, r1
 b26:	80 81       	ld	r24, Z
 b28:	80 33       	cpi	r24, 0x30	; 48
 b2a:	21 f4       	brne	.+8      	; 0xb34 <__stack+0x235>
 b2c:	9a 2d       	mov	r25, r10
 b2e:	99 7e       	andi	r25, 0xE9	; 233
 b30:	a9 2e       	mov	r10, r25
 b32:	09 c0       	rjmp	.+18     	; 0xb46 <__stack+0x247>
 b34:	a2 fe       	sbrs	r10, 2
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <__stack+0x245>
 b38:	b3 94       	inc	r11
 b3a:	b3 94       	inc	r11
 b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__stack+0x247>
 b3e:	8a 2d       	mov	r24, r10
 b40:	86 78       	andi	r24, 0x86	; 134
 b42:	09 f0       	breq	.+2      	; 0xb46 <__stack+0x247>
 b44:	b3 94       	inc	r11
 b46:	a3 fc       	sbrc	r10, 3
 b48:	11 c0       	rjmp	.+34     	; 0xb6c <__stack+0x26d>
 b4a:	a0 fe       	sbrs	r10, 0
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__stack+0x25b>
 b4e:	b2 14       	cp	r11, r2
 b50:	88 f4       	brcc	.+34     	; 0xb74 <__stack+0x275>
 b52:	28 0c       	add	r2, r8
 b54:	92 2c       	mov	r9, r2
 b56:	9b 18       	sub	r9, r11
 b58:	0e c0       	rjmp	.+28     	; 0xb76 <__stack+0x277>
 b5a:	b2 14       	cp	r11, r2
 b5c:	60 f4       	brcc	.+24     	; 0xb76 <__stack+0x277>
 b5e:	b6 01       	movw	r22, r12
 b60:	80 e2       	ldi	r24, 0x20	; 32
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 b68:	b3 94       	inc	r11
 b6a:	f7 cf       	rjmp	.-18     	; 0xb5a <__stack+0x25b>
 b6c:	b2 14       	cp	r11, r2
 b6e:	18 f4       	brcc	.+6      	; 0xb76 <__stack+0x277>
 b70:	2b 18       	sub	r2, r11
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x279>
 b74:	98 2c       	mov	r9, r8
 b76:	21 2c       	mov	r2, r1
 b78:	a4 fe       	sbrs	r10, 4
 b7a:	10 c0       	rjmp	.+32     	; 0xb9c <__stack+0x29d>
 b7c:	b6 01       	movw	r22, r12
 b7e:	80 e3       	ldi	r24, 0x30	; 48
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 b86:	a2 fe       	sbrs	r10, 2
 b88:	17 c0       	rjmp	.+46     	; 0xbb8 <__stack+0x2b9>
 b8a:	a1 fc       	sbrc	r10, 1
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <__stack+0x295>
 b8e:	88 e7       	ldi	r24, 0x78	; 120
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x299>
 b94:	88 e5       	ldi	r24, 0x58	; 88
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	b6 01       	movw	r22, r12
 b9a:	0c c0       	rjmp	.+24     	; 0xbb4 <__stack+0x2b5>
 b9c:	8a 2d       	mov	r24, r10
 b9e:	86 78       	andi	r24, 0x86	; 134
 ba0:	59 f0       	breq	.+22     	; 0xbb8 <__stack+0x2b9>
 ba2:	a1 fe       	sbrs	r10, 1
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <__stack+0x2ab>
 ba6:	8b e2       	ldi	r24, 0x2B	; 43
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <__stack+0x2ad>
 baa:	80 e2       	ldi	r24, 0x20	; 32
 bac:	a7 fc       	sbrc	r10, 7
 bae:	8d e2       	ldi	r24, 0x2D	; 45
 bb0:	b6 01       	movw	r22, r12
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 bb8:	89 14       	cp	r8, r9
 bba:	38 f4       	brcc	.+14     	; 0xbca <__stack+0x2cb>
 bbc:	b6 01       	movw	r22, r12
 bbe:	80 e3       	ldi	r24, 0x30	; 48
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 bc6:	9a 94       	dec	r9
 bc8:	f7 cf       	rjmp	.-18     	; 0xbb8 <__stack+0x2b9>
 bca:	8a 94       	dec	r8
 bcc:	f3 01       	movw	r30, r6
 bce:	e8 0d       	add	r30, r8
 bd0:	f1 1d       	adc	r31, r1
 bd2:	80 81       	ld	r24, Z
 bd4:	b6 01       	movw	r22, r12
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 bdc:	81 10       	cpse	r8, r1
 bde:	f5 cf       	rjmp	.-22     	; 0xbca <__stack+0x2cb>
 be0:	22 20       	and	r2, r2
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__stack+0x2e7>
 be4:	42 ce       	rjmp	.-892    	; 0x86a <vfprintf+0x24>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 1a 06 	call	0xc34	; 0xc34 <fputc>
 bf0:	2a 94       	dec	r2
 bf2:	f6 cf       	rjmp	.-20     	; 0xbe0 <__stack+0x2e1>
 bf4:	f6 01       	movw	r30, r12
 bf6:	86 81       	ldd	r24, Z+6	; 0x06
 bf8:	97 81       	ldd	r25, Z+7	; 0x07
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__stack+0x301>
 bfc:	8f ef       	ldi	r24, 0xFF	; 255
 bfe:	9f ef       	ldi	r25, 0xFF	; 255
 c00:	2b 96       	adiw	r28, 0x0b	; 11
 c02:	e2 e1       	ldi	r30, 0x12	; 18
 c04:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__epilogue_restores__>

00000c08 <strnlen_P>:
 c08:	fc 01       	movw	r30, r24
 c0a:	05 90       	lpm	r0, Z+
 c0c:	61 50       	subi	r22, 0x01	; 1
 c0e:	70 40       	sbci	r23, 0x00	; 0
 c10:	01 10       	cpse	r0, r1
 c12:	d8 f7       	brcc	.-10     	; 0xc0a <strnlen_P+0x2>
 c14:	80 95       	com	r24
 c16:	90 95       	com	r25
 c18:	8e 0f       	add	r24, r30
 c1a:	9f 1f       	adc	r25, r31
 c1c:	08 95       	ret

00000c1e <strnlen>:
 c1e:	fc 01       	movw	r30, r24
 c20:	61 50       	subi	r22, 0x01	; 1
 c22:	70 40       	sbci	r23, 0x00	; 0
 c24:	01 90       	ld	r0, Z+
 c26:	01 10       	cpse	r0, r1
 c28:	d8 f7       	brcc	.-10     	; 0xc20 <strnlen+0x2>
 c2a:	80 95       	com	r24
 c2c:	90 95       	com	r25
 c2e:	8e 0f       	add	r24, r30
 c30:	9f 1f       	adc	r25, r31
 c32:	08 95       	ret

00000c34 <fputc>:
 c34:	0f 93       	push	r16
 c36:	1f 93       	push	r17
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	fb 01       	movw	r30, r22
 c3e:	23 81       	ldd	r18, Z+3	; 0x03
 c40:	21 fd       	sbrc	r18, 1
 c42:	03 c0       	rjmp	.+6      	; 0xc4a <fputc+0x16>
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	9f ef       	ldi	r25, 0xFF	; 255
 c48:	2c c0       	rjmp	.+88     	; 0xca2 <fputc+0x6e>
 c4a:	22 ff       	sbrs	r18, 2
 c4c:	16 c0       	rjmp	.+44     	; 0xc7a <fputc+0x46>
 c4e:	46 81       	ldd	r20, Z+6	; 0x06
 c50:	57 81       	ldd	r21, Z+7	; 0x07
 c52:	24 81       	ldd	r18, Z+4	; 0x04
 c54:	35 81       	ldd	r19, Z+5	; 0x05
 c56:	42 17       	cp	r20, r18
 c58:	53 07       	cpc	r21, r19
 c5a:	44 f4       	brge	.+16     	; 0xc6c <fputc+0x38>
 c5c:	a0 81       	ld	r26, Z
 c5e:	b1 81       	ldd	r27, Z+1	; 0x01
 c60:	9d 01       	movw	r18, r26
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	31 83       	std	Z+1, r19	; 0x01
 c68:	20 83       	st	Z, r18
 c6a:	8c 93       	st	X, r24
 c6c:	26 81       	ldd	r18, Z+6	; 0x06
 c6e:	37 81       	ldd	r19, Z+7	; 0x07
 c70:	2f 5f       	subi	r18, 0xFF	; 255
 c72:	3f 4f       	sbci	r19, 0xFF	; 255
 c74:	37 83       	std	Z+7, r19	; 0x07
 c76:	26 83       	std	Z+6, r18	; 0x06
 c78:	14 c0       	rjmp	.+40     	; 0xca2 <fputc+0x6e>
 c7a:	8b 01       	movw	r16, r22
 c7c:	ec 01       	movw	r28, r24
 c7e:	fb 01       	movw	r30, r22
 c80:	00 84       	ldd	r0, Z+8	; 0x08
 c82:	f1 85       	ldd	r31, Z+9	; 0x09
 c84:	e0 2d       	mov	r30, r0
 c86:	09 95       	icall
 c88:	89 2b       	or	r24, r25
 c8a:	e1 f6       	brne	.-72     	; 0xc44 <fputc+0x10>
 c8c:	d8 01       	movw	r26, r16
 c8e:	16 96       	adiw	r26, 0x06	; 6
 c90:	8d 91       	ld	r24, X+
 c92:	9c 91       	ld	r25, X
 c94:	17 97       	sbiw	r26, 0x07	; 7
 c96:	01 96       	adiw	r24, 0x01	; 1
 c98:	17 96       	adiw	r26, 0x07	; 7
 c9a:	9c 93       	st	X, r25
 c9c:	8e 93       	st	-X, r24
 c9e:	16 97       	sbiw	r26, 0x06	; 6
 ca0:	ce 01       	movw	r24, r28
 ca2:	df 91       	pop	r29
 ca4:	cf 91       	pop	r28
 ca6:	1f 91       	pop	r17
 ca8:	0f 91       	pop	r16
 caa:	08 95       	ret

00000cac <__ultoa_invert>:
 cac:	fa 01       	movw	r30, r20
 cae:	aa 27       	eor	r26, r26
 cb0:	28 30       	cpi	r18, 0x08	; 8
 cb2:	51 f1       	breq	.+84     	; 0xd08 <__ultoa_invert+0x5c>
 cb4:	20 31       	cpi	r18, 0x10	; 16
 cb6:	81 f1       	breq	.+96     	; 0xd18 <__ultoa_invert+0x6c>
 cb8:	e8 94       	clt
 cba:	6f 93       	push	r22
 cbc:	6e 7f       	andi	r22, 0xFE	; 254
 cbe:	6e 5f       	subi	r22, 0xFE	; 254
 cc0:	7f 4f       	sbci	r23, 0xFF	; 255
 cc2:	8f 4f       	sbci	r24, 0xFF	; 255
 cc4:	9f 4f       	sbci	r25, 0xFF	; 255
 cc6:	af 4f       	sbci	r26, 0xFF	; 255
 cc8:	b1 e0       	ldi	r27, 0x01	; 1
 cca:	3e d0       	rcall	.+124    	; 0xd48 <__ultoa_invert+0x9c>
 ccc:	b4 e0       	ldi	r27, 0x04	; 4
 cce:	3c d0       	rcall	.+120    	; 0xd48 <__ultoa_invert+0x9c>
 cd0:	67 0f       	add	r22, r23
 cd2:	78 1f       	adc	r23, r24
 cd4:	89 1f       	adc	r24, r25
 cd6:	9a 1f       	adc	r25, r26
 cd8:	a1 1d       	adc	r26, r1
 cda:	68 0f       	add	r22, r24
 cdc:	79 1f       	adc	r23, r25
 cde:	8a 1f       	adc	r24, r26
 ce0:	91 1d       	adc	r25, r1
 ce2:	a1 1d       	adc	r26, r1
 ce4:	6a 0f       	add	r22, r26
 ce6:	71 1d       	adc	r23, r1
 ce8:	81 1d       	adc	r24, r1
 cea:	91 1d       	adc	r25, r1
 cec:	a1 1d       	adc	r26, r1
 cee:	20 d0       	rcall	.+64     	; 0xd30 <__ultoa_invert+0x84>
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <__ultoa_invert+0x48>
 cf2:	68 94       	set
 cf4:	3f 91       	pop	r19
 cf6:	2a e0       	ldi	r18, 0x0A	; 10
 cf8:	26 9f       	mul	r18, r22
 cfa:	11 24       	eor	r1, r1
 cfc:	30 19       	sub	r19, r0
 cfe:	30 5d       	subi	r19, 0xD0	; 208
 d00:	31 93       	st	Z+, r19
 d02:	de f6       	brtc	.-74     	; 0xcba <__ultoa_invert+0xe>
 d04:	cf 01       	movw	r24, r30
 d06:	08 95       	ret
 d08:	46 2f       	mov	r20, r22
 d0a:	47 70       	andi	r20, 0x07	; 7
 d0c:	40 5d       	subi	r20, 0xD0	; 208
 d0e:	41 93       	st	Z+, r20
 d10:	b3 e0       	ldi	r27, 0x03	; 3
 d12:	0f d0       	rcall	.+30     	; 0xd32 <__ultoa_invert+0x86>
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__ultoa_invert+0x5c>
 d16:	f6 cf       	rjmp	.-20     	; 0xd04 <__ultoa_invert+0x58>
 d18:	46 2f       	mov	r20, r22
 d1a:	4f 70       	andi	r20, 0x0F	; 15
 d1c:	40 5d       	subi	r20, 0xD0	; 208
 d1e:	4a 33       	cpi	r20, 0x3A	; 58
 d20:	18 f0       	brcs	.+6      	; 0xd28 <__ultoa_invert+0x7c>
 d22:	49 5d       	subi	r20, 0xD9	; 217
 d24:	31 fd       	sbrc	r19, 1
 d26:	40 52       	subi	r20, 0x20	; 32
 d28:	41 93       	st	Z+, r20
 d2a:	02 d0       	rcall	.+4      	; 0xd30 <__ultoa_invert+0x84>
 d2c:	a9 f7       	brne	.-22     	; 0xd18 <__ultoa_invert+0x6c>
 d2e:	ea cf       	rjmp	.-44     	; 0xd04 <__ultoa_invert+0x58>
 d30:	b4 e0       	ldi	r27, 0x04	; 4
 d32:	a6 95       	lsr	r26
 d34:	97 95       	ror	r25
 d36:	87 95       	ror	r24
 d38:	77 95       	ror	r23
 d3a:	67 95       	ror	r22
 d3c:	ba 95       	dec	r27
 d3e:	c9 f7       	brne	.-14     	; 0xd32 <__ultoa_invert+0x86>
 d40:	00 97       	sbiw	r24, 0x00	; 0
 d42:	61 05       	cpc	r22, r1
 d44:	71 05       	cpc	r23, r1
 d46:	08 95       	ret
 d48:	9b 01       	movw	r18, r22
 d4a:	ac 01       	movw	r20, r24
 d4c:	0a 2e       	mov	r0, r26
 d4e:	06 94       	lsr	r0
 d50:	57 95       	ror	r21
 d52:	47 95       	ror	r20
 d54:	37 95       	ror	r19
 d56:	27 95       	ror	r18
 d58:	ba 95       	dec	r27
 d5a:	c9 f7       	brne	.-14     	; 0xd4e <__ultoa_invert+0xa2>
 d5c:	62 0f       	add	r22, r18
 d5e:	73 1f       	adc	r23, r19
 d60:	84 1f       	adc	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	a0 1d       	adc	r26, r0
 d66:	08 95       	ret

00000d68 <__prologue_saves__>:
 d68:	2f 92       	push	r2
 d6a:	3f 92       	push	r3
 d6c:	4f 92       	push	r4
 d6e:	5f 92       	push	r5
 d70:	6f 92       	push	r6
 d72:	7f 92       	push	r7
 d74:	8f 92       	push	r8
 d76:	9f 92       	push	r9
 d78:	af 92       	push	r10
 d7a:	bf 92       	push	r11
 d7c:	cf 92       	push	r12
 d7e:	df 92       	push	r13
 d80:	ef 92       	push	r14
 d82:	ff 92       	push	r15
 d84:	0f 93       	push	r16
 d86:	1f 93       	push	r17
 d88:	cf 93       	push	r28
 d8a:	df 93       	push	r29
 d8c:	cd b7       	in	r28, 0x3d	; 61
 d8e:	de b7       	in	r29, 0x3e	; 62
 d90:	ca 1b       	sub	r28, r26
 d92:	db 0b       	sbc	r29, r27
 d94:	0f b6       	in	r0, 0x3f	; 63
 d96:	f8 94       	cli
 d98:	de bf       	out	0x3e, r29	; 62
 d9a:	0f be       	out	0x3f, r0	; 63
 d9c:	cd bf       	out	0x3d, r28	; 61
 d9e:	09 94       	ijmp

00000da0 <__epilogue_restores__>:
 da0:	2a 88       	ldd	r2, Y+18	; 0x12
 da2:	39 88       	ldd	r3, Y+17	; 0x11
 da4:	48 88       	ldd	r4, Y+16	; 0x10
 da6:	5f 84       	ldd	r5, Y+15	; 0x0f
 da8:	6e 84       	ldd	r6, Y+14	; 0x0e
 daa:	7d 84       	ldd	r7, Y+13	; 0x0d
 dac:	8c 84       	ldd	r8, Y+12	; 0x0c
 dae:	9b 84       	ldd	r9, Y+11	; 0x0b
 db0:	aa 84       	ldd	r10, Y+10	; 0x0a
 db2:	b9 84       	ldd	r11, Y+9	; 0x09
 db4:	c8 84       	ldd	r12, Y+8	; 0x08
 db6:	df 80       	ldd	r13, Y+7	; 0x07
 db8:	ee 80       	ldd	r14, Y+6	; 0x06
 dba:	fd 80       	ldd	r15, Y+5	; 0x05
 dbc:	0c 81       	ldd	r16, Y+4	; 0x04
 dbe:	1b 81       	ldd	r17, Y+3	; 0x03
 dc0:	aa 81       	ldd	r26, Y+2	; 0x02
 dc2:	b9 81       	ldd	r27, Y+1	; 0x01
 dc4:	ce 0f       	add	r28, r30
 dc6:	d1 1d       	adc	r29, r1
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	de bf       	out	0x3e, r29	; 62
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	cd bf       	out	0x3d, r28	; 61
 dd2:	ed 01       	movw	r28, r26
 dd4:	08 95       	ret

00000dd6 <_exit>:
 dd6:	f8 94       	cli

00000dd8 <__stop_program>:
 dd8:	ff cf       	rjmp	.-2      	; 0xdd8 <__stop_program>
