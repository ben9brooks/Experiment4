
experiment4_try3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00002186  0000221a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  008001a0  008001a0  000022ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d48  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d5  00000000  00000000  00005220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a7  00000000  00000000  000065f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000799c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a10  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001922  00000000  00000000  00008794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__ctors_end>
       4:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
       8:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
       c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      10:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      14:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      18:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      1c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      20:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      24:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      28:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      2c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      30:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      34:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      38:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      3c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      40:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      44:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      48:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      4c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      50:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      54:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      58:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      5c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      60:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      64:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      68:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      6c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      70:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      74:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      78:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      7c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      80:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      84:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      88:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      8c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      90:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      94:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      98:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      9c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      a0:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      a4:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      a8:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      ac:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      b0:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      b4:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      b8:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      bc:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      c0:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      c4:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>
      c8:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__bad_interrupt>

000000cc <CONFIG3>:
      cc:	54 07 55 10 06 09 0b 02 52 b8 51 00 65 00 64 00     T.U.....R.Q.e.d.
      dc:	50 06 61 05 05 a1 0d 00 18 04 0c 00 46 03 48 03     P.a.........F.H.
      ec:	72 01 ff ff ff ff                                   r.....

000000f2 <CONFIG2>:
      f2:	3a 00 64 3a 65 bb 08 3a 09 bb 50 10 52 67 51 77     :.d:e..:..P.RgQw
     102:	18 04 05 a1 54 01 55 21 07 00 06 0c 0b 03 50 10     ....T.U!......P.
     112:	51 00 52 04 61 0f 64 55 65 55 18 04 05 a1 ff ff     Q.R.a.dUeU......
     122:	ff ff                                               ..

00000124 <CONFIG>:
     124:	3a 01 2a 04 28 00 29 00 20 00 21 00 22 00 23 00     :.*.(.). .!.".#.
     134:	24 00 25 00 26 00 27 00 28 01 28 02 21 8f 28 03     $.%.&.'.(.(.!.(.
     144:	21 00 28 04 28 05 28 06 28 07 28 08 28 09 28 0a     !.(.(.(.(.(.(.(.
     154:	28 0b 28 0c 20 80 21 90 28 0d 20 00 21 00 28 0e     (.(. .!.(. .!.(.
     164:	20 81 21 91 28 0f 20 00 21 92 28 10 21 00 28 11      .!.(. .!.(.!.(.
     174:	21 93 28 12 21 00 28 13 28 14 28 15 20 82 28 16     !.(.!.(.(.(. .(.
     184:	20 00 28 17 28 18 28 19 21 94 28 1a 21 95 28 1b      .(.(.(.!.(.!.(.
     194:	21 96 28 1c 21 00 28 1d 20 83 28 1e 20 00 28 1f     !.(.!.(. .(. .(.
     1a4:	21 97 28 20 21 00 28 21 28 22 28 23 28 24 28 25     !.( !.(!("(#($(%
     1b4:	28 26 28 27 28 28 28 29 28 2a 20 84 28 2b 20 00     (&('((()(* .(+ .
     1c4:	28 2c 28 2d 28 2e 28 2f 28 30 28 31 28 32 20 85     (,(-(.(/(0(1(2 .
     1d4:	28 33 20 00 28 34 28 35 28 36 28 37 21 98 28 38     (3 .(4(5(6(7!.(8
     1e4:	21 00 28 39 28 3a 28 3b 28 3c 28 3d 28 3e 28 3f     !.(9(:(;(<(=(>(?
     1f4:	28 40 28 41 28 42 28 43 28 44 28 45 28 46 28 47     (@(A(B(C(D(E(F(G
     204:	28 48 28 49 28 4a 28 4b 28 4c 28 4d 28 4e 28 4f     (H(I(J(K(L(M(N(O
     214:	28 50 28 51 28 52 28 53 28 54 28 55 28 56 28 57     (P(Q(R(S(T(U(V(W
     224:	28 58 28 59 28 5a 28 5b 28 5c 28 5d 28 5e 28 5f     (X(Y(Z([(\(](^(_
     234:	28 60 28 61 28 62 21 99 28 63 21 00 28 64 28 65     (`(a(b!.(c!.(d(e
     244:	28 66 28 67 28 68 28 69 28 6a 28 6b 28 6c 28 6d     (f(g(h(i(j(k(l(m
     254:	28 6e 28 6f 28 70 28 71 28 72 28 73 28 74 28 75     (n(o(p(q(r(s(t(u
     264:	28 76 28 77 28 78 28 79 28 7a 28 7b 28 7c 28 7d     (v(w(x(y(z({(|(}
     274:	28 7e 28 7f 28 80 28 81 28 82 28 83 28 84 28 85     (~(.(.(.(.(.(.(.
     284:	28 86 28 87 28 88 28 89 28 8a 28 8b 28 8c 28 8d     (.(.(.(.(.(.(.(.
     294:	28 8e 28 8f 28 90 28 91 20 86 28 92 20 87 28 93     (.(.(.(. .(. .(.
     2a4:	20 00 28 94 28 95 28 96 28 97 28 98 28 99 28 9a      .(.(.(.(.(.(.(.
     2b4:	28 9b 28 9c 28 9d 28 9e 28 9f 21 9a 28 a0 21 00     (.(.(.(.(.!.(.!.
     2c4:	28 a1 28 a2 28 a3 28 a4 28 a5 28 a6 28 a7 28 a8     (.(.(.(.(.(.(.(.
     2d4:	28 a9 28 aa 28 ab 28 ac 28 ad 28 ae 28 af 28 b0     (.(.(.(.(.(.(.(.
     2e4:	28 b1 28 b2 28 b3 28 b4 28 b5 28 b6 28 b7 28 b8     (.(.(.(.(.(.(.(.
     2f4:	28 b9 20 88 28 ba 20 00 28 bb 20 89 28 bc 20 00     (. .(. .(. .(. .
     304:	28 bd 28 be 28 bf 28 c0 28 c1 28 c2 28 c3 21 9b     (.(.(.(.(.(.(.!.
     314:	28 c4 21 00 28 c5 28 c6 28 c7 28 c8 28 c9 28 ca     (.!.(.(.(.(.(.(.
     324:	28 cb 28 cc 28 cd 28 ce 28 cf 28 d0 28 d1 28 d2     (.(.(.(.(.(.(.(.
     334:	28 d3 28 d4 28 d5 28 d6 28 d7 28 d8 28 d9 28 da     (.(.(.(.(.(.(.(.
     344:	28 db 28 dc 28 dd 28 de 28 df 28 e0 28 e1 20 8a     (.(.(.(.(.(.(. .
     354:	28 e2 20 8b 28 e3 20 00 28 e4 28 e5 28 e6 28 e7     (. .(. .(.(.(.(.
     364:	28 e8 28 e9 28 ea 28 eb 28 ec 28 ed 28 ee 28 ef     (.(.(.(.(.(.(.(.
     374:	28 f0 28 f1 28 f2 28 f3 28 f4 28 f5 28 f6 28 f7     (.(.(.(.(.(.(.(.
     384:	28 f8 20 8c 28 f9 20 00 21 9c 28 fa 21 9d 28 fb     (. .(. .!.(.!.(.
     394:	20 8d 21 9e 28 fc 20 8e 21 9f 28 fd 20 00 21 00      .!.(. .!.(. .!.
     3a4:	28 fe 28 ff 2a 01 28 00 22 01 23 95 24 89 25 07     (.(.*.(.".#.$.%.
     3b4:	26 a4 27 07 28 01 21 c7 22 00 23 80 26 c4 27 0c     &.'.(.!.".#.&.'.
     3c4:	28 02 20 09 21 1c 22 04 26 aa 27 0a 28 03 20 00     (. .!.".&.'.(. .
     3d4:	21 00 22 00 23 a6 26 a0 27 07 28 04 28 05 20 05     !.".#.&.'.(.(. .
     3e4:	23 84 26 b4 27 09 28 06 20 00 22 03 23 00 24 81     #.&.'.(. .".#.$.
     3f4:	25 c0 26 ab 27 0a 28 07 21 ae 22 00 23 95 24 89     %.&.'.(.!.".#.$.
     404:	25 07 26 a4 27 00 28 08 21 48 22 01 23 80 26 c4     %.&.'.(.!H".#.&.
     414:	27 0c 28 09 20 09 21 04 22 04 26 aa 27 0a 28 0a     '.(. .!.".&.'.(.
     424:	20 00 21 00 22 00 23 a8 26 a4 27 07 28 0b 28 0c      .!.".#.&.'.(.(.
     434:	21 40 22 20 23 80 26 c4 27 0c 28 0d 22 24 26 c6     !@" #.&.'.(."$&.
     444:	28 0e 21 9e 22 00 26 c8 28 0f 20 09 21 02 22 14     (.!.".&.(. .!.".
     454:	26 aa 27 0a 28 10 20 05 21 00 22 00 23 84 26 b4     &.'.(. .!.".#.&.
     464:	27 09 28 11 20 00 21 01 23 00 24 01 25 c0 26 ab     '.(. .!.#.$.%.&.
     474:	27 0a 28 12 21 c3 23 95 24 89 25 07 26 20 27 00     '.(.!.#.$.%.& '.
     484:	28 13 20 03 21 c2 23 83 26 26 27 0d 28 14 21 b3     (. .!.#.&&'.(.!.
     494:	22 08 28 15 20 00 21 c6 22 00 23 95 26 00 27 08     ".(. .!.".#.&.'.
     4a4:	28 16 21 00 23 00 24 96 25 03 26 aa 27 0a 28 17     (.!.#.$.%.&.'.(.
     4b4:	20 42 21 b6 23 80 24 89 25 07 28 18 20 00 21 00      B!.#.$.%.(. .!.
     4c4:	23 94 26 0e 28 19 20 0f 23 84 26 b4 27 09 28 1a     #.&.(. .#.&.'.(.
     4d4:	20 00 23 93 26 a8 27 03 28 1b 26 28 27 00 28 1c      .#.&.'.(.&('.(.
     4e4:	21 01 23 00 24 01 25 c0 26 ab 27 0a 28 1d 21 c5     !.#.$.%.&.'.(.!.
     4f4:	23 95 24 89 25 07 26 20 27 00 28 1e 21 00 23 94     #.$.%.& '.(.!.#.
     504:	26 00 27 0a 28 1f 26 0e 28 20 20 03 21 79 22 01     &.'.(.&.(  .!y".
     514:	23 83 26 26 27 0d 28 21 21 32 28 22 20 00 21 04     #.&&'.(!!2(" .!.
     524:	22 00 23 80 24 00 25 fc 26 aa 27 0a 28 23 21 00     ".#.$.%.&.'.(#!.
     534:	23 00 25 00 28 24 21 a3 22 0d 23 80 24 9e 25 3b     #.%.($!.".#.$.%;
     544:	28 25 20 42 21 57 22 01 24 89 25 07 28 26 20 00     (% B!W".$.%.(& .
     554:	21 43 22 0d 24 00 25 38 28 27 21 08 22 98 23 95     !C".$.%8('!.".#.
     564:	24 89 25 07 26 24 27 00 28 28 20 42 21 93 22 01     $.%.&$'.(( B!.".
     574:	23 80 26 aa 27 0a 28 29 20 03 21 7e 22 04 23 83     #.&.'.() .!~".#.
     584:	26 26 27 0d 28 2a 20 00 21 b0 22 00 23 95 26 a0     &&'.(* .!.".#.&.
     594:	27 07 28 2b 21 00 23 00 24 0c 25 04 26 aa 27 0a     '.(+!.#.$.%.&.'.
     5a4:	28 2c 21 02 23 80 24 86 25 c3 26 ab 28 2d 20 42     (,!.#.$.%.&.(- B
     5b4:	21 97 22 01 24 89 25 07 26 aa 28 2e 20 00 21 00     !.".$.%.&.(. .!.
     5c4:	22 00 24 1f 25 04 28 2f 21 b2 23 95 24 89 25 07     ".$.%.(/!.#.$.%.
     5d4:	26 20 27 04 28 30 20 42 21 8b 22 04 23 80 26 aa     & '.(0 B!.".#.&.
     5e4:	27 0a 28 31 20 00 21 b1 22 00 23 95 26 a0 27 07     '.(1 .!.".#.&.'.
     5f4:	28 32 20 03 21 75 22 04 23 83 26 26 27 0d 28 33     (2 .!u".#.&&'.(3
     604:	20 05 21 00 22 00 23 84 26 b4 27 09 28 34 20 00      .!.".#.&.'.(4 .
     614:	21 60 23 00 24 01 25 c0 26 ab 27 0a 28 35 21 08     !`#.$.%.&.'.(5!.
     624:	22 98 23 95 24 89 25 07 26 24 27 00 28 36 21 bc     ".#.$.%.&$'.(6!.
     634:	22 00 28 37 21 a3 22 0d 23 00 24 01 25 c0 26 ab     ".(7!.".#.$.%.&.
     644:	27 0a 28 38 21 60 22 00 23 80 24 00 25 38 26 aa     '.(8!`".#.$.%8&.
     654:	28 39 21 06 22 98 23 95 24 89 25 07 26 24 27 00     (9!.".#.$.%.&$'.
     664:	28 3a 21 be 22 00 28 3b 20 05 21 00 23 84 26 b4     (:!.".(; .!.#.&.
     674:	27 09 28 3c 20 00 21 60 23 00 24 01 25 c0 26 ab     '.(< .!`#.$.%.&.
     684:	27 0a 28 3d 21 42 22 01 23 95 24 89 25 07 26 24     '.(=!B".#.$.%.&$
     694:	27 00 28 3e 21 0c 22 98 26 a4 27 07 28 3f 21 08     '.(>!.".&.'.(?!.
     6a4:	28 40 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a     (@!`".#.$.%.&.'.
     6b4:	28 41 21 0c 22 98 23 95 24 89 25 07 26 24 27 00     (A!.".#.$.%.&$'.
     6c4:	28 42 20 05 21 00 22 00 23 84 26 b4 27 09 28 43     (B .!.".#.&.'.(C
     6d4:	20 00 23 80 24 00 25 10 26 ab 27 0a 28 44 21 22      .#.$.%.&.'.(D!"
     6e4:	22 01 23 95 24 89 25 07 26 24 27 00 28 45 21 00     ".#.$.%.&$'.(E!.
     6f4:	22 00 23 00 24 04 25 12 26 aa 27 0a 28 46 20 03     ".#.$.%.&.'.(F .
     704:	21 d4 22 05 23 83 24 89 25 07 26 26 27 0d 28 47     !.".#.$.%.&&'.(G
     714:	20 00 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a      .!`".#.$.%.&.'.
     724:	28 48 21 b3 23 95 24 89 25 07 26 00 27 08 28 49     (H!.#.$.%.&.'.(I
     734:	21 00 23 00 24 09 25 00 26 aa 27 0a 28 4a 21 02     !.#.$.%.&.'.(J!.
     744:	23 80 24 86 25 3b 28 4b 20 42 21 dd 22 05 24 89     #.$.%;(K B!.".$.
     754:	25 07 28 4c 20 00 21 00 22 00 24 1f 25 00 28 4d     %.(L .!.".$.%.(M
     764:	21 b3 23 95 24 89 25 07 26 20 27 00 28 4e 21 00     !.#.$.%.& '.(N!.
     774:	23 00 24 97 25 03 26 aa 27 0a 28 4f 20 42 21 e2     #.$.%.&.'.(O B!.
     784:	22 05 23 80 24 89 25 07 28 50 20 00 21 10 22 00     ".#.$.%.(P .!.".
     794:	23 00 24 80 25 cc 26 ab 28 51 21 00 22 40 23 b4     #.$.%.&.(Q!."@#.
     7a4:	24 89 25 07 26 aa 27 04 28 52 22 00 23 b0 26 92     $.%.&.'.(R".#.&.
     7b4:	27 09 28 53 21 14 22 01 23 95 26 00 27 08 28 54     '.(S!.".#.&.'.(T
     7c4:	21 48 23 a4 26 2a 27 00 28 55 21 00 22 00 23 00     !H#.&*'.(U!.".#.
     7d4:	24 09 25 00 26 aa 27 0a 28 56 21 08 23 80 24 86     $.%.&.'.(V!.#.$.
     7e4:	25 3b 28 57 20 42 21 11 22 07 24 89 25 07 28 58     %;(W B!.".$.%.(X
     7f4:	20 00 21 00 22 00 24 1f 25 00 28 59 21 14 22 01      .!.".$.%.(Y!.".
     804:	23 95 24 89 25 07 26 20 27 00 28 5a 21 16 26 02     #.$.%.& '.(Z!.&.
     814:	27 09 28 5b 21 00 22 00 23 00 24 80 25 48 26 aa     '.([!.".#.$.%H&.
     824:	27 0a 28 5c 23 a0 24 89 25 07 26 14 27 09 28 5d     '.(\#.$.%.&.'.(]
     834:	24 80 25 50 26 a4 27 04 28 5e 21 16 22 01 23 95     $.%P&.'.(^!.".#.
     844:	24 89 25 07 27 00 28 5f 21 04 22 00 23 00 24 9c     $.%.'.(_!.".#.$.
     854:	25 78 26 aa 27 0a 28 60 21 43 22 0d 24 01 25 c4     %x&.'.(`!C".$.%.
     864:	26 ab 28 61 21 03 22 00 24 15 28 62 21 00 24 00     &.(a!.".$.(b!.$.
     874:	25 00 26 aa 28 63 21 5e 23 95 24 89 25 07 26 10     %.&.(c!^#.$.%.&.
     884:	27 09 28 64 21 03 23 00 24 15 25 c4 26 ab 27 0a     '.(d!.#.$.%.&.'.
     894:	28 65 21 00 23 80 24 00 25 06 26 aa 28 66 24 8f     (e!.#.$.%.&.(f$.
     8a4:	25 e3 26 ab 28 67 20 42 21 cd 22 07 24 89 25 07     %.&.(g B!.".$.%.
     8b4:	26 aa 28 68 20 00 21 60 22 00 23 00 24 01 25 c0     &.(h .!`".#.$.%.
     8c4:	26 ab 28 69 21 00 23 80 24 8f 25 03 26 aa 28 6a     &.(i!.#.$.%.&.(j
     8d4:	20 42 21 dd 22 07 24 89 25 07 28 6b 20 00 21 43      B!.".$.%.(k .!C
     8e4:	22 0d 23 00 24 01 25 c0 26 ab 28 6c 21 00 22 00     ".#.$.%.&.(l!.".
     8f4:	24 00 25 04 26 aa 28 6d 20 03 21 7f 22 01 23 83     $.%.&.(m .!.".#.
     904:	24 89 25 07 26 26 27 0d 28 6e 21 62 28 6f 20 05     $.%.&&'.(n!b(o .
     914:	21 00 22 00 23 84 26 b4 27 09 28 70 20 00 21 06     !.".#.&.'.(p .!.
     924:	23 95 26 00 27 08 28 71 21 01 23 00 24 97 25 3b     #.&.'.(q!.#.$.%;
     934:	26 aa 27 0a 28 72 20 42 21 0e 22 08 23 80 24 89     &.'.(r B!.".#.$.
     944:	25 07 28 73 20 03 21 3c 22 0b 23 83 26 26 27 0d     %.(s .!<".#.&&'.
     954:	28 74 20 00 21 03 22 00 23 95 26 02 27 08 28 75     (t .!.".#.&.'.(u
     964:	21 27 23 00 24 81 25 c4 26 ab 27 0a 28 76 21 00     !'#.$.%.&.'.(v!.
     974:	23 80 24 09 25 48 26 aa 28 77 21 58 22 34 23 a3     #.$.%H&.(w!X"4#.
     984:	24 89 25 07 26 2a 27 00 28 78 21 00 22 00 23 a0     $.%.&*'.(x!.".#.
     994:	26 00 27 09 28 79 21 07 23 80 24 03 25 39 26 aa     &.'.(y!.#.$.%9&.
     9a4:	27 0a 28 7a 21 04 23 00 24 1c 25 38 28 7b 21 07     '.(z!.#.$.%8({!.
     9b4:	23 80 24 83 25 39 28 7c 21 03 23 95 24 89 25 07     #.$.%9(|!.#.$.%.
     9c4:	26 02 27 08 28 7d 21 27 23 00 24 81 25 c4 26 ab     &.'.(}!'#.$.%.&.
     9d4:	27 0a 28 7e 21 00 23 80 24 09 25 48 26 aa 28 7f     '.(~!.#.$.%H&.(.
     9e4:	21 58 22 34 23 a3 24 89 25 07 26 2a 27 00 28 80     !X"4#.$.%.&*'.(.
     9f4:	21 06 22 00 23 00 24 81 25 c0 26 93 27 01 28 81     !.".#.$.%.&.'.(.
     a04:	21 00 23 80 24 89 25 48 26 aa 27 0a 28 82 20 02     !.#.$.%H&.'.(. .
     a14:	21 66 22 08 23 00 24 00 25 66 28 83 20 00 21 00     !f".#.$.%f(. .!.
     a24:	22 00 23 80 24 1f 25 02 28 84 21 06 24 89 25 07     ".#.$.%.(.!.$.%.
     a34:	26 dc 27 0c 28 85 21 00 23 aa 26 aa 27 0a 28 86     &.'.(.!.#.&.'.(.
     a44:	23 b6 26 00 27 08 28 87 23 80 24 86 25 3b 26 aa     #.&.'.(.#.$.%;&.
     a54:	27 0a 28 88 21 05 24 89 25 07 26 dc 27 0c 28 89     '.(.!.$.%.&.'.(.
     a64:	21 00 23 aa 26 aa 27 0a 28 8a 23 b6 26 00 27 08     !.#.&.'.(.#.&.'.
     a74:	28 8b 23 80 24 86 25 3b 26 aa 27 0a 28 8c 20 42     (.#.$.%;&.'.(. B
     a84:	21 7b 22 08 24 89 25 07 28 8d 20 00 21 00 22 00     !{".$.%.(. .!.".
     a94:	23 00 24 01 25 82 28 8e 21 05 24 81 25 c2 26 ab     #.$.%.(.!.$.%.&.
     aa4:	28 8f 20 03 21 93 22 08 23 83 24 89 25 07 26 26     (. .!.".#.$.%.&&
     ab4:	27 0d 28 90 20 00 21 05 22 00 23 00 24 81 25 c0     '.(. .!.".#.$.%.
     ac4:	26 13 27 01 28 91 21 00 23 80 24 89 25 48 26 aa     &.'.(.!.#.$.%H&.
     ad4:	27 0a 28 92 20 02 21 7e 22 08 23 00 24 00 25 66     '.(. .!~".#.$.%f
     ae4:	28 93 20 00 21 00 22 00 23 80 24 1f 25 02 28 94     (. .!.".#.$.%.(.
     af4:	21 05 24 89 25 07 26 dc 27 0c 28 95 21 00 23 aa     !.$.%.&.'.(.!.#.
     b04:	26 aa 27 0a 28 96 23 b6 26 00 27 08 28 97 23 80     &.'.(.#.&.'.(.#.
     b14:	24 86 25 3b 26 aa 27 0a 28 98 21 05 24 89 25 07     $.%;&.'.(.!.$.%.
     b24:	26 dc 27 0c 28 99 21 00 23 aa 26 aa 27 0a 28 9a     &.'.(.!.#.&.'.(.
     b34:	23 80 24 1f 25 02 28 9b 21 01 23 00 24 81 25 c2     #.$.%.(.!.#.$.%.
     b44:	26 ab 28 9c 20 03 21 93 22 08 23 83 24 89 25 07     &.(. .!.".#.$.%.
     b54:	26 26 27 0d 28 9d 20 00 21 04 22 00 23 95 26 12     &&'.(. .!.".#.&.
     b64:	27 08 28 9e 21 60 23 c4 26 aa 27 04 28 9f 21 00     '.(.!`#.&.'.(.!.
     b74:	23 c0 26 00 27 09 28 a0 20 42 21 cb 22 08 23 80     #.&.'.(. B!.".#.
     b84:	26 aa 27 0a 28 a1 20 70 21 54 22 b8 23 95 26 12     &.'.(. p!T".#.&.
     b94:	27 08 28 a2 20 02 21 cc 22 08 23 80 26 aa 27 0a     '.(. .!.".#.&.'.
     ba4:	28 a3 20 03 21 ca 22 0f 23 83 26 26 27 0d 28 a4     (. .!.".#.&&'.(.
     bb4:	20 00 21 00 22 00 23 00 24 8c 25 0c 26 aa 27 0a      .!.".#.$.%.&.'.
     bc4:	28 a5 21 04 24 82 25 78 28 a6 21 00 23 80 24 89     (.!.$.%x(.!.#.$.
     bd4:	25 48 26 12 27 04 28 a7 20 03 21 de 22 0f 23 83     %H&.'.(. .!.".#.
     be4:	25 07 26 26 27 0d 28 a8 20 00 21 01 22 00 23 00     %.&&'.(. .!.".#.
     bf4:	24 9c 25 78 26 aa 27 0a 28 a9 21 00 23 80 24 81     $.%x&.'.(.!.#.$.
     c04:	25 40 28 aa 20 03 21 cf 22 0f 23 83 24 89 25 07     %@(. .!.".#.$.%.
     c14:	26 26 27 0d 28 ab 20 70 21 08 22 b8 23 95 26 a0     &&'.(. p!.".#.&.
     c24:	27 04 28 ac 20 03 21 d4 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     c34:	28 ad 21 27 22 0b 28 ae 20 70 21 63 22 b8 23 95     (.!'".(. p!c".#.
     c44:	26 12 27 08 28 af 20 00 21 01 22 00 23 80 24 86     &.'.(. .!.".#.$.
     c54:	25 cb 26 ab 27 0a 28 b0 20 42 21 dd 22 08 24 89     %.&.'.(. B!.".$.
     c64:	25 07 26 aa 28 b1 20 00 21 18 22 80 23 95 26 a4     %.&.(. .!.".#.&.
     c74:	27 00 28 b2 20 03 21 d9 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     c84:	28 b3 20 70 21 0a 22 b8 23 95 26 a0 27 00 28 b4     (. p!.".#.&.'.(.
     c94:	20 02 21 e0 22 08 23 80 26 aa 27 0a 28 b5 20 70      .!.".#.&.'.(. p
     ca4:	21 0a 22 b8 23 95 26 a0 27 00 28 b6 21 54 26 02     !.".#.&.'.(.!T&.
     cb4:	27 08 28 b7 20 00 21 18 22 80 26 a4 27 00 28 b8     '.(. .!.".&.'.(.
     cc4:	21 00 22 00 23 80 24 80 25 48 26 aa 27 0a 28 b9     !.".#.$.%H&.'.(.
     cd4:	20 70 21 5e 22 b8 23 95 24 89 25 07 26 12 27 08      p!^".#.$.%.&.'.
     ce4:	28 ba 20 00 21 00 22 00 23 80 24 09 25 4b 26 aa     (. .!.".#.$.%K&.
     cf4:	27 0a 28 bb 20 70 21 5f 22 b8 23 95 24 89 25 07     '.(. p!_".#.$.%.
     d04:	26 10 27 08 28 bc 20 00 21 00 22 00 23 00 24 1c     &.'.(. .!.".#.$.
     d14:	25 83 26 ab 27 0a 28 bd 20 03 21 32 22 09 23 83     %.&.'.(. .!2".#.
     d24:	24 89 25 07 26 26 27 0d 28 be 20 00 21 00 22 00     $.%.&&'.(. .!.".
     d34:	23 00 24 82 25 8c 26 ab 27 0a 28 bf 20 03 21 25     #.$.%.&.'.(. .!%
     d44:	22 09 23 83 24 89 25 07 26 26 27 0d 28 c0 20 42     ".#.$.%.&&'.(. B
     d54:	21 bc 23 80 26 aa 27 0a 28 c1 20 00 21 01 22 00     !.#.&.'.(. .!.".
     d64:	23 00 24 01 25 c0 26 ab 28 c2 20 70 21 0f 22 b8     #.$.%.&.(. p!.".
     d74:	23 95 24 89 25 07 26 20 27 00 28 c3 20 03 21 e3     #.$.%.& '.(. .!.
     d84:	22 0f 23 83 26 26 27 0d 28 c4 20 05 21 00 22 00     ".#.&&'.(. .!.".
     d94:	23 84 26 b4 27 09 28 c5 20 00 21 03 23 95 26 14     #.&.'.(. .!.#.&.
     da4:	27 08 28 c6 21 a6 23 a4 26 2a 27 05 28 c7 21 00     '.(.!.#.&*'.(.!.
     db4:	23 a0 26 44 27 09 28 c8 21 18 22 6d 23 80 24 9e     #.&D'.(.!."m#.$.
     dc4:	25 7b 26 aa 27 0a 28 c9 20 42 21 13 22 0b 24 89     %{&.'.(. B!.".$.
     dd4:	25 07 28 ca 20 00 21 ae 22 00 23 95 26 24 27 00     %.(. .!.".#.&$'.
     de4:	28 cb 21 00 22 03 23 80 24 87 25 7b 26 aa 27 0a     (.!.".#.$.%{&.'.
     df4:	28 cc 20 42 21 16 22 0b 24 89 25 07 28 cd 20 00     (. B!.".$.%.(. .
     e04:	21 ae 22 00 23 95 26 24 27 00 28 ce 20 05 21 00     !.".#.&$'.(. .!.
     e14:	23 84 26 b4 27 09 28 cf 20 03 21 0d 22 0b 23 83     #.&.'.(. .!.".#.
     e24:	26 26 27 0d 28 d0 20 00 21 00 22 00 23 00 24 80     &&'.(. .!.".#.$.
     e34:	26 02 27 00 28 d1 23 80 24 09 25 48 26 1e 28 d2     &.'.(.#.$.%H&.(.
     e44:	21 58 22 34 23 33 24 80 25 07 26 2a 28 d3 21 00     !X"4#3$.%.&*(.!.
     e54:	22 00 23 00 26 80 27 10 28 d4 21 10 23 63 26 2a     ".#.&.'.(.!.#c&*
     e64:	27 00 28 d5 21 00 23 60 26 a8 27 12 28 d6 21 af     '.(.!.#`&.'.(.!.
     e74:	22 4c 23 00 26 c8 27 0c 28 d7 21 00 22 00 26 80     "L#.&.'.(.!.".&.
     e84:	27 05 28 d8 23 80 24 86 25 3b 26 1e 27 00 28 d9     '.(.#.$.%;&.'.(.
     e94:	20 42 21 1c 22 0e 23 00 24 80 25 07 28 da 20 00      B!.".#.$.%.(. .
     ea4:	21 35 22 29 26 c4 27 0c 28 db 20 02 21 1d 22 0e     !5")&.'.(. .!.".
     eb4:	26 1e 27 00 28 dc 20 00 21 7f 22 34 26 c4 27 0c     &.'.(. .!."4&.'.
     ec4:	28 dd 21 00 22 00 23 90 24 9f 25 04 26 10 27 0a     (.!.".#.$.%.&.'.
     ed4:	28 de 23 00 24 84 25 00 26 80 27 10 28 df 21 06     (.#.$.%.&.'.(.!.
     ee4:	23 63 24 80 25 07 26 2a 27 00 28 e0 21 00 23 80     #c$.%.&*'.(.!.#.
     ef4:	24 89 26 aa 27 0a 28 e1 20 05 23 84 26 b4 27 09     $.&.'.(. .#.&.'.
     f04:	28 e2 20 70 21 61 22 b8 23 95 26 12 27 08 28 e3     (. p!a".#.&.'.(.
     f14:	20 00 21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a      .!.".#.$.%.&.'.
     f24:	28 e4 20 42 21 ce 22 0f 24 89 25 07 26 aa 28 e5     (. B!.".$.%.&.(.
     f34:	20 70 21 50 22 b8 23 95 26 12 27 08 28 e6 20 05      p!P".#.&.'.(. .
     f44:	21 00 22 00 23 84 26 b4 27 09 28 e7 20 70 21 64     !.".#.&.'.(. p!d
     f54:	22 b8 23 95 26 12 27 08 28 e8 20 00 21 01 22 00     ".#.&.'.(. .!.".
     f64:	23 80 24 86 25 c3 26 ab 27 0a 28 e9 20 42 21 d3     #.$.%.&.'.(. B!.
     f74:	22 0f 24 89 25 07 26 aa 28 ea 20 70 21 51 22 b8     ".$.%.&.(. p!Q".
     f84:	23 95 26 12 27 08 28 eb 20 05 21 00 22 00 23 84     #.&.'.(. .!.".#.
     f94:	26 b4 27 09 28 ec 20 70 21 65 22 b8 23 95 26 12     &.'.(. p!e".#.&.
     fa4:	27 08 28 ed 20 00 21 01 22 00 23 80 24 86 25 c3     '.(. .!.".#.$.%.
     fb4:	26 ab 27 0a 28 ee 20 42 21 d8 22 0f 24 89 25 07     &.'.(. B!.".$.%.
     fc4:	26 aa 28 ef 20 70 21 52 22 b8 23 95 26 12 27 08     &.(. p!R".#.&.'.
     fd4:	28 f0 20 05 21 00 22 00 23 84 26 b4 27 09 28 f1     (. .!.".#.&.'.(.
     fe4:	20 70 21 61 22 b8 23 95 26 02 27 08 28 f2 20 00      p!a".#.&.'.(. .
     ff4:	21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 f3     !.".#.$.%.&.'.(.
    1004:	20 42 21 dd 22 0f 24 89 25 07 26 aa 28 f4 20 70      B!.".$.%.&.(. p
    1014:	21 50 22 b8 23 95 26 02 27 08 28 f5 20 05 21 00     !P".#.&.'.(. .!.
    1024:	22 00 23 84 26 b4 27 09 28 f6 20 00 21 01 23 80     ".#.&.'.(. .!.#.
    1034:	24 86 25 cb 26 ab 27 0a 28 f7 20 42 21 e1 22 0f     $.%.&.'.(. B!.".
    1044:	24 89 25 07 26 aa 28 f8 20 00 21 02 22 00 23 00     $.%.&.(. .!.".#.
    1054:	24 81 25 c4 26 ab 28 f9 21 00 23 80 24 89 25 48     $.%.&.(.!.#.$.%H
    1064:	26 aa 28 fa 20 05 23 84 25 07 26 b4 27 09 28 fb     &.(. .#.%.&.'.(.
    1074:	20 70 21 4e 22 b8 23 95 26 10 27 08 28 fc 20 00      p!N".#.&.'.(. .
    1084:	21 00 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 fd     !.".#.$.%.&.'.(.
    1094:	20 42 21 e7 22 0f 24 89 25 07 26 aa 28 fe 20 00      B!.".$.%.&.(. .
    10a4:	21 bb 22 00 23 95 26 20 27 00 28 ff 20 05 21 00     !.".#.& '.(. .!.
    10b4:	23 84 26 b4 27 09 2a 08 10 01 ff ff ff ff           #.&.'.*.......

000010c2 <__ctors_end>:
    10c2:	11 24       	eor	r1, r1
    10c4:	1f be       	out	0x3f, r1	; 63
    10c6:	cf ef       	ldi	r28, 0xFF	; 255
    10c8:	d8 e0       	ldi	r29, 0x08	; 8
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	cd bf       	out	0x3d, r28	; 61

000010ce <__do_copy_data>:
    10ce:	11 e0       	ldi	r17, 0x01	; 1
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	b1 e0       	ldi	r27, 0x01	; 1
    10d4:	e6 e8       	ldi	r30, 0x86	; 134
    10d6:	f1 e2       	ldi	r31, 0x21	; 33
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <__do_copy_data+0x10>
    10da:	05 90       	lpm	r0, Z+
    10dc:	0d 92       	st	X+, r0
    10de:	a0 3a       	cpi	r26, 0xA0	; 160
    10e0:	b1 07       	cpc	r27, r17
    10e2:	d9 f7       	brne	.-10     	; 0x10da <__do_copy_data+0xc>

000010e4 <__do_clear_bss>:
    10e4:	21 e0       	ldi	r18, 0x01	; 1
    10e6:	a0 ea       	ldi	r26, 0xA0	; 160
    10e8:	b1 e0       	ldi	r27, 0x01	; 1
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <.do_clear_bss_start>

000010ec <.do_clear_bss_loop>:
    10ec:	1d 92       	st	X+, r1

000010ee <.do_clear_bss_start>:
    10ee:	a0 3f       	cpi	r26, 0xF0	; 240
    10f0:	b2 07       	cpc	r27, r18
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <.do_clear_bss_loop>
    10f4:	0e 94 ce 09 	call	0x139c	; 0x139c <main>
    10f8:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <_exit>

000010fc <__bad_interrupt>:
    10fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001100 <write_sta013_config>:

 //**** Changed order of last two bytes to Enable DATA_REQ on pin 28 
 //**** Otherwise OCLK will be output on pin 28 leading to excess noise on supply.

uint8_t write_sta013_config(volatile TWI_t* TWI_addr)
{
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    1116:	85 b1       	in	r24, 0x05	; 5
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    111c:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    111e:	85 b1       	in	r24, 0x05	; 5
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	85 b9       	out	0x05, r24	; 5
	uint8_t addr = 0;
	uint8_t val[] = {};
	uint8_t error = 0;
	
	//Write CONFIG:
	for(uint16_t i = 0; i < 3998; i+=2)
    1124:	a1 2c       	mov	r10, r1
    1126:	b1 2c       	mov	r11, r1
    1128:	28 c0       	rjmp	.+80     	; 0x117a <write_sta013_config+0x7a>
	{
		addr = pgm_read_byte(&CONFIG[i]);
    112a:	f5 01       	movw	r30, r10
    112c:	ec 5d       	subi	r30, 0xDC	; 220
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	14 91       	lpm	r17, Z
		val[0] = pgm_read_byte(&CONFIG[i+1]);
    1132:	f5 01       	movw	r30, r10
    1134:	eb 5d       	subi	r30, 0xDB	; 219
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	e4 91       	lpm	r30, Z
    113a:	ad b7       	in	r26, 0x3d	; 61
    113c:	be b7       	in	r27, 0x3e	; 62
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	ec 93       	st	X, r30
		
		if((addr == 0xFF) && (val[0] == 0xFF))
    1142:	1f 3f       	cpi	r17, 0xFF	; 255
    1144:	11 f4       	brne	.+4      	; 0x114a <write_sta013_config+0x4a>
    1146:	ef 3f       	cpi	r30, 0xFF	; 255
    1148:	e9 f0       	breq	.+58     	; 0x1184 <write_sta013_config+0x84>
		{
			break;
		}
		do 
		{
			error = TWI_master_transmit(TWI_addr, 0x43, addr, 1, 1, val);
    114a:	81 2f       	mov	r24, r17
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	2d b7       	in	r18, 0x3d	; 61
    1154:	3e b7       	in	r19, 0x3e	; 62
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	69 01       	movw	r12, r18
    115c:	ee 24       	eor	r14, r14
    115e:	e3 94       	inc	r14
    1160:	f1 2c       	mov	r15, r1
    1162:	01 e0       	ldi	r16, 0x01	; 1
    1164:	9c 01       	movw	r18, r24
    1166:	ad 01       	movw	r20, r26
    1168:	63 e4       	ldi	r22, 0x43	; 67
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 25 0b 	call	0x164a	; 0x164a <TWI_master_transmit>
		} while (error != 0);
    1170:	81 11       	cpse	r24, r1
    1172:	eb cf       	rjmp	.-42     	; 0x114a <write_sta013_config+0x4a>
	uint8_t addr = 0;
	uint8_t val[] = {};
	uint8_t error = 0;
	
	//Write CONFIG:
	for(uint16_t i = 0; i < 3998; i+=2)
    1174:	32 e0       	ldi	r19, 0x02	; 2
    1176:	a3 0e       	add	r10, r19
    1178:	b1 1c       	adc	r11, r1
    117a:	8e e9       	ldi	r24, 0x9E	; 158
    117c:	a8 16       	cp	r10, r24
    117e:	8f e0       	ldi	r24, 0x0F	; 15
    1180:	b8 06       	cpc	r11, r24
    1182:	98 f2       	brcs	.-90     	; 0x112a <write_sta013_config+0x2a>
    1184:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    1186:	85 b1       	in	r24, 0x05	; 5
    1188:	8d 7f       	andi	r24, 0xFD	; 253
    118a:	85 b9       	out	0x05, r24	; 5
    118c:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    118e:	85 b1       	in	r24, 0x05	; 5
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	85 b9       	out	0x05, r24	; 5
	//hold PB1 low for at least 100ns:
	GPIO_output_clear(PB, (1<<1));
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	//Write CONFIG2:
	for(uint16_t i = 0; i < 50; i+=2)
    1194:	a1 2c       	mov	r10, r1
    1196:	b1 2c       	mov	r11, r1
    1198:	28 c0       	rjmp	.+80     	; 0x11ea <write_sta013_config+0xea>
	{
		addr = pgm_read_byte(&CONFIG2[i]);
    119a:	f5 01       	movw	r30, r10
    119c:	ee 50       	subi	r30, 0x0E	; 14
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	14 91       	lpm	r17, Z
		val[0] = pgm_read_byte(&CONFIG2[i+1]);
    11a2:	f5 01       	movw	r30, r10
    11a4:	ed 50       	subi	r30, 0x0D	; 13
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	e4 91       	lpm	r30, Z
    11aa:	ad b7       	in	r26, 0x3d	; 61
    11ac:	be b7       	in	r27, 0x3e	; 62
    11ae:	11 96       	adiw	r26, 0x01	; 1
    11b0:	ec 93       	st	X, r30
		
		if((addr == 0xFF) && (val[0] == 0xFF))
    11b2:	1f 3f       	cpi	r17, 0xFF	; 255
    11b4:	11 f4       	brne	.+4      	; 0x11ba <write_sta013_config+0xba>
    11b6:	ef 3f       	cpi	r30, 0xFF	; 255
    11b8:	e1 f0       	breq	.+56     	; 0x11f2 <write_sta013_config+0xf2>
		{
			break;
		}
		do 
		{
			error = TWI_master_transmit(TWI_addr, 0x43, addr, 1, 1, val);
    11ba:	81 2f       	mov	r24, r17
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	2d b7       	in	r18, 0x3d	; 61
    11c4:	3e b7       	in	r19, 0x3e	; 62
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	69 01       	movw	r12, r18
    11cc:	ee 24       	eor	r14, r14
    11ce:	e3 94       	inc	r14
    11d0:	f1 2c       	mov	r15, r1
    11d2:	01 e0       	ldi	r16, 0x01	; 1
    11d4:	9c 01       	movw	r18, r24
    11d6:	ad 01       	movw	r20, r26
    11d8:	63 e4       	ldi	r22, 0x43	; 67
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 25 0b 	call	0x164a	; 0x164a <TWI_master_transmit>
		} while (error != 0);
    11e0:	81 11       	cpse	r24, r1
    11e2:	eb cf       	rjmp	.-42     	; 0x11ba <write_sta013_config+0xba>
	//hold PB1 low for at least 100ns:
	GPIO_output_clear(PB, (1<<1));
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	//Write CONFIG2:
	for(uint16_t i = 0; i < 50; i+=2)
    11e4:	32 e0       	ldi	r19, 0x02	; 2
    11e6:	a3 0e       	add	r10, r19
    11e8:	b1 1c       	adc	r11, r1
    11ea:	82 e3       	ldi	r24, 0x32	; 50
    11ec:	a8 16       	cp	r10, r24
    11ee:	b1 04       	cpc	r11, r1
    11f0:	a0 f2       	brcs	.-88     	; 0x119a <write_sta013_config+0x9a>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    11f2:	85 b1       	in	r24, 0x05	; 5
    11f4:	8d 7f       	andi	r24, 0xFD	; 253
    11f6:	85 b9       	out	0x05, r24	; 5
    11f8:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    11fa:	85 b1       	in	r24, 0x05	; 5
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	85 b9       	out	0x05, r24	; 5
	//hold PB1 low for at least 100ns:
	GPIO_output_clear(PB, (1<<1));
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	//Write CONFIG3:
	for(uint16_t i = 0; i < 38; i+=2)
    1200:	a1 2c       	mov	r10, r1
    1202:	b1 2c       	mov	r11, r1
    1204:	28 c0       	rjmp	.+80     	; 0x1256 <write_sta013_config+0x156>
	{
		addr = pgm_read_byte(&CONFIG3[i]);
    1206:	f5 01       	movw	r30, r10
    1208:	e4 53       	subi	r30, 0x34	; 52
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	14 91       	lpm	r17, Z
		val[0] = pgm_read_byte(&CONFIG3[i+1]);
    120e:	f5 01       	movw	r30, r10
    1210:	e3 53       	subi	r30, 0x33	; 51
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	e4 91       	lpm	r30, Z
    1216:	ad b7       	in	r26, 0x3d	; 61
    1218:	be b7       	in	r27, 0x3e	; 62
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	ec 93       	st	X, r30
		
		if((addr == 0xFF) && (val[0] == 0xFF))
    121e:	1f 3f       	cpi	r17, 0xFF	; 255
    1220:	11 f4       	brne	.+4      	; 0x1226 <write_sta013_config+0x126>
    1222:	ef 3f       	cpi	r30, 0xFF	; 255
    1224:	e1 f0       	breq	.+56     	; 0x125e <write_sta013_config+0x15e>
		{
			break;
		}
		do 
		{
			error = TWI_master_transmit(TWI_addr, 0x43, addr, 1, 1, val);
    1226:	81 2f       	mov	r24, r17
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	2d b7       	in	r18, 0x3d	; 61
    1230:	3e b7       	in	r19, 0x3e	; 62
    1232:	2f 5f       	subi	r18, 0xFF	; 255
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	69 01       	movw	r12, r18
    1238:	ee 24       	eor	r14, r14
    123a:	e3 94       	inc	r14
    123c:	f1 2c       	mov	r15, r1
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	9c 01       	movw	r18, r24
    1242:	ad 01       	movw	r20, r26
    1244:	63 e4       	ldi	r22, 0x43	; 67
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 25 0b 	call	0x164a	; 0x164a <TWI_master_transmit>
		} while (error != 0);
    124c:	81 11       	cpse	r24, r1
    124e:	eb cf       	rjmp	.-42     	; 0x1226 <write_sta013_config+0x126>
	//hold PB1 low for at least 100ns:
	GPIO_output_clear(PB, (1<<1));
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	//Write CONFIG3:
	for(uint16_t i = 0; i < 38; i+=2)
    1250:	32 e0       	ldi	r19, 0x02	; 2
    1252:	a3 0e       	add	r10, r19
    1254:	b1 1c       	adc	r11, r1
    1256:	86 e2       	ldi	r24, 0x26	; 38
    1258:	a8 16       	cp	r10, r24
    125a:	b1 04       	cpc	r11, r1
    125c:	a0 f2       	brcs	.-88     	; 0x1206 <write_sta013_config+0x106>
		{
			error = TWI_master_transmit(TWI_addr, 0x43, addr, 1, 1, val);
		} while (error != 0);
	}
	return 0;
}
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	08 95       	ret

00001276 <read_sta013_config>:

uint8_t read_sta013_config(volatile TWI_t* TWI_addr)
{
    1276:	6f 92       	push	r6
    1278:	7f 92       	push	r7
    127a:	8f 92       	push	r8
    127c:	9f 92       	push	r9
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	5c 01       	movw	r10, r24
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    129a:	85 b1       	in	r24, 0x05	; 5
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	85 b9       	out	0x05, r24	; 5
    12a0:	00 00       	nop
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    12a2:	85 b1       	in	r24, 0x05	; 5
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	85 b9       	out	0x05, r24	; 5
	GPIO_output_clear(PB, (1<<1));
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	uint8_t addr = 0;
	uint8_t val[] = {0};
    12a8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t error = 0;
	
	char * prnt_bffr;
	prnt_bffr=export_print_buffer();
    12aa:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <export_print_buffer>
    12ae:	68 2e       	mov	r6, r24
    12b0:	79 2e       	mov	r7, r25
	clear_print_buffer();
    12b2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <clear_print_buffer>
	//memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 40);
	
	//Read CONFIG3:
	for(uint16_t i = 0; i < 26; i+=2)
    12b6:	81 2c       	mov	r8, r1
    12b8:	91 2c       	mov	r9, r1
    12ba:	45 c0       	rjmp	.+138    	; 0x1346 <read_sta013_config+0xd0>
	{
		addr = pgm_read_byte(&CONFIG3[i]);
    12bc:	f4 01       	movw	r30, r8
    12be:	e4 53       	subi	r30, 0x34	; 52
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	14 91       	lpm	r17, Z
		
		if(addr == 0xFF)
    12c4:	1f 3f       	cpi	r17, 0xFF	; 255
    12c6:	09 f4       	brne	.+2      	; 0x12ca <read_sta013_config+0x54>
    12c8:	43 c0       	rjmp	.+134    	; 0x1350 <read_sta013_config+0xda>
			break;
		}
		do
		{
			
			error = TWI_master_transmit(TWI_addr, 0x43, addr, 0, 0, val);
    12ca:	81 2f       	mov	r24, r17
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	9e 01       	movw	r18, r28
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	69 01       	movw	r12, r18
    12da:	e1 2c       	mov	r14, r1
    12dc:	f1 2c       	mov	r15, r1
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	9c 01       	movw	r18, r24
    12e2:	ad 01       	movw	r20, r26
    12e4:	63 e4       	ldi	r22, 0x43	; 67
    12e6:	c5 01       	movw	r24, r10
    12e8:	0e 94 25 0b 	call	0x164a	; 0x164a <TWI_master_transmit>
		} while (error != 0);
    12ec:	81 11       	cpse	r24, r1
    12ee:	ed cf       	rjmp	.-38     	; 0x12ca <read_sta013_config+0x54>
		do
		{
			
			error = TWI_master_receive(TWI_addr, 0x43, 0, 0, 1, val);
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	6c 01       	movw	r12, r24
    12f6:	ee 24       	eor	r14, r14
    12f8:	e3 94       	inc	r14
    12fa:	f1 2c       	mov	r15, r1
    12fc:	00 e0       	ldi	r16, 0x00	; 0
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	63 e4       	ldi	r22, 0x43	; 67
    1306:	c5 01       	movw	r24, r10
    1308:	0e 94 af 0a 	call	0x155e	; 0x155e <TWI_master_receive>
		} while (error != 0);
    130c:	81 11       	cpse	r24, r1
    130e:	f0 cf       	rjmp	.-32     	; 0x12f0 <read_sta013_config+0x7a>
		sprintf(prnt_bffr, "Received Value = %2x\n\r", val[0]);
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	1f 92       	push	r1
    1314:	8f 93       	push	r24
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	9f 93       	push	r25
    131c:	8f 93       	push	r24
    131e:	7f 92       	push	r7
    1320:	6f 92       	push	r6
    1322:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <sprintf>
		UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*40);
    1326:	40 e5       	ldi	r20, 0x50	; 80
    1328:	66 2d       	mov	r22, r6
    132a:	77 2d       	mov	r23, r7
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	prnt_bffr=export_print_buffer();
	clear_print_buffer();
	//memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 40);
	
	//Read CONFIG3:
	for(uint16_t i = 0; i < 26; i+=2)
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	89 0e       	add	r8, r25
    1338:	91 1c       	adc	r9, r1
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	2a e1       	ldi	r18, 0x1A	; 26
    1348:	82 16       	cp	r8, r18
    134a:	91 04       	cpc	r9, r1
    134c:	08 f4       	brcc	.+2      	; 0x1350 <read_sta013_config+0xda>
    134e:	b6 cf       	rjmp	.-148    	; 0x12bc <read_sta013_config+0x46>
		sprintf(prnt_bffr, "Received Value = %2x\n\r", val[0]);
		UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*40);
		//UART_transmit_string(UART1, val[0], 1);
	}
	return 0;
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	7f 90       	pop	r7
    136e:	6f 90       	pop	r6
    1370:	08 95       	ret

00001372 <GPIO_Input_Init>:

#include "gpio_input.h"

// Initializes GPIO Input by setting the bit's DDR value to 0 and adjusting the pull-up resistor.
void GPIO_Input_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask, uint8_t pull_up)
{
    1372:	fc 01       	movw	r30, r24
  //set ddrx bit to make port pin an Input
  // set or clear port pin to enable/disable pull-up 
  port_addr->DDR_REG &= ~(pin_mask);
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	86 2f       	mov	r24, r22
    1378:	80 95       	com	r24
    137a:	98 23       	and	r25, r24
    137c:	91 83       	std	Z+1, r25	; 0x01
  if (pull_up == ENABLE )
    137e:	41 30       	cpi	r20, 0x01	; 1
    1380:	21 f4       	brne	.+8      	; 0x138a <GPIO_Input_Init+0x18>
  {
    port_addr->PORT_REG |= (pin_mask);
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	68 2b       	or	r22, r24
    1386:	62 83       	std	Z+2, r22	; 0x02
    1388:	08 95       	ret
  } 
  else 
  {
    port_addr->PORT_REG &= ~(pin_mask);
    138a:	92 81       	ldd	r25, Z+2	; 0x02
    138c:	89 23       	and	r24, r25
    138e:	82 83       	std	Z+2, r24	; 0x02
    1390:	08 95       	ret

00001392 <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
    1392:	fc 01       	movw	r30, r24
    1394:	21 81       	ldd	r18, Z+1	; 0x01
    1396:	62 2b       	or	r22, r18
    1398:	61 83       	std	Z+1, r22	; 0x01
    139a:	08 95       	ret

0000139c <main>:


const char test_string[15] PROGMEM = "Hello World!\n\r";

int main(void)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <main+0x6>
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t error = 0;
	uint32_t i2c_freq = 50000; /* 100k */ 
	uint8_t array[3] = {0,0,0};
    13a8:	19 82       	std	Y+1, r1	; 0x01
    13aa:	1a 82       	std	Y+2, r1	; 0x02
    13ac:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t timer = 10;
	
	UART_init(UART1, 9600); /* baud = 9600 */ 
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	55 e2       	ldi	r21, 0x25	; 37
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	88 ec       	ldi	r24, 0xC8	; 200
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <UART_init>
	UART_transmit_string(UART1, "\nSTART\n", 7);
    13be:	47 e0       	ldi	r20, 0x07	; 7
    13c0:	67 e1       	ldi	r22, 0x17	; 23
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	88 ec       	ldi	r24, 0xC8	; 200
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	*
	* Step 1 - init
	*
	******************/

	error = TWI_master_init(TWI1_Base, i2c_freq); 
    13cc:	40 e5       	ldi	r20, 0x50	; 80
    13ce:	53 ec       	ldi	r21, 0xC3	; 195
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	88 ed       	ldi	r24, 0xD8	; 216
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <TWI_master_init>
	if (error != 0)
    13dc:	88 23       	and	r24, r24
    13de:	39 f0       	breq	.+14     	; 0x13ee <main+0x52>
	{
		UART_transmit_string(UART1, "twi_init_fail\n", 14);
    13e0:	4e e0       	ldi	r20, 0x0E	; 14
    13e2:	6f e1       	ldi	r22, 0x1F	; 31
    13e4:	71 e0       	ldi	r23, 0x01	; 1
    13e6:	88 ec       	ldi	r24, 0xC8	; 200
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>


const char test_string[15] PROGMEM = "Hello World!\n\r";

int main(void)
{
    13ee:	1a e0       	ldi	r17, 0x0A	; 10
	*
	******************/

	do 
	{
	 	error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 3, array);
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	6c 01       	movw	r12, r24
    13f6:	0f 2e       	mov	r0, r31
    13f8:	f3 e0       	ldi	r31, 0x03	; 3
    13fa:	ef 2e       	mov	r14, r31
    13fc:	f1 2c       	mov	r15, r1
    13fe:	f0 2d       	mov	r31, r0
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	63 e4       	ldi	r22, 0x43	; 67
    140a:	88 ed       	ldi	r24, 0xD8	; 216
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 af 0a 	call	0x155e	; 0x155e <TWI_master_receive>
	 	timer--;
    1412:	11 50       	subi	r17, 0x01	; 1
	} while ((error > 0) && (timer>0));
    1414:	88 23       	and	r24, r24
    1416:	11 f0       	breq	.+4      	; 0x141c <main+0x80>
    1418:	11 11       	cpse	r17, r1
    141a:	ea cf       	rjmp	.-44     	; 0x13f0 <main+0x54>
	printError(error);
    141c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printError>
	*
	* Step 3 - Debug
	*
	******************/
	
	error = initialize_sta013();
    1420:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <initialize_sta013>
	if (error != 0)
    1424:	88 23       	and	r24, r24
    1426:	39 f0       	breq	.+14     	; 0x1436 <main+0x9a>
	{
		UART_transmit_string(UART1, "sta_timeout\n", 12);
    1428:	4c e0       	ldi	r20, 0x0C	; 12
    142a:	6e e2       	ldi	r22, 0x2E	; 46
    142c:	71 e0       	ldi	r23, 0x01	; 1
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	23 ed       	ldi	r18, 0xD3	; 211
    143a:	80 e3       	ldi	r24, 0x30	; 48
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	20 40       	sbci	r18, 0x00	; 0
    1440:	80 40       	sbci	r24, 0x00	; 0
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0xa0>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <main+0xaa>
    1446:	00 00       	nop
	}
	
	_delay_ms(1000);
	
	UART_transmit_string(UART1, "\n3 Finished\n", 12);
    1448:	4c e0       	ldi	r20, 0x0C	; 12
    144a:	6b e3       	ldi	r22, 0x3B	; 59
    144c:	71 e0       	ldi	r23, 0x01	; 1
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	*
	* Step 4/5
	*
	************/
	
	sta_debug_test();
    1456:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <sta_debug_test>
	*
	* Step 6
	*
	************/

	write_sta013_config(TWI1_Base);
    145a:	88 ed       	ldi	r24, 0xD8	; 216
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 80 08 	call	0x1100	; 0x1100 <write_sta013_config>
	*
	* Step 7
	*
	************/
	
	read_sta013_config(TWI1_Base);
    1462:	88 ed       	ldi	r24, 0xD8	; 216
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 3b 09 	call	0x1276	; 0x1276 <read_sta013_config>

	
	UART_transmit_string(UART1, "\nEND\n", 5);
    146a:	45 e0       	ldi	r20, 0x05	; 5
    146c:	68 e4       	ldi	r22, 0x48	; 72
    146e:	71 e0       	ldi	r23, 0x01	; 1
    1470:	88 ec       	ldi	r24, 0xC8	; 200
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <main+0xdc>

0000147a <nackCond>:
#include "twi.h"

void nackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (0<<TWEA) | (1<<TWEN));
    147a:	24 e8       	ldi	r18, 0x84	; 132
    147c:	fc 01       	movw	r30, r24
    147e:	24 83       	std	Z+4, r18	; 0x04
    1480:	08 95       	ret

00001482 <fullStopCond>:
}

void fullStopCond(volatile TWI_t* TWI_addr)
{
    1482:	fc 01       	movw	r30, r24
	uint8_t status;
	uint8_t timeout = 200;
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    1484:	84 e9       	ldi	r24, 0x94	; 148
    1486:	84 83       	std	Z+4, r24	; 0x04
	do 
	{
		status = TWI_addr->TWCR;
    1488:	94 81       	ldd	r25, Z+4	; 0x04
		//timeout--;
	} while (((status& 0x10) != 0) && (timeout != 0));
    148a:	94 fd       	sbrc	r25, 4
    148c:	fd cf       	rjmp	.-6      	; 0x1488 <fullStopCond+0x6>
}
    148e:	08 95       	ret

00001490 <startCond>:

void startCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
    1490:	24 ea       	ldi	r18, 0xA4	; 164
    1492:	fc 01       	movw	r30, r24
    1494:	24 83       	std	Z+4, r18	; 0x04
    1496:	08 95       	ret

00001498 <ackCond>:
}

void ackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEA) | (1<<TWEN));	
    1498:	24 ec       	ldi	r18, 0xC4	; 196
    149a:	fc 01       	movw	r30, r24
    149c:	24 83       	std	Z+4, r18	; 0x04
    149e:	08 95       	ret

000014a0 <TWI_master_init>:
}
    
uint8_t TWI_master_init(volatile TWI_t *TWI_addr, uint32_t I2C_freq)
{
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	ec 01       	movw	r28, r24
    14ae:	9a 01       	movw	r18, r20
    14b0:	ab 01       	movw	r20, r22
    //TWI_ERROR_CODES error = TWI_OK; 
    uint8_t twps_val;
	uint32_t prescale;
	prescale = (F_CPU/OSC_DIV);
	prescale = prescale/I2C_freq;
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	74 e2       	ldi	r23, 0x24	; 36
    14b6:	84 ef       	ldi	r24, 0xF4	; 244
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__udivmodsi4>
	prescale = prescale - 16UL;
    14be:	69 01       	movw	r12, r18
    14c0:	7a 01       	movw	r14, r20
    14c2:	80 e1       	ldi	r24, 0x10	; 16
    14c4:	c8 1a       	sub	r12, r24
    14c6:	d1 08       	sbc	r13, r1
    14c8:	e1 08       	sbc	r14, r1
    14ca:	f1 08       	sbc	r15, r1
	prescale = prescale/(2UL*255);
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	2e ef       	ldi	r18, 0xFE	; 254
    14d2:	31 e0       	ldi	r19, 0x01	; 1
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__udivmodsi4>
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
    14dc:	21 15       	cp	r18, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	41 05       	cpc	r20, r1
    14e2:	51 05       	cpc	r21, r1
    14e4:	a9 f0       	breq	.+42     	; 0x1510 <TWI_master_init+0x70>
		prescale = 1;
        twps_val = 0x00;
    } else if (prescale < 4) {
    14e6:	24 30       	cpi	r18, 0x04	; 4
    14e8:	31 05       	cpc	r19, r1
    14ea:	41 05       	cpc	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	b0 f0       	brcs	.+44     	; 0x151c <TWI_master_init+0x7c>
		prescale = 4;
        twps_val = 0x01;
    } else if (prescale < 16) {
    14f0:	20 31       	cpi	r18, 0x10	; 16
    14f2:	31 05       	cpc	r19, r1
    14f4:	41 05       	cpc	r20, r1
    14f6:	51 05       	cpc	r21, r1
    14f8:	b8 f0       	brcs	.+46     	; 0x1528 <TWI_master_init+0x88>
		prescale = 16;
        twps_val = 0x02;
    } else if (prescale < 64) {
    14fa:	20 34       	cpi	r18, 0x40	; 64
    14fc:	31 05       	cpc	r19, r1
    14fe:	41 05       	cpc	r20, r1
    1500:	51 05       	cpc	r21, r1
    1502:	28 f5       	brcc	.+74     	; 0x154e <TWI_master_init+0xae>
		prescale = 64;
    1504:	40 e4       	ldi	r20, 0x40	; 64
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x03;
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	11 c0       	rjmp	.+34     	; 0x1532 <TWI_master_init+0x92>
	prescale = prescale/I2C_freq;
	prescale = prescale - 16UL;
	prescale = prescale/(2UL*255);
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
		prescale = 1;
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x00;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0b c0       	rjmp	.+22     	; 0x1532 <TWI_master_init+0x92>
    } else if (prescale < 4) {
		prescale = 4;
    151c:	44 e0       	ldi	r20, 0x04	; 4
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x01;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <TWI_master_init+0x92>
    } else if (prescale < 16) {
		prescale = 16;
    1528:	40 e1       	ldi	r20, 0x10	; 16
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x02;
    1530:	82 e0       	ldi	r24, 0x02	; 2
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWSR = twps_val;
    1532:	89 83       	std	Y+1, r24	; 0x01

    uint8_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
    1534:	9a 01       	movw	r18, r20
    1536:	ab 01       	movw	r20, r22
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	44 1f       	adc	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	c7 01       	movw	r24, r14
    1542:	b6 01       	movw	r22, r12
    1544:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__udivmodsi4>
    if (TWBR >= 256)
    {
        return TWI_ERROR_TWO; // fail
    }

    TWI_addr->TWBR = TWBR;
    1548:	28 83       	st	Y, r18
    
    return 0;
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <TWI_master_init+0xb0>
        twps_val = 0x02;
    } else if (prescale < 64) {
		prescale = 64;
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    154e:	81 e0       	ldi	r24, 0x01	; 1
    }

    TWI_addr->TWBR = TWBR;
    
    return 0;
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	08 95       	ret

0000155e <TWI_master_receive>:

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	ec 01       	movw	r28, r24
	uint8_t index;
	//internal address is optional and a bonus, along with int_addr_sz
	
	
	//send device address with a 1 in LSB (SLA+R). LSB being a 1 means read, see lecture
	send_value = (device_addr<<1) | 0x01;
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	16 2f       	mov	r17, r22
    1576:	11 60       	ori	r17, 0x01	; 1
	
	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
    1578:	0e 94 48 0a 	call	0x1490	; 0x1490 <startCond>
	//TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
	
	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
    157e:	88 23       	and	r24, r24
    1580:	ec f7       	brge	.-6      	; 0x157c <TWI_master_receive+0x1e>
	
	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	88 7f       	andi	r24, 0xF8	; 248
	
	//if start sent, then send SLA+R (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat)) //0x08 0x10
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	19 f0       	breq	.+6      	; 0x1590 <TWI_master_receive+0x32>
    158a:	80 31       	cpi	r24, 0x10	; 16
    158c:	09 f0       	breq	.+2      	; 0x1590 <TWI_master_receive+0x32>
    158e:	52 c0       	rjmp	.+164    	; 0x1634 <TWI_master_receive+0xd6>
	{
		TWI_addr->TWDR = send_value;
    1590:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    1592:	84 e8       	ldi	r24, 0x84	; 132
    1594:	8c 83       	std	Y+4, r24	; 0x04
	************/
	
	// Wait for TWINT to be set indicating transmission of SLA+R and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
    1598:	88 23       	and	r24, r24
    159a:	ec f7       	brge	.-6      	; 0x1596 <TWI_master_receive+0x38>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 7f       	andi	r24, 0xF8	; 248
	
	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(temp8 == TWSR_R_ACK_rcvd) //SLA+R sent, ACK received  0x40
    15a0:	80 34       	cpi	r24, 0x40	; 64
    15a2:	d9 f5       	brne	.+118    	; 0x161a <TWI_master_receive+0xbc>
	{
		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	e8 16       	cp	r14, r24
    15a8:	f1 04       	cpc	r15, r1
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <TWI_master_receive+0x58>
		{
			nackCond(TWI_addr);
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 3d 0a 	call	0x147a	; 0x147a <nackCond>
    
    return 0;
}

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	2a c0       	rjmp	.+84     	; 0x160a <TWI_master_receive+0xac>
			nackCond(TWI_addr);
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ackCond>
    15bc:	fa cf       	rjmp	.-12     	; 0x15b2 <TWI_master_receive+0x54>
		while((num_bytes != 0) && (1!=2)) //put error check here..
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
    15c0:	88 23       	and	r24, r24
    15c2:	ec f7       	brge	.-6      	; 0x15be <TWI_master_receive+0x60>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_R_ACK_rtrnd) //data byte received, ack sent back  0x50
    15c8:	80 35       	cpi	r24, 0x50	; 80
    15ca:	a9 f4       	brne	.+42     	; 0x15f6 <TWI_master_receive+0x98>
			{
				num_bytes--;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	e8 1a       	sub	r14, r24
    15d0:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    15d2:	f6 01       	movw	r30, r12
    15d4:	e1 0f       	add	r30, r17
    15d6:	f1 1d       	adc	r31, r1
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	80 83       	st	Z, r24
				index++;
    15dc:	1f 5f       	subi	r17, 0xFF	; 255
				if(num_bytes == 1)
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	e8 16       	cp	r14, r24
    15e2:	f1 04       	cpc	r15, r1
    15e4:	21 f4       	brne	.+8      	; 0x15ee <TWI_master_receive+0x90>
				{
					nackCond(TWI_addr);  //TWEA=0
    15e6:	ce 01       	movw	r24, r28
    15e8:	0e 94 3d 0a 	call	0x147a	; 0x147a <nackCond>
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <TWI_master_receive+0xac>
				}
				else
				{
					ackCond(TWI_addr); //TWEA=1
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ackCond>
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <TWI_master_receive+0xac>
				}
			}
			else if (temp8 == TWSR_R_NACK_rtrnd)
    15f6:	88 35       	cpi	r24, 0x58	; 88
    15f8:	41 f4       	brne	.+16     	; 0x160a <TWI_master_receive+0xac>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	e8 1a       	sub	r14, r24
    15fe:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	f6 01       	movw	r30, r12
    1604:	e1 0f       	add	r30, r17
    1606:	f1 1d       	adc	r31, r1
    1608:	80 83       	st	Z, r24
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = 0;
		while((num_bytes != 0) && (1!=2)) //put error check here..
    160a:	e1 14       	cp	r14, r1
    160c:	f1 04       	cpc	r15, r1
    160e:	b9 f6       	brne	.-82     	; 0x15be <TWI_master_receive+0x60>
				//fullStopCond(TWI_addr);
				
			}
			
		}
		fullStopCond(TWI_addr);
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	10 c0       	rjmp	.+32     	; 0x163a <TWI_master_receive+0xdc>
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		
		if (temp8 == TWSR_R_NACK_rcvd)
    161a:	88 34       	cpi	r24, 0x48	; 72
    161c:	29 f4       	brne	.+10     	; 0x1628 <TWI_master_receive+0xca>
		{
			fullStopCond(TWI_addr);
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
			return TWI_ERROR_NACK;
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	09 c0       	rjmp	.+18     	; 0x163a <TWI_master_receive+0xdc>
		}
		if (temp8 == TWSR_ARB)
    1628:	88 33       	cpi	r24, 0x38	; 56
    162a:	31 f4       	brne	.+12     	; 0x1638 <TWI_master_receive+0xda>
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    162c:	84 e8       	ldi	r24, 0x84	; 132
    162e:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	return 0;
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	03 c0       	rjmp	.+6      	; 0x163a <TWI_master_receive+0xdc>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
    1634:	84 e0       	ldi	r24, 0x04	; 4
    1636:	01 c0       	rjmp	.+2      	; 0x163a <TWI_master_receive+0xdc>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
    1638:	80 e0       	ldi	r24, 0x00	; 0
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	08 95       	ret

0000164a <TWI_master_transmit>:

uint8_t TWI_master_transmit(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	49 01       	movw	r8, r18
    1666:	5a 01       	movw	r10, r20
	uint8_t temp8;
	uint8_t send_value;
	uint8_t index;

	//send device address with a 0 in LSB (SLA+W). LSB being a 1 means write, see lecture
	send_value = (device_addr<<1);
    1668:	16 2f       	mov	r17, r22
    166a:	11 0f       	add	r17, r17

	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
    166c:	0e 94 48 0a 	call	0x1490	; 0x1490 <startCond>

	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
    1672:	88 23       	and	r24, r24
    1674:	ec f7       	brge	.-6      	; 0x1670 <TWI_master_transmit+0x26>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	88 7f       	andi	r24, 0xF8	; 248

	//if start sent, then send SLA+W (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat)) //0x08 0x10
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	19 f0       	breq	.+6      	; 0x1684 <TWI_master_transmit+0x3a>
    167e:	80 31       	cpi	r24, 0x10	; 16
    1680:	09 f0       	breq	.+2      	; 0x1684 <TWI_master_transmit+0x3a>
    1682:	8e c0       	rjmp	.+284    	; 0x17a0 <TWI_master_transmit+0x156>
	{
		TWI_addr->TWDR = send_value;
    1684:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    1686:	84 e8       	ldi	r24, 0x84	; 132
    1688:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Wait for TWINT to be set indicating transmission of SLA+W and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
    168c:	88 23       	and	r24, r24
    168e:	ec f7       	brge	.-6      	; 0x168a <TWI_master_transmit+0x40>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	18 2f       	mov	r17, r24
    1694:	18 7f       	andi	r17, 0xF8	; 248
	* INT ADDR
	*
	************/

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received 0x18
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	88 7f       	andi	r24, 0xF8	; 248
    169a:	88 31       	cpi	r24, 0x18	; 24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <TWI_master_transmit+0x56>
    169e:	79 c0       	rjmp	.+242    	; 0x1792 <TWI_master_transmit+0x148>
    16a0:	28 c0       	rjmp	.+80     	; 0x16f2 <TWI_master_transmit+0xa8>
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
		{
			//send byte(s), MSB first
			TWI_addr->TWDR = (int_addr >> (8 * (int_addr_sz - i - 1))) & 0xFF;
    16a2:	80 2f       	mov	r24, r16
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	82 1b       	sub	r24, r18
    16a8:	91 09       	sbc	r25, r1
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	b5 01       	movw	r22, r10
    16ba:	a4 01       	movw	r20, r8
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <TWI_master_transmit+0x7c>
    16be:	76 95       	lsr	r23
    16c0:	67 95       	ror	r22
    16c2:	57 95       	ror	r21
    16c4:	47 95       	ror	r20
    16c6:	8a 95       	dec	r24
    16c8:	d2 f7       	brpl	.-12     	; 0x16be <TWI_master_transmit+0x74>
    16ca:	4b 83       	std	Y+3, r20	; 0x03
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    16cc:	84 e8       	ldi	r24, 0x84	; 132
    16ce:	8c 83       	std	Y+4, r24	; 0x04

			//wait for TWINT
			do 
			{
				status = TWI_addr->TWCR;
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status & 0x80) == 0);
    16d2:	88 23       	and	r24, r24
    16d4:	ec f7       	brge	.-6      	; 0x16d0 <TWI_master_transmit+0x86>

			//receive ACK from slave 0x28
			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	88 7f       	andi	r24, 0xF8	; 248

			//receive ACK From slave -> break if NACK received
			if(temp8 == TWSR_W_NACK_rcvd_int)
    16da:	80 32       	cpi	r24, 0x20	; 32
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <TWI_master_transmit+0x9e>
			{
				fullStopCond(TWI_addr);
    16de:	ce 01       	movw	r24, r28
    16e0:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
				return TWI_ERROR_NACK;
    16e4:	85 e0       	ldi	r24, 0x05	; 5
    16e6:	63 c0       	rjmp	.+198    	; 0x17ae <TWI_master_transmit+0x164>
			}
			if(temp8 == TWSR_ARB)
    16e8:	88 33       	cpi	r24, 0x38	; 56
    16ea:	09 f4       	brne	.+2      	; 0x16ee <TWI_master_transmit+0xa4>
    16ec:	5b c0       	rjmp	.+182    	; 0x17a4 <TWI_master_transmit+0x15a>

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received 0x18
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <TWI_master_transmit+0xaa>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	20 17       	cp	r18, r16
    16f6:	a8 f2       	brcs	.-86     	; 0x16a2 <TWI_master_transmit+0x58>
		************/


		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 0)
    16f8:	e1 14       	cp	r14, r1
    16fa:	f1 04       	cpc	r15, r1
    16fc:	29 f4       	brne	.+10     	; 0x1708 <TWI_master_transmit+0xbe>
		{
			fullStopCond(TWI_addr);
    16fe:	ce 01       	movw	r24, r28
    1700:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
			return 0;
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	53 c0       	rjmp	.+166    	; 0x17ae <TWI_master_transmit+0x164>
		}
		if(num_bytes == 1)
    1708:	51 e0       	ldi	r21, 0x01	; 1
    170a:	e5 16       	cp	r14, r21
    170c:	f1 04       	cpc	r15, r1
    170e:	21 f4       	brne	.+8      	; 0x1718 <TWI_master_transmit+0xce>
		{
			ackCond(TWI_addr);
    1710:	ce 01       	movw	r24, r28
    1712:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ackCond>
    1716:	03 c0       	rjmp	.+6      	; 0x171e <TWI_master_transmit+0xd4>
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
    1718:	ce 01       	movw	r24, r28
    171a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ackCond>
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
    171e:	1f ef       	ldi	r17, 0xFF	; 255
    1720:	1e 0d       	add	r17, r14
		while((num_bytes != 0) && (1!=2)) //put error check here..
    1722:	2f c0       	rjmp	.+94     	; 0x1782 <TWI_master_transmit+0x138>
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
    1726:	88 23       	and	r24, r24
    1728:	ec f7       	brge	.-6      	; 0x1724 <TWI_master_transmit+0xda>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_W_ACK_rcvd_data) //data byte received, ack sent back
    172e:	88 32       	cpi	r24, 0x28	; 40
    1730:	a9 f4       	brne	.+42     	; 0x175c <TWI_master_transmit+0x112>
			{
				num_bytes--;
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	e6 1a       	sub	r14, r22
    1736:	f1 08       	sbc	r15, r1
				TWI_addr->TWDR = arr[index];
    1738:	f6 01       	movw	r30, r12
    173a:	e1 0f       	add	r30, r17
    173c:	f1 1d       	adc	r31, r1
    173e:	80 81       	ld	r24, Z
    1740:	8b 83       	std	Y+3, r24	; 0x03
				index--;
    1742:	11 50       	subi	r17, 0x01	; 1
				if(num_bytes == 0)
    1744:	e1 14       	cp	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	29 f4       	brne	.+10     	; 0x1754 <TWI_master_transmit+0x10a>
				{
					fullStopCond(TWI_addr);
    174a:	ce 01       	movw	r24, r28
    174c:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
					return 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	2d c0       	rjmp	.+90     	; 0x17ae <TWI_master_transmit+0x164>
					//nackCond(TWI_addr);
				}
				else
				{
					ackCond(TWI_addr);
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ackCond>
    175a:	13 c0       	rjmp	.+38     	; 0x1782 <TWI_master_transmit+0x138>
				}
			}
			else if (temp8 == TWSR_W_NACK_rcvd_data)
    175c:	80 33       	cpi	r24, 0x30	; 48
    175e:	79 f4       	brne	.+30     	; 0x177e <TWI_master_transmit+0x134>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
    1760:	71 e0       	ldi	r23, 0x01	; 1
    1762:	e7 1a       	sub	r14, r23
    1764:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	f6 01       	movw	r30, r12
    176a:	e1 0f       	add	r30, r17
    176c:	f1 1d       	adc	r31, r1
    176e:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
    1778:	84 fd       	sbrc	r24, 4
    177a:	fd cf       	rjmp	.-6      	; 0x1776 <TWI_master_transmit+0x12c>
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <TWI_master_transmit+0x138>
				
			}
			else if (temp8 == TWSR_ARB)
    177e:	88 33       	cpi	r24, 0x38	; 56
    1780:	99 f0       	breq	.+38     	; 0x17a8 <TWI_master_transmit+0x15e>
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
		while((num_bytes != 0) && (1!=2)) //put error check here..
    1782:	e1 14       	cp	r14, r1
    1784:	f1 04       	cpc	r15, r1
    1786:	71 f6       	brne	.-100    	; 0x1724 <TWI_master_transmit+0xda>
			{
				return TWI_ERROR;
			}
			
		}
		fullStopCond(TWI_addr);
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
		else
		{
			return TWI_ERROR;
		}
	}
	return 0;
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e c0       	rjmp	.+28     	; 0x17ae <TWI_master_transmit+0x164>
		}
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		fullStopCond(TWI_addr);
    1792:	ce 01       	movw	r24, r28
    1794:	0e 94 41 0a 	call	0x1482	; 0x1482 <fullStopCond>
		if (temp8 == TWSR_W_NACK_rcvd_int)
    1798:	10 32       	cpi	r17, 0x20	; 32
    179a:	41 f4       	brne	.+16     	; 0x17ac <TWI_master_transmit+0x162>
		{
			return TWI_ERROR_NACK;
    179c:	85 e0       	ldi	r24, 0x05	; 5
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <TWI_master_transmit+0x164>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <TWI_master_transmit+0x164>
				fullStopCond(TWI_addr);
				return TWI_ERROR_NACK;
			}
			if(temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <TWI_master_transmit+0x164>
				} while ((status&0x10) != 0);
				
			}
			else if (temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <TWI_master_transmit+0x164>
		{
			return TWI_ERROR_NACK;
		}
		else
		{
			return TWI_ERROR;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	08 95       	ret

000017c8 <initialize_sta013>:
#include "gpio_input.h"
#include <stdio.h>
#include "UART_Print.h" 

uint8_t initialize_sta013()
{
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <initialize_sta013+0x18>
    17e0:	1f 92       	push	r1
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	
	GPIO_output_init(PB, (1<<1));
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	83 e2       	ldi	r24, 0x23	; 35
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 c9 09 	call	0x1392	; 0x1392 <GPIO_output_init>
	GPIO_Input_Init(PC, (1<<6), (1<<6));
    17f0:	40 e4       	ldi	r20, 0x40	; 64
    17f2:	60 e4       	ldi	r22, 0x40	; 64
    17f4:	86 e2       	ldi	r24, 0x26	; 38
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_Input_Init>
	GPIO_output_init(PD, (1<<6)); 
    17fc:	60 e4       	ldi	r22, 0x40	; 64
    17fe:	89 e2       	ldi	r24, 0x29	; 41
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 c9 09 	call	0x1392	; 0x1392 <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    1806:	85 b1       	in	r24, 0x05	; 5
    1808:	8d 7f       	andi	r24, 0xFD	; 253
    180a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    180c:	00 c0       	rjmp	.+0      	; 0x180e <initialize_sta013+0x46>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    180e:	85 b1       	in	r24, 0x05	; 5
    1810:	82 60       	ori	r24, 0x02	; 2
    1812:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
    1814:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <export_print_buffer>
    1818:	98 2e       	mov	r9, r24
    181a:	19 2f       	mov	r17, r25
	clear_print_buffer();
    181c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <clear_print_buffer>
	//memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
	
	uint8_t array[3] = {0,0,0};
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
    1826:	0f 2e       	mov	r0, r31
    1828:	f4 e6       	ldi	r31, 0x64	; 100
    182a:	af 2e       	mov	r10, r31
    182c:	b1 2c       	mov	r11, r1
    182e:	f0 2d       	mov	r31, r0
	do 
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 3, array);
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	6c 01       	movw	r12, r24
    1836:	0f 2e       	mov	r0, r31
    1838:	f3 e0       	ldi	r31, 0x03	; 3
    183a:	ef 2e       	mov	r14, r31
    183c:	f1 2c       	mov	r15, r1
    183e:	f0 2d       	mov	r31, r0
    1840:	00 e0       	ldi	r16, 0x00	; 0
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	63 e4       	ldi	r22, 0x43	; 67
    184a:	88 ed       	ldi	r24, 0xD8	; 216
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 af 0a 	call	0x155e	; 0x155e <TWI_master_receive>
		timeout--;
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	a9 1a       	sub	r10, r25
    1856:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
    1858:	88 23       	and	r24, r24
    185a:	19 f0       	breq	.+6      	; 0x1862 <initialize_sta013+0x9a>
    185c:	a1 14       	cp	r10, r1
    185e:	b1 04       	cpc	r11, r1
    1860:	39 f7       	brne	.-50     	; 0x1830 <initialize_sta013+0x68>
	if(timeout == 0)
    1862:	ab 28       	or	r10, r11
    1864:	d1 f0       	breq	.+52     	; 0x189a <initialize_sta013+0xd2>
		
		
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[2]);
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	1f 92       	push	r1
    186a:	8f 93       	push	r24
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	1f 93       	push	r17
    1876:	9f 92       	push	r9
    1878:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
    187c:	40 ea       	ldi	r20, 0xA0	; 160
    187e:	69 2d       	mov	r22, r9
    1880:	71 2f       	mov	r23, r17
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	
	return 0;
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	01 c0       	rjmp	.+2      	; 0x189c <initialize_sta013+0xd4>
	if(timeout == 0)
	{
		
		
		
		return TWI_ERROR_TIMEOUT;
    189a:	83 e0       	ldi	r24, 0x03	; 3
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[2]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
	
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	9f 90       	pop	r9
    18b8:	08 95       	ret

000018ba <sta_debug_test>:

uint8_t sta_debug_test()
{
    18ba:	9f 92       	push	r9
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <sta_debug_test+0x18>
    18d2:	1f 92       	push	r1
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
    18d8:	62 e0       	ldi	r22, 0x02	; 2
    18da:	83 e2       	ldi	r24, 0x23	; 35
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 c9 09 	call	0x1392	; 0x1392 <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    18e2:	85 b1       	in	r24, 0x05	; 5
    18e4:	8d 7f       	andi	r24, 0xFD	; 253
    18e6:	85 b9       	out	0x05, r24	; 5
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <sta_debug_test+0x30>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    18ea:	85 b1       	in	r24, 0x05	; 5
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
    18f0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <export_print_buffer>
    18f4:	98 2e       	mov	r9, r24
    18f6:	19 2f       	mov	r17, r25
	clear_print_buffer();
    18f8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <clear_print_buffer>
	//memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
	
	uint8_t array[3] = {0,0,0};
    18fc:	19 82       	std	Y+1, r1	; 0x01
    18fe:	1a 82       	std	Y+2, r1	; 0x02
    1900:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
    1902:	0f 2e       	mov	r0, r31
    1904:	f4 e6       	ldi	r31, 0x64	; 100
    1906:	af 2e       	mov	r10, r31
    1908:	b1 2c       	mov	r11, r1
    190a:	f0 2d       	mov	r31, r0
	do
	{
		error = TWI_master_transmit(TWI1_Base, 0x43, 0x01, 1, 0, array);
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	6c 01       	movw	r12, r24
    1912:	e1 2c       	mov	r14, r1
    1914:	f1 2c       	mov	r15, r1
    1916:	01 e0       	ldi	r16, 0x01	; 1
    1918:	21 e0       	ldi	r18, 0x01	; 1
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	63 e4       	ldi	r22, 0x43	; 67
    1922:	88 ed       	ldi	r24, 0xD8	; 216
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 25 0b 	call	0x164a	; 0x164a <TWI_master_transmit>
		timeout--;
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	a9 1a       	sub	r10, r25
    192e:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0));
    1930:	88 23       	and	r24, r24
    1932:	49 f0       	breq	.+18     	; 0x1946 <sta_debug_test+0x8c>
    1934:	a1 14       	cp	r10, r1
    1936:	b1 04       	cpc	r11, r1
    1938:	49 f7       	brne	.-46     	; 0x190c <sta_debug_test+0x52>
    193a:	0f 2e       	mov	r0, r31
    193c:	f4 e6       	ldi	r31, 0x64	; 100
    193e:	af 2e       	mov	r10, r31
    1940:	b1 2c       	mov	r11, r1
    1942:	f0 2d       	mov	r31, r0
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <sta_debug_test+0x96>
    1946:	0f 2e       	mov	r0, r31
    1948:	f4 e6       	ldi	r31, 0x64	; 100
    194a:	af 2e       	mov	r10, r31
    194c:	b1 2c       	mov	r11, r1
    194e:	f0 2d       	mov	r31, r0

	timeout = 100;
	do
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 1, array);
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	6c 01       	movw	r12, r24
    1956:	ee 24       	eor	r14, r14
    1958:	e3 94       	inc	r14
    195a:	f1 2c       	mov	r15, r1
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	a9 01       	movw	r20, r18
    1964:	63 e4       	ldi	r22, 0x43	; 67
    1966:	88 ed       	ldi	r24, 0xD8	; 216
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 af 0a 	call	0x155e	; 0x155e <TWI_master_receive>
		timeout--;
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	a9 1a       	sub	r10, r25
    1972:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
    1974:	88 23       	and	r24, r24
    1976:	19 f0       	breq	.+6      	; 0x197e <sta_debug_test+0xc4>
    1978:	a1 14       	cp	r10, r1
    197a:	b1 04       	cpc	r11, r1
    197c:	49 f7       	brne	.-46     	; 0x1950 <sta_debug_test+0x96>
	
	if(timeout == 0)
    197e:	ab 28       	or	r10, r11
    1980:	d1 f0       	breq	.+52     	; 0x19b6 <sta_debug_test+0xfc>
	{
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	1f 92       	push	r1
    1986:	8f 93       	push	r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	9f 93       	push	r25
    198e:	8f 93       	push	r24
    1990:	1f 93       	push	r17
    1992:	9f 92       	push	r9
    1994:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
    1998:	40 ea       	ldi	r20, 0xA0	; 160
    199a:	69 2d       	mov	r22, r9
    199c:	71 2f       	mov	r23, r17
    199e:	88 ec       	ldi	r24, 0xC8	; 200
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
	
	return 0;
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <sta_debug_test+0xfe>
		timeout--;
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
	
	if(timeout == 0)
	{
		return TWI_ERROR_TIMEOUT;
    19b6:	83 e0       	ldi	r24, 0x03	; 3
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	08 95       	ret

000019d6 <printError>:

void printError(uint8_t err)
{
	switch(err)
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	e1 f0       	breq	.+56     	; 0x1a12 <printError+0x3c>
    19da:	28 f4       	brcc	.+10     	; 0x19e6 <printError+0x10>
    19dc:	88 23       	and	r24, r24
    19de:	49 f0       	breq	.+18     	; 0x19f2 <printError+0x1c>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	79 f0       	breq	.+30     	; 0x1a02 <printError+0x2c>
    19e4:	36 c0       	rjmp	.+108    	; 0x1a52 <printError+0x7c>
    19e6:	84 30       	cpi	r24, 0x04	; 4
    19e8:	21 f1       	breq	.+72     	; 0x1a32 <printError+0x5c>
    19ea:	d8 f0       	brcs	.+54     	; 0x1a22 <printError+0x4c>
    19ec:	85 30       	cpi	r24, 0x05	; 5
    19ee:	49 f1       	breq	.+82     	; 0x1a42 <printError+0x6c>
    19f0:	30 c0       	rjmp	.+96     	; 0x1a52 <printError+0x7c>
	{
		case 0:
			UART_transmit_string(UART1, "TWI_OK\n", 7);
    19f2:	47 e0       	ldi	r20, 0x07	; 7
    19f4:	6e e4       	ldi	r22, 0x4E	; 78
    19f6:	71 e0       	ldi	r23, 0x01	; 1
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a00:	08 95       	ret
		case 1:
			UART_transmit_string(UART1, "TWI_ERR\n", 8);
    1a02:	48 e0       	ldi	r20, 0x08	; 8
    1a04:	66 e5       	ldi	r22, 0x56	; 86
    1a06:	71 e0       	ldi	r23, 0x01	; 1
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a10:	08 95       	ret
		case 2:
			UART_transmit_string(UART1, "TWI_ERR_TWO\n", 12);
    1a12:	4c e0       	ldi	r20, 0x0C	; 12
    1a14:	6f e5       	ldi	r22, 0x5F	; 95
    1a16:	71 e0       	ldi	r23, 0x01	; 1
    1a18:	88 ec       	ldi	r24, 0xC8	; 200
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a20:	08 95       	ret
		case 3:
			UART_transmit_string(UART1, "TWI_ERR_TIME\n", 13);
    1a22:	4d e0       	ldi	r20, 0x0D	; 13
    1a24:	6c e6       	ldi	r22, 0x6C	; 108
    1a26:	71 e0       	ldi	r23, 0x01	; 1
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a30:	08 95       	ret
		case 4:
			UART_transmit_string(UART1, "TWI_ERR_BUS\n", 12);
    1a32:	4c e0       	ldi	r20, 0x0C	; 12
    1a34:	6a e7       	ldi	r22, 0x7A	; 122
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	88 ec       	ldi	r24, 0xC8	; 200
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a40:	08 95       	ret
		case 5:
			UART_transmit_string(UART1, "TWI_ERR_NACK\n", 13);
    1a42:	4d e0       	ldi	r20, 0x0D	; 13
    1a44:	67 e8       	ldi	r22, 0x87	; 135
    1a46:	71 e0       	ldi	r23, 0x01	; 1
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
			break;
    1a50:	08 95       	ret
		default:
			UART_transmit_string(UART1, "TWI_OTHER\n", 10);
    1a52:	4a e0       	ldi	r20, 0x0A	; 10
    1a54:	65 e9       	ldi	r22, 0x95	; 149
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	88 ec       	ldi	r24, 0xC8	; 200
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_transmit_string>
    1a60:	08 95       	ret

00001a62 <UART_init>:
*             Calculates and sets the baud rate reload register
*
*   Caution: Does not check the for valid input parameters
***************************************************************/
void UART_init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X_bit)*Baud_Rate))/(8UL*(2-U2X_bit)*Baud_Rate))-1);
    1a68:	db 01       	movw	r26, r22
    1a6a:	ca 01       	movw	r24, r20
    1a6c:	80 58       	subi	r24, 0x80	; 128
    1a6e:	9b 47       	sbci	r25, 0x7B	; 123
    1a70:	a1 4e       	sbci	r26, 0xE1	; 225
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	aa 1f       	adc	r26, r26
    1a82:	bb 1f       	adc	r27, r27
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	44 0f       	add	r20, r20
    1a8e:	55 1f       	adc	r21, r21
    1a90:	66 1f       	adc	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	44 0f       	add	r20, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	66 1f       	adc	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	9a 01       	movw	r18, r20
    1a9e:	ab 01       	movw	r20, r22
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	44 1f       	adc	r20, r20
    1aae:	55 1f       	adc	r21, r21
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__udivmodsi4>
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
    1abc:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
    1abe:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
    1ac0:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
    1ac2:	86 e0       	ldi	r24, 0x06	; 6
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
    1ac6:	88 e1       	ldi	r24, 0x18	; 24
    1ac8:	89 83       	std	Y+1, r24	; 0x01
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
    1ad0:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
    1ad6:	90 81       	ld	r25, Z
		timeout++;
    1ad8:	2f 5f       	subi	r18, 0xFF	; 255
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
    1adc:	95 fd       	sbrc	r25, 5
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <UART_transmit+0x16>
    1ae0:	21 15       	cp	r18, r1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	c1 f7       	brne	.-16     	; 0x1ad6 <UART_transmit+0x6>
	if(0==timeout)
    1ae6:	23 2b       	or	r18, r19
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
    1aea:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
    1af0:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
    1af2:	08 95       	ret

00001af4 <export_print_buffer>:
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
    1af4:	80 ea       	ldi	r24, 0xA0	; 160
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	08 95       	ret

00001afa <clear_print_buffer>:
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	06 c0       	rjmp	.+12     	; 0x1b0a <clear_print_buffer+0x10>
    1afe:	e8 2f       	mov	r30, r24
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	e0 56       	subi	r30, 0x60	; 96
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	10 82       	st	Z, r1
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 35       	cpi	r24, 0x50	; 80
    1b0c:	c0 f3       	brcs	.-16     	; 0x1afe <clear_print_buffer+0x4>
    1b0e:	08 95       	ret

00001b10 <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	7c 01       	movw	r14, r24
    1b1e:	8b 01       	movw	r16, r22
    1b20:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
    1b22:	41 11       	cpse	r20, r1
    1b24:	18 c0       	rjmp	.+48     	; 0x1b56 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
    1b26:	fb 01       	movw	r30, r22
    1b28:	60 81       	ld	r22, Z
                index=0;
    1b2a:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
    1b2e:	c7 01       	movw	r24, r14
    1b30:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <UART_transmit>
			index++;
    1b34:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
    1b36:	f8 01       	movw	r30, r16
    1b38:	ec 0f       	add	r30, r28
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
    1b3e:	61 11       	cpse	r22, r1
    1b40:	f6 cf       	rjmp	.-20     	; 0x1b2e <UART_transmit_string+0x1e>
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
    1b44:	f8 01       	movw	r30, r16
    1b46:	ec 0f       	add	r30, r28
    1b48:	f1 1d       	adc	r31, r1
    1b4a:	60 81       	ld	r22, Z
    1b4c:	c7 01       	movw	r24, r14
    1b4e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    1b52:	cf 5f       	subi	r28, 0xFF	; 255
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <UART_transmit_string+0x48>
    1b56:	c0 e0       	ldi	r28, 0x00	; 0
    1b58:	cd 17       	cp	r28, r29
    1b5a:	a0 f3       	brcs	.-24     	; 0x1b44 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	08 95       	ret

00001b6a <__udivmodsi4>:
    1b6a:	a1 e2       	ldi	r26, 0x21	; 33
    1b6c:	1a 2e       	mov	r1, r26
    1b6e:	aa 1b       	sub	r26, r26
    1b70:	bb 1b       	sub	r27, r27
    1b72:	fd 01       	movw	r30, r26
    1b74:	0d c0       	rjmp	.+26     	; 0x1b90 <__udivmodsi4_ep>

00001b76 <__udivmodsi4_loop>:
    1b76:	aa 1f       	adc	r26, r26
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	ee 1f       	adc	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	a2 17       	cp	r26, r18
    1b80:	b3 07       	cpc	r27, r19
    1b82:	e4 07       	cpc	r30, r20
    1b84:	f5 07       	cpc	r31, r21
    1b86:	20 f0       	brcs	.+8      	; 0x1b90 <__udivmodsi4_ep>
    1b88:	a2 1b       	sub	r26, r18
    1b8a:	b3 0b       	sbc	r27, r19
    1b8c:	e4 0b       	sbc	r30, r20
    1b8e:	f5 0b       	sbc	r31, r21

00001b90 <__udivmodsi4_ep>:
    1b90:	66 1f       	adc	r22, r22
    1b92:	77 1f       	adc	r23, r23
    1b94:	88 1f       	adc	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	1a 94       	dec	r1
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <__udivmodsi4_loop>
    1b9c:	60 95       	com	r22
    1b9e:	70 95       	com	r23
    1ba0:	80 95       	com	r24
    1ba2:	90 95       	com	r25
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	bd 01       	movw	r22, r26
    1baa:	cf 01       	movw	r24, r30
    1bac:	08 95       	ret

00001bae <sprintf>:
    1bae:	ae e0       	ldi	r26, 0x0E	; 14
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ed ed       	ldi	r30, 0xDD	; 221
    1bb4:	fd e0       	ldi	r31, 0x0D	; 13
    1bb6:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__prologue_saves__+0x1c>
    1bba:	0d 89       	ldd	r16, Y+21	; 0x15
    1bbc:	1e 89       	ldd	r17, Y+22	; 0x16
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	8c 83       	std	Y+4, r24	; 0x04
    1bc2:	1a 83       	std	Y+2, r17	; 0x02
    1bc4:	09 83       	std	Y+1, r16	; 0x01
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f e7       	ldi	r25, 0x7F	; 127
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	ae 01       	movw	r20, r28
    1bd0:	47 5e       	subi	r20, 0xE7	; 231
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	6f 89       	ldd	r22, Y+23	; 0x17
    1bd6:	78 8d       	ldd	r23, Y+24	; 0x18
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vfprintf>
    1be0:	ef 81       	ldd	r30, Y+7	; 0x07
    1be2:	f8 85       	ldd	r31, Y+8	; 0x08
    1be4:	e0 0f       	add	r30, r16
    1be6:	f1 1f       	adc	r31, r17
    1be8:	10 82       	st	Z, r1
    1bea:	2e 96       	adiw	r28, 0x0e	; 14
    1bec:	e4 e0       	ldi	r30, 0x04	; 4
    1bee:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__epilogue_restores__+0x1c>

00001bf2 <vfprintf>:
    1bf2:	ab e0       	ldi	r26, 0x0B	; 11
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ef ef       	ldi	r30, 0xFF	; 255
    1bf8:	fd e0       	ldi	r31, 0x0D	; 13
    1bfa:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__>
    1bfe:	6c 01       	movw	r12, r24
    1c00:	7b 01       	movw	r14, r22
    1c02:	8a 01       	movw	r16, r20
    1c04:	fc 01       	movw	r30, r24
    1c06:	17 82       	std	Z+7, r1	; 0x07
    1c08:	16 82       	std	Z+6, r1	; 0x06
    1c0a:	83 81       	ldd	r24, Z+3	; 0x03
    1c0c:	81 ff       	sbrs	r24, 1
    1c0e:	cc c1       	rjmp	.+920    	; 0x1fa8 <vfprintf+0x3b6>
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	3c 01       	movw	r6, r24
    1c16:	f6 01       	movw	r30, r12
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	93 fd       	sbrc	r25, 3
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	93 ff       	sbrs	r25, 3
    1c22:	81 91       	ld	r24, Z+
    1c24:	7f 01       	movw	r14, r30
    1c26:	88 23       	and	r24, r24
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <vfprintf+0x3a>
    1c2a:	ba c1       	rjmp	.+884    	; 0x1fa0 <vfprintf+0x3ae>
    1c2c:	85 32       	cpi	r24, 0x25	; 37
    1c2e:	39 f4       	brne	.+14     	; 0x1c3e <vfprintf+0x4c>
    1c30:	93 fd       	sbrc	r25, 3
    1c32:	85 91       	lpm	r24, Z+
    1c34:	93 ff       	sbrs	r25, 3
    1c36:	81 91       	ld	r24, Z+
    1c38:	7f 01       	movw	r14, r30
    1c3a:	85 32       	cpi	r24, 0x25	; 37
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <vfprintf+0x56>
    1c3e:	b6 01       	movw	r22, r12
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1c46:	e7 cf       	rjmp	.-50     	; 0x1c16 <vfprintf+0x24>
    1c48:	91 2c       	mov	r9, r1
    1c4a:	21 2c       	mov	r2, r1
    1c4c:	31 2c       	mov	r3, r1
    1c4e:	ff e1       	ldi	r31, 0x1F	; 31
    1c50:	f3 15       	cp	r31, r3
    1c52:	d8 f0       	brcs	.+54     	; 0x1c8a <vfprintf+0x98>
    1c54:	8b 32       	cpi	r24, 0x2B	; 43
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <vfprintf+0x84>
    1c58:	38 f4       	brcc	.+14     	; 0x1c68 <vfprintf+0x76>
    1c5a:	80 32       	cpi	r24, 0x20	; 32
    1c5c:	79 f0       	breq	.+30     	; 0x1c7c <vfprintf+0x8a>
    1c5e:	83 32       	cpi	r24, 0x23	; 35
    1c60:	a1 f4       	brne	.+40     	; 0x1c8a <vfprintf+0x98>
    1c62:	23 2d       	mov	r18, r3
    1c64:	20 61       	ori	r18, 0x10	; 16
    1c66:	1d c0       	rjmp	.+58     	; 0x1ca2 <vfprintf+0xb0>
    1c68:	8d 32       	cpi	r24, 0x2D	; 45
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <vfprintf+0x92>
    1c6c:	80 33       	cpi	r24, 0x30	; 48
    1c6e:	69 f4       	brne	.+26     	; 0x1c8a <vfprintf+0x98>
    1c70:	23 2d       	mov	r18, r3
    1c72:	21 60       	ori	r18, 0x01	; 1
    1c74:	16 c0       	rjmp	.+44     	; 0x1ca2 <vfprintf+0xb0>
    1c76:	83 2d       	mov	r24, r3
    1c78:	82 60       	ori	r24, 0x02	; 2
    1c7a:	38 2e       	mov	r3, r24
    1c7c:	e3 2d       	mov	r30, r3
    1c7e:	e4 60       	ori	r30, 0x04	; 4
    1c80:	3e 2e       	mov	r3, r30
    1c82:	2a c0       	rjmp	.+84     	; 0x1cd8 <vfprintf+0xe6>
    1c84:	f3 2d       	mov	r31, r3
    1c86:	f8 60       	ori	r31, 0x08	; 8
    1c88:	1d c0       	rjmp	.+58     	; 0x1cc4 <vfprintf+0xd2>
    1c8a:	37 fc       	sbrc	r3, 7
    1c8c:	2d c0       	rjmp	.+90     	; 0x1ce8 <vfprintf+0xf6>
    1c8e:	20 ed       	ldi	r18, 0xD0	; 208
    1c90:	28 0f       	add	r18, r24
    1c92:	2a 30       	cpi	r18, 0x0A	; 10
    1c94:	40 f0       	brcs	.+16     	; 0x1ca6 <vfprintf+0xb4>
    1c96:	8e 32       	cpi	r24, 0x2E	; 46
    1c98:	b9 f4       	brne	.+46     	; 0x1cc8 <vfprintf+0xd6>
    1c9a:	36 fc       	sbrc	r3, 6
    1c9c:	81 c1       	rjmp	.+770    	; 0x1fa0 <vfprintf+0x3ae>
    1c9e:	23 2d       	mov	r18, r3
    1ca0:	20 64       	ori	r18, 0x40	; 64
    1ca2:	32 2e       	mov	r3, r18
    1ca4:	19 c0       	rjmp	.+50     	; 0x1cd8 <vfprintf+0xe6>
    1ca6:	36 fe       	sbrs	r3, 6
    1ca8:	06 c0       	rjmp	.+12     	; 0x1cb6 <vfprintf+0xc4>
    1caa:	8a e0       	ldi	r24, 0x0A	; 10
    1cac:	98 9e       	mul	r9, r24
    1cae:	20 0d       	add	r18, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	92 2e       	mov	r9, r18
    1cb4:	11 c0       	rjmp	.+34     	; 0x1cd8 <vfprintf+0xe6>
    1cb6:	ea e0       	ldi	r30, 0x0A	; 10
    1cb8:	2e 9e       	mul	r2, r30
    1cba:	20 0d       	add	r18, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	22 2e       	mov	r2, r18
    1cc0:	f3 2d       	mov	r31, r3
    1cc2:	f0 62       	ori	r31, 0x20	; 32
    1cc4:	3f 2e       	mov	r3, r31
    1cc6:	08 c0       	rjmp	.+16     	; 0x1cd8 <vfprintf+0xe6>
    1cc8:	8c 36       	cpi	r24, 0x6C	; 108
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <vfprintf+0xe2>
    1ccc:	83 2d       	mov	r24, r3
    1cce:	80 68       	ori	r24, 0x80	; 128
    1cd0:	38 2e       	mov	r3, r24
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <vfprintf+0xe6>
    1cd4:	88 36       	cpi	r24, 0x68	; 104
    1cd6:	41 f4       	brne	.+16     	; 0x1ce8 <vfprintf+0xf6>
    1cd8:	f7 01       	movw	r30, r14
    1cda:	93 fd       	sbrc	r25, 3
    1cdc:	85 91       	lpm	r24, Z+
    1cde:	93 ff       	sbrs	r25, 3
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	7f 01       	movw	r14, r30
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	b3 cf       	rjmp	.-154    	; 0x1c4e <vfprintf+0x5c>
    1ce8:	98 2f       	mov	r25, r24
    1cea:	9f 7d       	andi	r25, 0xDF	; 223
    1cec:	95 54       	subi	r25, 0x45	; 69
    1cee:	93 30       	cpi	r25, 0x03	; 3
    1cf0:	28 f4       	brcc	.+10     	; 0x1cfc <vfprintf+0x10a>
    1cf2:	0c 5f       	subi	r16, 0xFC	; 252
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	9f e3       	ldi	r25, 0x3F	; 63
    1cf8:	99 83       	std	Y+1, r25	; 0x01
    1cfa:	0d c0       	rjmp	.+26     	; 0x1d16 <vfprintf+0x124>
    1cfc:	83 36       	cpi	r24, 0x63	; 99
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <vfprintf+0x11a>
    1d00:	83 37       	cpi	r24, 0x73	; 115
    1d02:	71 f0       	breq	.+28     	; 0x1d20 <vfprintf+0x12e>
    1d04:	83 35       	cpi	r24, 0x53	; 83
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <vfprintf+0x118>
    1d08:	59 c0       	rjmp	.+178    	; 0x1dbc <vfprintf+0x1ca>
    1d0a:	21 c0       	rjmp	.+66     	; 0x1d4e <vfprintf+0x15c>
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 81       	ld	r24, Z
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	0e 5f       	subi	r16, 0xFE	; 254
    1d14:	1f 4f       	sbci	r17, 0xFF	; 255
    1d16:	88 24       	eor	r8, r8
    1d18:	83 94       	inc	r8
    1d1a:	91 2c       	mov	r9, r1
    1d1c:	53 01       	movw	r10, r6
    1d1e:	13 c0       	rjmp	.+38     	; 0x1d46 <vfprintf+0x154>
    1d20:	28 01       	movw	r4, r16
    1d22:	f2 e0       	ldi	r31, 0x02	; 2
    1d24:	4f 0e       	add	r4, r31
    1d26:	51 1c       	adc	r5, r1
    1d28:	f8 01       	movw	r30, r16
    1d2a:	a0 80       	ld	r10, Z
    1d2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d2e:	36 fe       	sbrs	r3, 6
    1d30:	03 c0       	rjmp	.+6      	; 0x1d38 <vfprintf+0x146>
    1d32:	69 2d       	mov	r22, r9
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <vfprintf+0x14a>
    1d38:	6f ef       	ldi	r22, 0xFF	; 255
    1d3a:	7f ef       	ldi	r23, 0xFF	; 255
    1d3c:	c5 01       	movw	r24, r10
    1d3e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strnlen>
    1d42:	4c 01       	movw	r8, r24
    1d44:	82 01       	movw	r16, r4
    1d46:	f3 2d       	mov	r31, r3
    1d48:	ff 77       	andi	r31, 0x7F	; 127
    1d4a:	3f 2e       	mov	r3, r31
    1d4c:	16 c0       	rjmp	.+44     	; 0x1d7a <vfprintf+0x188>
    1d4e:	28 01       	movw	r4, r16
    1d50:	22 e0       	ldi	r18, 0x02	; 2
    1d52:	42 0e       	add	r4, r18
    1d54:	51 1c       	adc	r5, r1
    1d56:	f8 01       	movw	r30, r16
    1d58:	a0 80       	ld	r10, Z
    1d5a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d5c:	36 fe       	sbrs	r3, 6
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <vfprintf+0x174>
    1d60:	69 2d       	mov	r22, r9
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <vfprintf+0x178>
    1d66:	6f ef       	ldi	r22, 0xFF	; 255
    1d68:	7f ef       	ldi	r23, 0xFF	; 255
    1d6a:	c5 01       	movw	r24, r10
    1d6c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <strnlen_P>
    1d70:	4c 01       	movw	r8, r24
    1d72:	f3 2d       	mov	r31, r3
    1d74:	f0 68       	ori	r31, 0x80	; 128
    1d76:	3f 2e       	mov	r3, r31
    1d78:	82 01       	movw	r16, r4
    1d7a:	33 fc       	sbrc	r3, 3
    1d7c:	1b c0       	rjmp	.+54     	; 0x1db4 <vfprintf+0x1c2>
    1d7e:	82 2d       	mov	r24, r2
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	88 16       	cp	r8, r24
    1d84:	99 06       	cpc	r9, r25
    1d86:	b0 f4       	brcc	.+44     	; 0x1db4 <vfprintf+0x1c2>
    1d88:	b6 01       	movw	r22, r12
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1d92:	2a 94       	dec	r2
    1d94:	f4 cf       	rjmp	.-24     	; 0x1d7e <vfprintf+0x18c>
    1d96:	f5 01       	movw	r30, r10
    1d98:	37 fc       	sbrc	r3, 7
    1d9a:	85 91       	lpm	r24, Z+
    1d9c:	37 fe       	sbrs	r3, 7
    1d9e:	81 91       	ld	r24, Z+
    1da0:	5f 01       	movw	r10, r30
    1da2:	b6 01       	movw	r22, r12
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1daa:	21 10       	cpse	r2, r1
    1dac:	2a 94       	dec	r2
    1dae:	21 e0       	ldi	r18, 0x01	; 1
    1db0:	82 1a       	sub	r8, r18
    1db2:	91 08       	sbc	r9, r1
    1db4:	81 14       	cp	r8, r1
    1db6:	91 04       	cpc	r9, r1
    1db8:	71 f7       	brne	.-36     	; 0x1d96 <vfprintf+0x1a4>
    1dba:	e8 c0       	rjmp	.+464    	; 0x1f8c <vfprintf+0x39a>
    1dbc:	84 36       	cpi	r24, 0x64	; 100
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <vfprintf+0x1d2>
    1dc0:	89 36       	cpi	r24, 0x69	; 105
    1dc2:	41 f5       	brne	.+80     	; 0x1e14 <vfprintf+0x222>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	37 fe       	sbrs	r3, 7
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <vfprintf+0x1e6>
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	0c 5f       	subi	r16, 0xFC	; 252
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	08 c0       	rjmp	.+16     	; 0x1de8 <vfprintf+0x1f6>
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	07 2e       	mov	r0, r23
    1dde:	00 0c       	add	r0, r0
    1de0:	88 0b       	sbc	r24, r24
    1de2:	99 0b       	sbc	r25, r25
    1de4:	0e 5f       	subi	r16, 0xFE	; 254
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	f3 2d       	mov	r31, r3
    1dea:	ff 76       	andi	r31, 0x6F	; 111
    1dec:	3f 2e       	mov	r3, r31
    1dee:	97 ff       	sbrs	r25, 7
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <vfprintf+0x212>
    1df2:	90 95       	com	r25
    1df4:	80 95       	com	r24
    1df6:	70 95       	com	r23
    1df8:	61 95       	neg	r22
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	f0 68       	ori	r31, 0x80	; 128
    1e02:	3f 2e       	mov	r3, r31
    1e04:	2a e0       	ldi	r18, 0x0A	; 10
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	a3 01       	movw	r20, r6
    1e0a:	0e 94 2c 10 	call	0x2058	; 0x2058 <__ultoa_invert>
    1e0e:	88 2e       	mov	r8, r24
    1e10:	86 18       	sub	r8, r6
    1e12:	45 c0       	rjmp	.+138    	; 0x1e9e <vfprintf+0x2ac>
    1e14:	85 37       	cpi	r24, 0x75	; 117
    1e16:	31 f4       	brne	.+12     	; 0x1e24 <vfprintf+0x232>
    1e18:	23 2d       	mov	r18, r3
    1e1a:	2f 7e       	andi	r18, 0xEF	; 239
    1e1c:	b2 2e       	mov	r11, r18
    1e1e:	2a e0       	ldi	r18, 0x0A	; 10
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	25 c0       	rjmp	.+74     	; 0x1e6e <vfprintf+0x27c>
    1e24:	93 2d       	mov	r25, r3
    1e26:	99 7f       	andi	r25, 0xF9	; 249
    1e28:	b9 2e       	mov	r11, r25
    1e2a:	8f 36       	cpi	r24, 0x6F	; 111
    1e2c:	c1 f0       	breq	.+48     	; 0x1e5e <vfprintf+0x26c>
    1e2e:	18 f4       	brcc	.+6      	; 0x1e36 <vfprintf+0x244>
    1e30:	88 35       	cpi	r24, 0x58	; 88
    1e32:	79 f0       	breq	.+30     	; 0x1e52 <vfprintf+0x260>
    1e34:	b5 c0       	rjmp	.+362    	; 0x1fa0 <vfprintf+0x3ae>
    1e36:	80 37       	cpi	r24, 0x70	; 112
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <vfprintf+0x24e>
    1e3a:	88 37       	cpi	r24, 0x78	; 120
    1e3c:	21 f0       	breq	.+8      	; 0x1e46 <vfprintf+0x254>
    1e3e:	b0 c0       	rjmp	.+352    	; 0x1fa0 <vfprintf+0x3ae>
    1e40:	e9 2f       	mov	r30, r25
    1e42:	e0 61       	ori	r30, 0x10	; 16
    1e44:	be 2e       	mov	r11, r30
    1e46:	b4 fe       	sbrs	r11, 4
    1e48:	0d c0       	rjmp	.+26     	; 0x1e64 <vfprintf+0x272>
    1e4a:	fb 2d       	mov	r31, r11
    1e4c:	f4 60       	ori	r31, 0x04	; 4
    1e4e:	bf 2e       	mov	r11, r31
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <vfprintf+0x272>
    1e52:	34 fe       	sbrs	r3, 4
    1e54:	0a c0       	rjmp	.+20     	; 0x1e6a <vfprintf+0x278>
    1e56:	29 2f       	mov	r18, r25
    1e58:	26 60       	ori	r18, 0x06	; 6
    1e5a:	b2 2e       	mov	r11, r18
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x278>
    1e5e:	28 e0       	ldi	r18, 0x08	; 8
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <vfprintf+0x27c>
    1e64:	20 e1       	ldi	r18, 0x10	; 16
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <vfprintf+0x27c>
    1e6a:	20 e1       	ldi	r18, 0x10	; 16
    1e6c:	32 e0       	ldi	r19, 0x02	; 2
    1e6e:	f8 01       	movw	r30, r16
    1e70:	b7 fe       	sbrs	r11, 7
    1e72:	07 c0       	rjmp	.+14     	; 0x1e82 <vfprintf+0x290>
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	0c 5f       	subi	r16, 0xFC	; 252
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <vfprintf+0x29c>
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 5f       	subi	r16, 0xFE	; 254
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	a3 01       	movw	r20, r6
    1e90:	0e 94 2c 10 	call	0x2058	; 0x2058 <__ultoa_invert>
    1e94:	88 2e       	mov	r8, r24
    1e96:	86 18       	sub	r8, r6
    1e98:	fb 2d       	mov	r31, r11
    1e9a:	ff 77       	andi	r31, 0x7F	; 127
    1e9c:	3f 2e       	mov	r3, r31
    1e9e:	36 fe       	sbrs	r3, 6
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <vfprintf+0x2ca>
    1ea2:	23 2d       	mov	r18, r3
    1ea4:	2e 7f       	andi	r18, 0xFE	; 254
    1ea6:	a2 2e       	mov	r10, r18
    1ea8:	89 14       	cp	r8, r9
    1eaa:	58 f4       	brcc	.+22     	; 0x1ec2 <vfprintf+0x2d0>
    1eac:	34 fe       	sbrs	r3, 4
    1eae:	0b c0       	rjmp	.+22     	; 0x1ec6 <vfprintf+0x2d4>
    1eb0:	32 fc       	sbrc	r3, 2
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <vfprintf+0x2d4>
    1eb4:	83 2d       	mov	r24, r3
    1eb6:	8e 7e       	andi	r24, 0xEE	; 238
    1eb8:	a8 2e       	mov	r10, r24
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <vfprintf+0x2d4>
    1ebc:	b8 2c       	mov	r11, r8
    1ebe:	a3 2c       	mov	r10, r3
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <vfprintf+0x2d6>
    1ec2:	b8 2c       	mov	r11, r8
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <vfprintf+0x2d6>
    1ec6:	b9 2c       	mov	r11, r9
    1ec8:	a4 fe       	sbrs	r10, 4
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <vfprintf+0x2f8>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e8 0d       	add	r30, r8
    1ed0:	f1 1d       	adc	r31, r1
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 33       	cpi	r24, 0x30	; 48
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <vfprintf+0x2ee>
    1ed8:	9a 2d       	mov	r25, r10
    1eda:	99 7e       	andi	r25, 0xE9	; 233
    1edc:	a9 2e       	mov	r10, r25
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <vfprintf+0x300>
    1ee0:	a2 fe       	sbrs	r10, 2
    1ee2:	06 c0       	rjmp	.+12     	; 0x1ef0 <vfprintf+0x2fe>
    1ee4:	b3 94       	inc	r11
    1ee6:	b3 94       	inc	r11
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <vfprintf+0x300>
    1eea:	8a 2d       	mov	r24, r10
    1eec:	86 78       	andi	r24, 0x86	; 134
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <vfprintf+0x300>
    1ef0:	b3 94       	inc	r11
    1ef2:	a3 fc       	sbrc	r10, 3
    1ef4:	11 c0       	rjmp	.+34     	; 0x1f18 <vfprintf+0x326>
    1ef6:	a0 fe       	sbrs	r10, 0
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <vfprintf+0x314>
    1efa:	b2 14       	cp	r11, r2
    1efc:	88 f4       	brcc	.+34     	; 0x1f20 <vfprintf+0x32e>
    1efe:	28 0c       	add	r2, r8
    1f00:	92 2c       	mov	r9, r2
    1f02:	9b 18       	sub	r9, r11
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <vfprintf+0x330>
    1f06:	b2 14       	cp	r11, r2
    1f08:	60 f4       	brcc	.+24     	; 0x1f22 <vfprintf+0x330>
    1f0a:	b6 01       	movw	r22, r12
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f14:	b3 94       	inc	r11
    1f16:	f7 cf       	rjmp	.-18     	; 0x1f06 <vfprintf+0x314>
    1f18:	b2 14       	cp	r11, r2
    1f1a:	18 f4       	brcc	.+6      	; 0x1f22 <vfprintf+0x330>
    1f1c:	2b 18       	sub	r2, r11
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <vfprintf+0x332>
    1f20:	98 2c       	mov	r9, r8
    1f22:	21 2c       	mov	r2, r1
    1f24:	a4 fe       	sbrs	r10, 4
    1f26:	10 c0       	rjmp	.+32     	; 0x1f48 <vfprintf+0x356>
    1f28:	b6 01       	movw	r22, r12
    1f2a:	80 e3       	ldi	r24, 0x30	; 48
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f32:	a2 fe       	sbrs	r10, 2
    1f34:	17 c0       	rjmp	.+46     	; 0x1f64 <vfprintf+0x372>
    1f36:	a1 fc       	sbrc	r10, 1
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <vfprintf+0x34e>
    1f3a:	88 e7       	ldi	r24, 0x78	; 120
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <vfprintf+0x352>
    1f40:	88 e5       	ldi	r24, 0x58	; 88
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	b6 01       	movw	r22, r12
    1f46:	0c c0       	rjmp	.+24     	; 0x1f60 <vfprintf+0x36e>
    1f48:	8a 2d       	mov	r24, r10
    1f4a:	86 78       	andi	r24, 0x86	; 134
    1f4c:	59 f0       	breq	.+22     	; 0x1f64 <vfprintf+0x372>
    1f4e:	a1 fe       	sbrs	r10, 1
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <vfprintf+0x364>
    1f52:	8b e2       	ldi	r24, 0x2B	; 43
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <vfprintf+0x366>
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	a7 fc       	sbrc	r10, 7
    1f5a:	8d e2       	ldi	r24, 0x2D	; 45
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f64:	89 14       	cp	r8, r9
    1f66:	38 f4       	brcc	.+14     	; 0x1f76 <vfprintf+0x384>
    1f68:	b6 01       	movw	r22, r12
    1f6a:	80 e3       	ldi	r24, 0x30	; 48
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f72:	9a 94       	dec	r9
    1f74:	f7 cf       	rjmp	.-18     	; 0x1f64 <vfprintf+0x372>
    1f76:	8a 94       	dec	r8
    1f78:	f3 01       	movw	r30, r6
    1f7a:	e8 0d       	add	r30, r8
    1f7c:	f1 1d       	adc	r31, r1
    1f7e:	80 81       	ld	r24, Z
    1f80:	b6 01       	movw	r22, r12
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f88:	81 10       	cpse	r8, r1
    1f8a:	f5 cf       	rjmp	.-22     	; 0x1f76 <vfprintf+0x384>
    1f8c:	22 20       	and	r2, r2
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <vfprintf+0x3a0>
    1f90:	42 ce       	rjmp	.-892    	; 0x1c16 <vfprintf+0x24>
    1f92:	b6 01       	movw	r22, r12
    1f94:	80 e2       	ldi	r24, 0x20	; 32
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
    1f9c:	2a 94       	dec	r2
    1f9e:	f6 cf       	rjmp	.-20     	; 0x1f8c <vfprintf+0x39a>
    1fa0:	f6 01       	movw	r30, r12
    1fa2:	86 81       	ldd	r24, Z+6	; 0x06
    1fa4:	97 81       	ldd	r25, Z+7	; 0x07
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <vfprintf+0x3ba>
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	9f ef       	ldi	r25, 0xFF	; 255
    1fac:	2b 96       	adiw	r28, 0x0b	; 11
    1fae:	e2 e1       	ldi	r30, 0x12	; 18
    1fb0:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__>

00001fb4 <strnlen_P>:
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	05 90       	lpm	r0, Z+
    1fb8:	61 50       	subi	r22, 0x01	; 1
    1fba:	70 40       	sbci	r23, 0x00	; 0
    1fbc:	01 10       	cpse	r0, r1
    1fbe:	d8 f7       	brcc	.-10     	; 0x1fb6 <strnlen_P+0x2>
    1fc0:	80 95       	com	r24
    1fc2:	90 95       	com	r25
    1fc4:	8e 0f       	add	r24, r30
    1fc6:	9f 1f       	adc	r25, r31
    1fc8:	08 95       	ret

00001fca <strnlen>:
    1fca:	fc 01       	movw	r30, r24
    1fcc:	61 50       	subi	r22, 0x01	; 1
    1fce:	70 40       	sbci	r23, 0x00	; 0
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	01 10       	cpse	r0, r1
    1fd4:	d8 f7       	brcc	.-10     	; 0x1fcc <strnlen+0x2>
    1fd6:	80 95       	com	r24
    1fd8:	90 95       	com	r25
    1fda:	8e 0f       	add	r24, r30
    1fdc:	9f 1f       	adc	r25, r31
    1fde:	08 95       	ret

00001fe0 <fputc>:
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	fb 01       	movw	r30, r22
    1fea:	23 81       	ldd	r18, Z+3	; 0x03
    1fec:	21 fd       	sbrc	r18, 1
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <fputc+0x16>
    1ff0:	8f ef       	ldi	r24, 0xFF	; 255
    1ff2:	9f ef       	ldi	r25, 0xFF	; 255
    1ff4:	2c c0       	rjmp	.+88     	; 0x204e <fputc+0x6e>
    1ff6:	22 ff       	sbrs	r18, 2
    1ff8:	16 c0       	rjmp	.+44     	; 0x2026 <fputc+0x46>
    1ffa:	46 81       	ldd	r20, Z+6	; 0x06
    1ffc:	57 81       	ldd	r21, Z+7	; 0x07
    1ffe:	24 81       	ldd	r18, Z+4	; 0x04
    2000:	35 81       	ldd	r19, Z+5	; 0x05
    2002:	42 17       	cp	r20, r18
    2004:	53 07       	cpc	r21, r19
    2006:	44 f4       	brge	.+16     	; 0x2018 <fputc+0x38>
    2008:	a0 81       	ld	r26, Z
    200a:	b1 81       	ldd	r27, Z+1	; 0x01
    200c:	9d 01       	movw	r18, r26
    200e:	2f 5f       	subi	r18, 0xFF	; 255
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	31 83       	std	Z+1, r19	; 0x01
    2014:	20 83       	st	Z, r18
    2016:	8c 93       	st	X, r24
    2018:	26 81       	ldd	r18, Z+6	; 0x06
    201a:	37 81       	ldd	r19, Z+7	; 0x07
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	37 83       	std	Z+7, r19	; 0x07
    2022:	26 83       	std	Z+6, r18	; 0x06
    2024:	14 c0       	rjmp	.+40     	; 0x204e <fputc+0x6e>
    2026:	8b 01       	movw	r16, r22
    2028:	ec 01       	movw	r28, r24
    202a:	fb 01       	movw	r30, r22
    202c:	00 84       	ldd	r0, Z+8	; 0x08
    202e:	f1 85       	ldd	r31, Z+9	; 0x09
    2030:	e0 2d       	mov	r30, r0
    2032:	09 95       	icall
    2034:	89 2b       	or	r24, r25
    2036:	e1 f6       	brne	.-72     	; 0x1ff0 <fputc+0x10>
    2038:	d8 01       	movw	r26, r16
    203a:	16 96       	adiw	r26, 0x06	; 6
    203c:	8d 91       	ld	r24, X+
    203e:	9c 91       	ld	r25, X
    2040:	17 97       	sbiw	r26, 0x07	; 7
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	17 96       	adiw	r26, 0x07	; 7
    2046:	9c 93       	st	X, r25
    2048:	8e 93       	st	-X, r24
    204a:	16 97       	sbiw	r26, 0x06	; 6
    204c:	ce 01       	movw	r24, r28
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <__ultoa_invert>:
    2058:	fa 01       	movw	r30, r20
    205a:	aa 27       	eor	r26, r26
    205c:	28 30       	cpi	r18, 0x08	; 8
    205e:	51 f1       	breq	.+84     	; 0x20b4 <__ultoa_invert+0x5c>
    2060:	20 31       	cpi	r18, 0x10	; 16
    2062:	81 f1       	breq	.+96     	; 0x20c4 <__ultoa_invert+0x6c>
    2064:	e8 94       	clt
    2066:	6f 93       	push	r22
    2068:	6e 7f       	andi	r22, 0xFE	; 254
    206a:	6e 5f       	subi	r22, 0xFE	; 254
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	af 4f       	sbci	r26, 0xFF	; 255
    2074:	b1 e0       	ldi	r27, 0x01	; 1
    2076:	3e d0       	rcall	.+124    	; 0x20f4 <__ultoa_invert+0x9c>
    2078:	b4 e0       	ldi	r27, 0x04	; 4
    207a:	3c d0       	rcall	.+120    	; 0x20f4 <__ultoa_invert+0x9c>
    207c:	67 0f       	add	r22, r23
    207e:	78 1f       	adc	r23, r24
    2080:	89 1f       	adc	r24, r25
    2082:	9a 1f       	adc	r25, r26
    2084:	a1 1d       	adc	r26, r1
    2086:	68 0f       	add	r22, r24
    2088:	79 1f       	adc	r23, r25
    208a:	8a 1f       	adc	r24, r26
    208c:	91 1d       	adc	r25, r1
    208e:	a1 1d       	adc	r26, r1
    2090:	6a 0f       	add	r22, r26
    2092:	71 1d       	adc	r23, r1
    2094:	81 1d       	adc	r24, r1
    2096:	91 1d       	adc	r25, r1
    2098:	a1 1d       	adc	r26, r1
    209a:	20 d0       	rcall	.+64     	; 0x20dc <__ultoa_invert+0x84>
    209c:	09 f4       	brne	.+2      	; 0x20a0 <__ultoa_invert+0x48>
    209e:	68 94       	set
    20a0:	3f 91       	pop	r19
    20a2:	2a e0       	ldi	r18, 0x0A	; 10
    20a4:	26 9f       	mul	r18, r22
    20a6:	11 24       	eor	r1, r1
    20a8:	30 19       	sub	r19, r0
    20aa:	30 5d       	subi	r19, 0xD0	; 208
    20ac:	31 93       	st	Z+, r19
    20ae:	de f6       	brtc	.-74     	; 0x2066 <__ultoa_invert+0xe>
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret
    20b4:	46 2f       	mov	r20, r22
    20b6:	47 70       	andi	r20, 0x07	; 7
    20b8:	40 5d       	subi	r20, 0xD0	; 208
    20ba:	41 93       	st	Z+, r20
    20bc:	b3 e0       	ldi	r27, 0x03	; 3
    20be:	0f d0       	rcall	.+30     	; 0x20de <__ultoa_invert+0x86>
    20c0:	c9 f7       	brne	.-14     	; 0x20b4 <__ultoa_invert+0x5c>
    20c2:	f6 cf       	rjmp	.-20     	; 0x20b0 <__ultoa_invert+0x58>
    20c4:	46 2f       	mov	r20, r22
    20c6:	4f 70       	andi	r20, 0x0F	; 15
    20c8:	40 5d       	subi	r20, 0xD0	; 208
    20ca:	4a 33       	cpi	r20, 0x3A	; 58
    20cc:	18 f0       	brcs	.+6      	; 0x20d4 <__ultoa_invert+0x7c>
    20ce:	49 5d       	subi	r20, 0xD9	; 217
    20d0:	31 fd       	sbrc	r19, 1
    20d2:	40 52       	subi	r20, 0x20	; 32
    20d4:	41 93       	st	Z+, r20
    20d6:	02 d0       	rcall	.+4      	; 0x20dc <__ultoa_invert+0x84>
    20d8:	a9 f7       	brne	.-22     	; 0x20c4 <__ultoa_invert+0x6c>
    20da:	ea cf       	rjmp	.-44     	; 0x20b0 <__ultoa_invert+0x58>
    20dc:	b4 e0       	ldi	r27, 0x04	; 4
    20de:	a6 95       	lsr	r26
    20e0:	97 95       	ror	r25
    20e2:	87 95       	ror	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	ba 95       	dec	r27
    20ea:	c9 f7       	brne	.-14     	; 0x20de <__ultoa_invert+0x86>
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	61 05       	cpc	r22, r1
    20f0:	71 05       	cpc	r23, r1
    20f2:	08 95       	ret
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	0a 2e       	mov	r0, r26
    20fa:	06 94       	lsr	r0
    20fc:	57 95       	ror	r21
    20fe:	47 95       	ror	r20
    2100:	37 95       	ror	r19
    2102:	27 95       	ror	r18
    2104:	ba 95       	dec	r27
    2106:	c9 f7       	brne	.-14     	; 0x20fa <__ultoa_invert+0xa2>
    2108:	62 0f       	add	r22, r18
    210a:	73 1f       	adc	r23, r19
    210c:	84 1f       	adc	r24, r20
    210e:	95 1f       	adc	r25, r21
    2110:	a0 1d       	adc	r26, r0
    2112:	08 95       	ret

00002114 <__prologue_saves__>:
    2114:	2f 92       	push	r2
    2116:	3f 92       	push	r3
    2118:	4f 92       	push	r4
    211a:	5f 92       	push	r5
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	ca 1b       	sub	r28, r26
    213e:	db 0b       	sbc	r29, r27
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	09 94       	ijmp

0000214c <__epilogue_restores__>:
    214c:	2a 88       	ldd	r2, Y+18	; 0x12
    214e:	39 88       	ldd	r3, Y+17	; 0x11
    2150:	48 88       	ldd	r4, Y+16	; 0x10
    2152:	5f 84       	ldd	r5, Y+15	; 0x0f
    2154:	6e 84       	ldd	r6, Y+14	; 0x0e
    2156:	7d 84       	ldd	r7, Y+13	; 0x0d
    2158:	8c 84       	ldd	r8, Y+12	; 0x0c
    215a:	9b 84       	ldd	r9, Y+11	; 0x0b
    215c:	aa 84       	ldd	r10, Y+10	; 0x0a
    215e:	b9 84       	ldd	r11, Y+9	; 0x09
    2160:	c8 84       	ldd	r12, Y+8	; 0x08
    2162:	df 80       	ldd	r13, Y+7	; 0x07
    2164:	ee 80       	ldd	r14, Y+6	; 0x06
    2166:	fd 80       	ldd	r15, Y+5	; 0x05
    2168:	0c 81       	ldd	r16, Y+4	; 0x04
    216a:	1b 81       	ldd	r17, Y+3	; 0x03
    216c:	aa 81       	ldd	r26, Y+2	; 0x02
    216e:	b9 81       	ldd	r27, Y+1	; 0x01
    2170:	ce 0f       	add	r28, r30
    2172:	d1 1d       	adc	r29, r1
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	ed 01       	movw	r28, r26
    2180:	08 95       	ret

00002182 <_exit>:
    2182:	f8 94       	cli

00002184 <__stop_program>:
    2184:	ff cf       	rjmp	.-2      	; 0x2184 <__stop_program>
