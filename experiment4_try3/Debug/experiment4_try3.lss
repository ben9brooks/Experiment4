
experiment4_try3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800194  00800194  00000e30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021fd  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  000031f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea3  00000000  00000000  0000431b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  000051c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094a  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117d  00000000  00000000  00005dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e0       	ldi	r30, 0x08	; 8
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 39       	cpi	r26, 0x94	; 148
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e9       	ldi	r26, 0x94	; 148
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a4 3e       	cpi	r26, 0xE4	; 228
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 102:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <main>:
	uint32_t i2c_freq = 100000; /* 100k */ 
	uint8_t bkpt = 0;
	uint8_t array[3] = {0,0,0};
	uint8_t timer = 10;
	
	UART_init(UART1, 9600); /* baud = 9600 */ 
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	55 e2       	ldi	r21, 0x25	; 37
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	88 ec       	ldi	r24, 0xC8	; 200
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 fd 02 	call	0x5fa	; 0x5fa <UART_init>
	UART_transmit_string(UART1, "\nSTART\n", 7);
 124:	47 e0       	ldi	r20, 0x07	; 7
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	88 ec       	ldi	r24, 0xC8	; 200
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 49 03 	call	0x692	; 0x692 <UART_transmit_string>
	*
	* Step 1 - init
	*
	******************/

	error = TWI_master_init(TWI1_Base, i2c_freq); 
 132:	40 ea       	ldi	r20, 0xA0	; 160
 134:	56 e8       	ldi	r21, 0x86	; 134
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	88 ed       	ldi	r24, 0xD8	; 216
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TWI_master_init>
 142:	c8 2f       	mov	r28, r24
	if (error != 0)
 144:	88 23       	and	r24, r24
 146:	39 f0       	breq	.+14     	; 0x156 <main+0x42>
	{
		UART_transmit_string(UART1, "twi_init_fail\n", 14);
 148:	4e e0       	ldi	r20, 0x0E	; 14
 14a:	68 e0       	ldi	r22, 0x08	; 8
 14c:	71 e0       	ldi	r23, 0x01	; 1
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 49 03 	call	0x692	; 0x692 <UART_transmit_string>
	* Step 3 - Debug
	*
	******************/
	
	//error = initialize_sta013();
	if (error != 0)
 156:	cc 23       	and	r28, r28
 158:	39 f0       	breq	.+14     	; 0x168 <main+0x54>
	{
		UART_transmit_string(UART1, "sta_timeout\n", 12);
 15a:	4c e0       	ldi	r20, 0x0C	; 12
 15c:	67 e1       	ldi	r22, 0x17	; 23
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 49 03 	call	0x692	; 0x692 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x5a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x64>
 178:	00 00       	nop
	*
	* Step 4/5
	*
	************/
	
	step5();
 17a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <step5>




	
	UART_transmit_string(UART1, "\nEND\n", 5);
 17e:	45 e0       	ldi	r20, 0x05	; 5
 180:	64 e2       	ldi	r22, 0x24	; 36
 182:	71 e0       	ldi	r23, 0x01	; 1
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 49 03 	call	0x692	; 0x692 <UART_transmit_string>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x78>

0000018e <nackCond>:
#include "twi.h"

void nackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (0<<TWEA) | (1<<TWEN));
 18e:	24 e8       	ldi	r18, 0x84	; 132
 190:	fc 01       	movw	r30, r24
 192:	24 83       	std	Z+4, r18	; 0x04
 194:	08 95       	ret

00000196 <fullStopCond>:
}

void fullStopCond(volatile TWI_t* TWI_addr)
{
 196:	fc 01       	movw	r30, r24
	uint8_t status;
	uint8_t timeout = 200;
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
 198:	84 e9       	ldi	r24, 0x94	; 148
 19a:	84 83       	std	Z+4, r24	; 0x04
	do 
	{
		status = TWI_addr->TWCR;
 19c:	84 81       	ldd	r24, Z+4	; 0x04
		//timeout--;
	} while (((status& 0x80) == 0) && (timeout != 0));
 19e:	88 23       	and	r24, r24
 1a0:	ec f7       	brge	.-6      	; 0x19c <fullStopCond+0x6>
	
	do 
	{
		status = TWI_addr->TWCR;
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
		//timeout--;
	} while (((status& 0x10) != 0) && (timeout != 0));
 1a4:	84 fd       	sbrc	r24, 4
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <fullStopCond+0xc>
	
	
}
 1a8:	08 95       	ret

000001aa <startCond>:

void startCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
 1aa:	24 ea       	ldi	r18, 0xA4	; 164
 1ac:	fc 01       	movw	r30, r24
 1ae:	24 83       	std	Z+4, r18	; 0x04
 1b0:	08 95       	ret

000001b2 <ackCond>:
}

void ackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEA) | (1<<TWEN));	
 1b2:	24 ec       	ldi	r18, 0xC4	; 196
 1b4:	fc 01       	movw	r30, r24
 1b6:	24 83       	std	Z+4, r18	; 0x04
 1b8:	08 95       	ret

000001ba <TWI_master_init>:
}
    
uint8_t TWI_master_init(volatile TWI_t *TWI_addr, uint32_t I2C_freq)
{
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	9a 01       	movw	r18, r20
 1ca:	ab 01       	movw	r20, r22
    //TWI_ERROR_CODES error = TWI_OK; 
	uint32_t temp32 = I2C_freq;
    uint8_t twps_val;
	uint32_t prescale;
	prescale = (F_CPU/OSC_DIV);
	prescale = prescale/I2C_freq;
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	74 e2       	ldi	r23, 0x24	; 36
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
	prescale = prescale - 16UL;
 1d8:	69 01       	movw	r12, r18
 1da:	7a 01       	movw	r14, r20
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	c8 1a       	sub	r12, r24
 1e0:	d1 08       	sbc	r13, r1
 1e2:	e1 08       	sbc	r14, r1
 1e4:	f1 08       	sbc	r15, r1
	prescale = prescale/(2UL*255);
 1e6:	c7 01       	movw	r24, r14
 1e8:	b6 01       	movw	r22, r12
 1ea:	2e ef       	ldi	r18, 0xFE	; 254
 1ec:	31 e0       	ldi	r19, 0x01	; 1
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
 1f6:	21 15       	cp	r18, r1
 1f8:	31 05       	cpc	r19, r1
 1fa:	41 05       	cpc	r20, r1
 1fc:	51 05       	cpc	r21, r1
 1fe:	a9 f0       	breq	.+42     	; 0x22a <TWI_master_init+0x70>
		prescale = 1;
        twps_val = 0x00;
    } else if (prescale < 4) {
 200:	24 30       	cpi	r18, 0x04	; 4
 202:	31 05       	cpc	r19, r1
 204:	41 05       	cpc	r20, r1
 206:	51 05       	cpc	r21, r1
 208:	b0 f0       	brcs	.+44     	; 0x236 <TWI_master_init+0x7c>
		prescale = 4;
        twps_val = 0x01;
    } else if (prescale < 16) {
 20a:	20 31       	cpi	r18, 0x10	; 16
 20c:	31 05       	cpc	r19, r1
 20e:	41 05       	cpc	r20, r1
 210:	51 05       	cpc	r21, r1
 212:	b8 f0       	brcs	.+46     	; 0x242 <TWI_master_init+0x88>
		prescale = 16;
        twps_val = 0x02;
    } else if (prescale < 64) {
 214:	20 34       	cpi	r18, 0x40	; 64
 216:	31 05       	cpc	r19, r1
 218:	41 05       	cpc	r20, r1
 21a:	51 05       	cpc	r21, r1
 21c:	28 f5       	brcc	.+74     	; 0x268 <TWI_master_init+0xae>
		prescale = 64;
 21e:	40 e4       	ldi	r20, 0x40	; 64
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x03;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	11 c0       	rjmp	.+34     	; 0x24c <TWI_master_init+0x92>
	prescale = prescale/I2C_freq;
	prescale = prescale - 16UL;
	prescale = prescale/(2UL*255);
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
		prescale = 1;
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x00;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0b c0       	rjmp	.+22     	; 0x24c <TWI_master_init+0x92>
    } else if (prescale < 4) {
		prescale = 4;
 236:	44 e0       	ldi	r20, 0x04	; 4
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x01;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	05 c0       	rjmp	.+10     	; 0x24c <TWI_master_init+0x92>
    } else if (prescale < 16) {
		prescale = 16;
 242:	40 e1       	ldi	r20, 0x10	; 16
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x02;
 24a:	82 e0       	ldi	r24, 0x02	; 2
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWSR = twps_val;
 24c:	89 83       	std	Y+1, r24	; 0x01

    uint8_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
 24e:	9a 01       	movw	r18, r20
 250:	ab 01       	movw	r20, r22
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	44 1f       	adc	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
    if (TWBR >= 256)
    {
        return TWI_ERROR_TWO; // fail
    }

    TWI_addr->TWBR = TWBR;
 262:	28 83       	st	Y, r18
    
    return 0;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	01 c0       	rjmp	.+2      	; 0x26a <TWI_master_init+0xb0>
        twps_val = 0x02;
    } else if (prescale < 64) {
		prescale = 64;
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
 268:	81 e0       	ldi	r24, 0x01	; 1
    }

    TWI_addr->TWBR = TWBR;
    
    return 0;
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	08 95       	ret

00000278 <TWI_master_receive>:

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	uint8_t index;
	//internal address is optional and a bonus, along with int_addr_sz
	
	
	//send device address with a 1 in LSB (SLA+R). LSB being a 1 means read, see lecture
	send_value = (device_addr<<1) | 0x01;
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	16 2f       	mov	r17, r22
 290:	11 60       	ori	r17, 0x01	; 1
	
	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
 292:	0e 94 d5 00 	call	0x1aa	; 0x1aa <startCond>
	//TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
	
	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
 296:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
 298:	88 23       	and	r24, r24
 29a:	ec f7       	brge	.-6      	; 0x296 <TWI_master_receive+0x1e>
	
	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	88 7f       	andi	r24, 0xF8	; 248
	
	//if start sent, then send SLA+R (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat))
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	19 f0       	breq	.+6      	; 0x2aa <TWI_master_receive+0x32>
 2a4:	80 31       	cpi	r24, 0x10	; 16
 2a6:	09 f0       	breq	.+2      	; 0x2aa <TWI_master_receive+0x32>
 2a8:	55 c0       	rjmp	.+170    	; 0x354 <TWI_master_receive+0xdc>
	{
		TWI_addr->TWDR = send_value;
 2aa:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	8c 83       	std	Y+4, r24	; 0x04
	************/
	
	// Wait for TWINT to be set indicating transmission of SLA+R and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
 2b0:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
 2b2:	88 23       	and	r24, r24
 2b4:	ec f7       	brge	.-6      	; 0x2b0 <TWI_master_receive+0x38>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	88 7f       	andi	r24, 0xF8	; 248
	
	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(temp8 == TWSR_R_ACK_rcvd) //SLA+R sent, ACK received
 2ba:	80 34       	cpi	r24, 0x40	; 64
 2bc:	f1 f5       	brne	.+124    	; 0x33a <TWI_master_receive+0xc2>
	{
		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	e8 16       	cp	r14, r24
 2c2:	f1 04       	cpc	r15, r1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <TWI_master_receive+0x58>
		{
			nackCond(TWI_addr);
 2c6:	ce 01       	movw	r24, r28
 2c8:	0e 94 c7 00 	call	0x18e	; 0x18e <nackCond>
    
    return 0;
}

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	2d c0       	rjmp	.+90     	; 0x32a <TWI_master_receive+0xb2>
			nackCond(TWI_addr);
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ackCond>
 2d6:	fa cf       	rjmp	.-12     	; 0x2cc <TWI_master_receive+0x54>
		while((num_bytes != 0) && (1!=2)) //put error check here..
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
 2da:	88 23       	and	r24, r24
 2dc:	ec f7       	brge	.-6      	; 0x2d8 <TWI_master_receive+0x60>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_R_ACK_rtrnd) //data byte received, ack sent back
 2e2:	80 35       	cpi	r24, 0x50	; 80
 2e4:	a9 f4       	brne	.+42     	; 0x310 <TWI_master_receive+0x98>
			{
				num_bytes--;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	e8 1a       	sub	r14, r24
 2ea:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 2ec:	f6 01       	movw	r30, r12
 2ee:	e1 0f       	add	r30, r17
 2f0:	f1 1d       	adc	r31, r1
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	80 83       	st	Z, r24
				index++;
 2f6:	1f 5f       	subi	r17, 0xFF	; 255
				if(num_bytes == 1)
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	e8 16       	cp	r14, r24
 2fc:	f1 04       	cpc	r15, r1
 2fe:	21 f4       	brne	.+8      	; 0x308 <TWI_master_receive+0x90>
				{
					nackCond(TWI_addr);  //TWEA=0
 300:	ce 01       	movw	r24, r28
 302:	0e 94 c7 00 	call	0x18e	; 0x18e <nackCond>
 306:	11 c0       	rjmp	.+34     	; 0x32a <TWI_master_receive+0xb2>
				}
				else
				{
					ackCond(TWI_addr); //TWEA=1
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ackCond>
 30e:	0d c0       	rjmp	.+26     	; 0x32a <TWI_master_receive+0xb2>
				}
			}
			else if (temp8 == TWSR_R_NACK_rtrnd)
 310:	88 35       	cpi	r24, 0x58	; 88
 312:	59 f4       	brne	.+22     	; 0x32a <TWI_master_receive+0xb2>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	e8 1a       	sub	r14, r24
 318:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	f6 01       	movw	r30, r12
 31e:	e1 0f       	add	r30, r17
 320:	f1 1d       	adc	r31, r1
 322:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
 324:	ce 01       	movw	r24, r28
 326:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = 0;
		while((num_bytes != 0) && (1!=2)) //put error check here..
 32a:	e1 14       	cp	r14, r1
 32c:	f1 04       	cpc	r15, r1
 32e:	a1 f6       	brne	.-88     	; 0x2d8 <TWI_master_receive+0x60>
				fullStopCond(TWI_addr);
				
			}
			
		}
		fullStopCond(TWI_addr);
 330:	ce 01       	movw	r24, r28
 332:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	10 c0       	rjmp	.+32     	; 0x35a <TWI_master_receive+0xe2>
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		
		if (temp8 == TWSR_R_NACK_rcvd)
 33a:	88 34       	cpi	r24, 0x48	; 72
 33c:	29 f4       	brne	.+10     	; 0x348 <TWI_master_receive+0xd0>
		{
			fullStopCond(TWI_addr);
 33e:	ce 01       	movw	r24, r28
 340:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
			return TWI_ERROR_NACK;
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	09 c0       	rjmp	.+18     	; 0x35a <TWI_master_receive+0xe2>
		}
		if (temp8 == TWSR_ARB)
 348:	88 33       	cpi	r24, 0x38	; 56
 34a:	31 f4       	brne	.+12     	; 0x358 <TWI_master_receive+0xe0>
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 34c:	84 e8       	ldi	r24, 0x84	; 132
 34e:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	return 0;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <TWI_master_receive+0xe2>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	01 c0       	rjmp	.+2      	; 0x35a <TWI_master_receive+0xe2>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
 358:	80 e0       	ldi	r24, 0x00	; 0
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	08 95       	ret

0000036a <TWI_master_transmit>:

uint8_t TWI_master_transmit(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
 384:	49 01       	movw	r8, r18
 386:	5a 01       	movw	r10, r20
	uint8_t temp8;
	uint8_t send_value;
	uint8_t index;

	//send device address with a 0 in LSB (SLA+W). LSB being a 1 means write, see lecture
	send_value = (device_addr<<1);
 388:	16 2f       	mov	r17, r22
 38a:	11 0f       	add	r17, r17

	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
 38c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <startCond>

	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
 390:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
 392:	88 23       	and	r24, r24
 394:	ec f7       	brge	.-6      	; 0x390 <TWI_master_transmit+0x26>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	88 7f       	andi	r24, 0xF8	; 248

	//if start sent, then send SLA+W (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat))
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	19 f0       	breq	.+6      	; 0x3a4 <TWI_master_transmit+0x3a>
 39e:	80 31       	cpi	r24, 0x10	; 16
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <TWI_master_transmit+0x3a>
 3a2:	83 c0       	rjmp	.+262    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		TWI_addr->TWDR = send_value;
 3a4:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Wait for TWINT to be set indicating transmission of SLA+W and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
 3ac:	88 23       	and	r24, r24
 3ae:	ec f7       	brge	.-6      	; 0x3aa <TWI_master_transmit+0x40>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	98 2f       	mov	r25, r24
 3b4:	98 7f       	andi	r25, 0xF8	; 248
	* INT ADDR
	*
	************/

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	88 7f       	andi	r24, 0xF8	; 248
 3ba:	88 31       	cpi	r24, 0x18	; 24
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <TWI_master_transmit+0x56>
 3be:	71 c0       	rjmp	.+226    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3c0:	28 c0       	rjmp	.+80     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
		{
			//send byte(s), MSB first
			TWI_addr->TWDR = (int_addr >> (8 * (int_addr_sz - i - 1))) & 0xFF;
 3c2:	80 2f       	mov	r24, r16
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	82 1b       	sub	r24, r18
 3c8:	91 09       	sbc	r25, r1
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	b5 01       	movw	r22, r10
 3da:	a4 01       	movw	r20, r8
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <TWI_master_transmit+0x7c>
 3de:	76 95       	lsr	r23
 3e0:	67 95       	ror	r22
 3e2:	57 95       	ror	r21
 3e4:	47 95       	ror	r20
 3e6:	8a 95       	dec	r24
 3e8:	d2 f7       	brpl	.-12     	; 0x3de <TWI_master_transmit+0x74>
 3ea:	4b 83       	std	Y+3, r20	; 0x03
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
 3ec:	84 e8       	ldi	r24, 0x84	; 132
 3ee:	8c 83       	std	Y+4, r24	; 0x04

			//wait for TWINT
			do 
			{
				status = TWI_addr->TWCR;
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status & 0x80) == 0);
 3f2:	88 23       	and	r24, r24
 3f4:	ec f7       	brge	.-6      	; 0x3f0 <TWI_master_transmit+0x86>

			//receive ACK from slave
			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 7f       	andi	r24, 0xF8	; 248

			//receive ACK From slave -> break if NACK received
			if(temp8 == TWSR_W_NACK_rcvd_int)
 3fa:	80 32       	cpi	r24, 0x20	; 32
 3fc:	29 f4       	brne	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			{
				fullStopCond(TWI_addr);
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
				return TWI_ERROR_NACK;
 404:	85 e0       	ldi	r24, 0x05	; 5
 406:	58 c0       	rjmp	.+176    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			}
			if(temp8 == TWSR_ARB)
 408:	88 33       	cpi	r24, 0x38	; 56
 40a:	09 f4       	brne	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	50 c0       	rjmp	.+160    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	01 c0       	rjmp	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	20 17       	cp	r18, r16
 416:	a8 f2       	brcs	.-86     	; 0x3c2 <TWI_master_transmit+0x58>
		************/


		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
 418:	51 e0       	ldi	r21, 0x01	; 1
 41a:	e5 16       	cp	r14, r21
 41c:	f1 04       	cpc	r15, r1
 41e:	21 f4       	brne	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		{
			nackCond(TWI_addr);
 420:	ce 01       	movw	r24, r28
 422:	0e 94 c7 00 	call	0x18e	; 0x18e <nackCond>
 426:	03 c0       	rjmp	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ackCond>
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
 42e:	1f ef       	ldi	r17, 0xFF	; 255
 430:	1e 0d       	add	r17, r14
		while((num_bytes != 0) && (1!=2)) //put error check here..
 432:	2f c0       	rjmp	.+94     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
 434:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
 436:	88 23       	and	r24, r24
 438:	ec f7       	brge	.-6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_W_ACK_rcvd_data) //data byte received, ack sent back
 43e:	88 32       	cpi	r24, 0x28	; 40
 440:	a9 f4       	brne	.+42     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			{
				num_bytes--;
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	e6 1a       	sub	r14, r22
 446:	f1 08       	sbc	r15, r1
				TWI_addr->TWDR = arr[index];
 448:	f6 01       	movw	r30, r12
 44a:	e1 0f       	add	r30, r17
 44c:	f1 1d       	adc	r31, r1
 44e:	80 81       	ld	r24, Z
 450:	8b 83       	std	Y+3, r24	; 0x03
				index--;
 452:	11 50       	subi	r17, 0x01	; 1
				if(num_bytes == 1)
 454:	71 e0       	ldi	r23, 0x01	; 1
 456:	e7 16       	cp	r14, r23
 458:	f1 04       	cpc	r15, r1
 45a:	21 f4       	brne	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				{
					nackCond(TWI_addr);
 45c:	ce 01       	movw	r24, r28
 45e:	0e 94 c7 00 	call	0x18e	; 0x18e <nackCond>
 462:	17 c0       	rjmp	.+46     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				}
				else
				{
					ackCond(TWI_addr);
 464:	ce 01       	movw	r24, r28
 466:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ackCond>
 46a:	13 c0       	rjmp	.+38     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				}
			}
			else if (temp8 == TWSR_W_NACK_rcvd_data)
 46c:	80 33       	cpi	r24, 0x30	; 48
 46e:	79 f4       	brne	.+30     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	e8 1a       	sub	r14, r24
 474:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	f6 01       	movw	r30, r12
 47a:	e1 0f       	add	r30, r17
 47c:	f1 1d       	adc	r31, r1
 47e:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
 480:	ce 01       	movw	r24, r28
 482:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
 486:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
 488:	84 fd       	sbrc	r24, 4
 48a:	fd cf       	rjmp	.-6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				
			}
			else if (temp8 == TWSR_ARB)
 48e:	88 33       	cpi	r24, 0x38	; 56
 490:	81 f0       	breq	.+32     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
		while((num_bytes != 0) && (1!=2)) //put error check here..
 492:	e1 14       	cp	r14, r1
 494:	f1 04       	cpc	r15, r1
 496:	71 f6       	brne	.-100    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				return TWI_ERROR;
			}
			
		}
		fullStopCond(TWI_addr);
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 cb 00 	call	0x196	; 0x196 <fullStopCond>
		else
		{
			return TWI_ERROR;
		}
	}
	return 0;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		}
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		if (temp8 == TWSR_W_NACK_rcvd_int)
 4a2:	90 32       	cpi	r25, 0x20	; 32
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			return TWI_ERROR_NACK;
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
				fullStopCond(TWI_addr);
				return TWI_ERROR_NACK;
			}
			if(temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
				} while ((status&0x10) != 0);
				
			}
			else if (temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			return TWI_ERROR_NACK;
		}
		else
		{
			return TWI_ERROR;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	df 90       	pop	r13
 4c6:	cf 90       	pop	r12
 4c8:	bf 90       	pop	r11
 4ca:	af 90       	pop	r10
 4cc:	9f 90       	pop	r9
 4ce:	8f 90       	pop	r8
 4d0:	08 95       	ret

000004d2 <step5>:
	return 0;
	
}

uint8_t step5()
{
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <step5+0x18>
 4ea:	1f 92       	push	r1
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	83 e2       	ldi	r24, 0x23	; 35
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 4fa:	85 b1       	in	r24, 0x05	; 5
 4fc:	8d 7f       	andi	r24, 0xFD	; 253
 4fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	00 c0       	rjmp	.+0      	; 0x502 <step5+0x30>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 502:	85 b1       	in	r24, 0x05	; 5
 504:	82 60       	ori	r24, 0x02	; 2
 506:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
 508:	0e 94 46 03 	call	0x68c	; 0x68c <export_print_buffer>
 50c:	98 2e       	mov	r9, r24
 50e:	19 2f       	mov	r17, r25
	memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
 510:	e8 2f       	mov	r30, r24
 512:	f9 2f       	mov	r31, r25
 514:	80 e5       	ldi	r24, 0x50	; 80
 516:	df 01       	movw	r26, r30
 518:	1d 92       	st	X+, r1
 51a:	8a 95       	dec	r24
 51c:	e9 f7       	brne	.-6      	; 0x518 <step5+0x46>
	
	uint8_t array[3] = {0,0,0};
 51e:	19 82       	std	Y+1, r1	; 0x01
 520:	1a 82       	std	Y+2, r1	; 0x02
 522:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
 524:	0f 2e       	mov	r0, r31
 526:	f4 e6       	ldi	r31, 0x64	; 100
 528:	af 2e       	mov	r10, r31
 52a:	b1 2c       	mov	r11, r1
 52c:	f0 2d       	mov	r31, r0
	do
	{
		error = TWI_master_transmit(TWI1_Base, 0x43, 0x01, 1, 0, array);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	6c 01       	movw	r12, r24
 534:	e1 2c       	mov	r14, r1
 536:	f1 2c       	mov	r15, r1
 538:	01 e0       	ldi	r16, 0x01	; 1
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	63 e4       	ldi	r22, 0x43	; 67
 544:	88 ed       	ldi	r24, 0xD8	; 216
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 b5 01 	call	0x36a	; 0x36a <TWI_master_transmit>
		timeout--;
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	a9 1a       	sub	r10, r25
 550:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0));
 552:	88 23       	and	r24, r24
 554:	49 f0       	breq	.+18     	; 0x568 <step5+0x96>
 556:	a1 14       	cp	r10, r1
 558:	b1 04       	cpc	r11, r1
 55a:	49 f7       	brne	.-46     	; 0x52e <step5+0x5c>
 55c:	0f 2e       	mov	r0, r31
 55e:	f4 e6       	ldi	r31, 0x64	; 100
 560:	af 2e       	mov	r10, r31
 562:	b1 2c       	mov	r11, r1
 564:	f0 2d       	mov	r31, r0
 566:	05 c0       	rjmp	.+10     	; 0x572 <step5+0xa0>
 568:	0f 2e       	mov	r0, r31
 56a:	f4 e6       	ldi	r31, 0x64	; 100
 56c:	af 2e       	mov	r10, r31
 56e:	b1 2c       	mov	r11, r1
 570:	f0 2d       	mov	r31, r0

	timeout = 100;
	do
	{
		error = TWI_master_receive(TWI1_Base, 0x43, 0, 0, 1, array);
 572:	de 01       	movw	r26, r28
 574:	11 96       	adiw	r26, 0x01	; 1
 576:	6d 01       	movw	r12, r26
 578:	ee 24       	eor	r14, r14
 57a:	e3 94       	inc	r14
 57c:	f1 2c       	mov	r15, r1
 57e:	00 e0       	ldi	r16, 0x00	; 0
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	a9 01       	movw	r20, r18
 586:	63 e4       	ldi	r22, 0x43	; 67
 588:	88 ed       	ldi	r24, 0xD8	; 216
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_master_receive>
		timeout--;
 590:	b1 e0       	ldi	r27, 0x01	; 1
 592:	ab 1a       	sub	r10, r27
 594:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
 596:	88 23       	and	r24, r24
 598:	19 f0       	breq	.+6      	; 0x5a0 <step5+0xce>
 59a:	a1 14       	cp	r10, r1
 59c:	b1 04       	cpc	r11, r1
 59e:	49 f7       	brne	.-46     	; 0x572 <step5+0xa0>
	
	if(timeout == 0)
 5a0:	ab 28       	or	r10, r11
 5a2:	d9 f0       	breq	.+54     	; 0x5da <step5+0x108>
	{
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	1f 92       	push	r1
 5a8:	8f 93       	push	r24
 5aa:	8a e2       	ldi	r24, 0x2A	; 42
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	9f 93       	push	r25
 5b0:	8f 93       	push	r24
 5b2:	1f 93       	push	r17
 5b4:	9f 92       	push	r9
 5b6:	0e 94 98 03 	call	0x730	; 0x730 <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
 5ba:	40 ea       	ldi	r20, 0xA0	; 160
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	69 2d       	mov	r22, r9
 5c0:	71 2f       	mov	r23, r17
 5c2:	88 ec       	ldi	r24, 0xC8	; 200
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 49 03 	call	0x692	; 0x692 <UART_transmit_string>
	
	return 0;
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <step5+0x10a>
		timeout--;
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
	
	if(timeout == 0)
	{
		return TWI_ERROR_TIMEOUT;
 5da:	83 e0       	ldi	r24, 0x03	; 3
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
}
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	bf 90       	pop	r11
 5f4:	af 90       	pop	r10
 5f6:	9f 90       	pop	r9
 5f8:	08 95       	ret

000005fa <UART_init>:
*             Calculates and sets the baud rate reload register
*
*   Caution: Does not check the for valid input parameters
***************************************************************/
void UART_init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X_bit)*Baud_Rate))/(8UL*(2-U2X_bit)*Baud_Rate))-1);
 600:	db 01       	movw	r26, r22
 602:	ca 01       	movw	r24, r20
 604:	80 58       	subi	r24, 0x80	; 128
 606:	9b 47       	sbci	r25, 0x7B	; 123
 608:	a1 4e       	sbci	r26, 0xE1	; 225
 60a:	bf 4f       	sbci	r27, 0xFF	; 255
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	aa 1f       	adc	r26, r26
 612:	bb 1f       	adc	r27, r27
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	aa 1f       	adc	r26, r26
 61a:	bb 1f       	adc	r27, r27
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	aa 1f       	adc	r26, r26
 622:	bb 1f       	adc	r27, r27
 624:	44 0f       	add	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	44 0f       	add	r20, r20
 62e:	55 1f       	adc	r21, r21
 630:	66 1f       	adc	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	9a 01       	movw	r18, r20
 636:	ab 01       	movw	r20, r22
 638:	22 0f       	add	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	44 1f       	adc	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	44 1f       	adc	r20, r20
 646:	55 1f       	adc	r21, r21
 648:	bc 01       	movw	r22, r24
 64a:	cd 01       	movw	r24, r26
 64c:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 650:	21 50       	subi	r18, 0x01	; 1
 652:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
 654:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
 656:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
 658:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
 65e:	88 e1       	ldi	r24, 0x18	; 24
 660:	89 83       	std	Y+1, r24	; 0x01
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
 668:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
 66e:	90 81       	ld	r25, Z
		timeout++;
 670:	2f 5f       	subi	r18, 0xFF	; 255
 672:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
 674:	95 fd       	sbrc	r25, 5
 676:	03 c0       	rjmp	.+6      	; 0x67e <UART_transmit+0x16>
 678:	21 15       	cp	r18, r1
 67a:	31 05       	cpc	r19, r1
 67c:	c1 f7       	brne	.-16     	; 0x66e <UART_transmit+0x6>
	if(0==timeout)
 67e:	23 2b       	or	r18, r19
 680:	19 f0       	breq	.+6      	; 0x688 <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
 682:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
 688:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
 68a:	08 95       	ret

0000068c <export_print_buffer>:
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 68c:	84 e9       	ldi	r24, 0x94	; 148
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	08 95       	ret

00000692 <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	7c 01       	movw	r14, r24
 6a0:	8b 01       	movw	r16, r22
 6a2:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 6a4:	41 11       	cpse	r20, r1
 6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 6a8:	fb 01       	movw	r30, r22
 6aa:	60 81       	ld	r22, Z
                index=0;
 6ac:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 6b0:	c7 01       	movw	r24, r14
 6b2:	0e 94 34 03 	call	0x668	; 0x668 <UART_transmit>
			index++;
 6b6:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 6b8:	f8 01       	movw	r30, r16
 6ba:	ec 0f       	add	r30, r28
 6bc:	f1 1d       	adc	r31, r1
 6be:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 6c0:	61 11       	cpse	r22, r1
 6c2:	f6 cf       	rjmp	.-20     	; 0x6b0 <UART_transmit_string+0x1e>
 6c4:	0c c0       	rjmp	.+24     	; 0x6de <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 6c6:	f8 01       	movw	r30, r16
 6c8:	ec 0f       	add	r30, r28
 6ca:	f1 1d       	adc	r31, r1
 6cc:	60 81       	ld	r22, Z
 6ce:	c7 01       	movw	r24, r14
 6d0:	0e 94 34 03 	call	0x668	; 0x668 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 6d4:	cf 5f       	subi	r28, 0xFF	; 255
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <UART_transmit_string+0x48>
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
 6da:	cd 17       	cp	r28, r29
 6dc:	a0 f3       	brcs	.-24     	; 0x6c6 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	08 95       	ret

000006ec <__udivmodsi4>:
 6ec:	a1 e2       	ldi	r26, 0x21	; 33
 6ee:	1a 2e       	mov	r1, r26
 6f0:	aa 1b       	sub	r26, r26
 6f2:	bb 1b       	sub	r27, r27
 6f4:	fd 01       	movw	r30, r26
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__udivmodsi4_ep>

000006f8 <__udivmodsi4_loop>:
 6f8:	aa 1f       	adc	r26, r26
 6fa:	bb 1f       	adc	r27, r27
 6fc:	ee 1f       	adc	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	a2 17       	cp	r26, r18
 702:	b3 07       	cpc	r27, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	20 f0       	brcs	.+8      	; 0x712 <__udivmodsi4_ep>
 70a:	a2 1b       	sub	r26, r18
 70c:	b3 0b       	sbc	r27, r19
 70e:	e4 0b       	sbc	r30, r20
 710:	f5 0b       	sbc	r31, r21

00000712 <__udivmodsi4_ep>:
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a 94       	dec	r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <__udivmodsi4_loop>
 71e:	60 95       	com	r22
 720:	70 95       	com	r23
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	bd 01       	movw	r22, r26
 72c:	cf 01       	movw	r24, r30
 72e:	08 95       	ret

00000730 <sprintf>:
 730:	ae e0       	ldi	r26, 0x0E	; 14
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	ee e9       	ldi	r30, 0x9E	; 158
 736:	f3 e0       	ldi	r31, 0x03	; 3
 738:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__prologue_saves__+0x1c>
 73c:	0d 89       	ldd	r16, Y+21	; 0x15
 73e:	1e 89       	ldd	r17, Y+22	; 0x16
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	8c 83       	std	Y+4, r24	; 0x04
 744:	1a 83       	std	Y+2, r17	; 0x02
 746:	09 83       	std	Y+1, r16	; 0x01
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f e7       	ldi	r25, 0x7F	; 127
 74c:	9e 83       	std	Y+6, r25	; 0x06
 74e:	8d 83       	std	Y+5, r24	; 0x05
 750:	ae 01       	movw	r20, r28
 752:	47 5e       	subi	r20, 0xE7	; 231
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	6f 89       	ldd	r22, Y+23	; 0x17
 758:	78 8d       	ldd	r23, Y+24	; 0x18
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 ba 03 	call	0x774	; 0x774 <vfprintf>
 762:	ef 81       	ldd	r30, Y+7	; 0x07
 764:	f8 85       	ldd	r31, Y+8	; 0x08
 766:	e0 0f       	add	r30, r16
 768:	f1 1f       	adc	r31, r17
 76a:	10 82       	st	Z, r1
 76c:	2e 96       	adiw	r28, 0x0e	; 14
 76e:	e4 e0       	ldi	r30, 0x04	; 4
 770:	0c 94 75 06 	jmp	0xcea	; 0xcea <__epilogue_restores__+0x1c>

00000774 <vfprintf>:
 774:	ab e0       	ldi	r26, 0x0B	; 11
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 ec       	ldi	r30, 0xC0	; 192
 77a:	f3 e0       	ldi	r31, 0x03	; 3
 77c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__prologue_saves__>
 780:	6c 01       	movw	r12, r24
 782:	7b 01       	movw	r14, r22
 784:	8a 01       	movw	r16, r20
 786:	fc 01       	movw	r30, r24
 788:	17 82       	std	Z+7, r1	; 0x07
 78a:	16 82       	std	Z+6, r1	; 0x06
 78c:	83 81       	ldd	r24, Z+3	; 0x03
 78e:	81 ff       	sbrs	r24, 1
 790:	cc c1       	rjmp	.+920    	; 0xb2a <__stack+0x22b>
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	3c 01       	movw	r6, r24
 798:	f6 01       	movw	r30, r12
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	f7 01       	movw	r30, r14
 79e:	93 fd       	sbrc	r25, 3
 7a0:	85 91       	lpm	r24, Z+
 7a2:	93 ff       	sbrs	r25, 3
 7a4:	81 91       	ld	r24, Z+
 7a6:	7f 01       	movw	r14, r30
 7a8:	88 23       	and	r24, r24
 7aa:	09 f4       	brne	.+2      	; 0x7ae <vfprintf+0x3a>
 7ac:	ba c1       	rjmp	.+884    	; 0xb22 <__stack+0x223>
 7ae:	85 32       	cpi	r24, 0x25	; 37
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <vfprintf+0x4c>
 7b2:	93 fd       	sbrc	r25, 3
 7b4:	85 91       	lpm	r24, Z+
 7b6:	93 ff       	sbrs	r25, 3
 7b8:	81 91       	ld	r24, Z+
 7ba:	7f 01       	movw	r14, r30
 7bc:	85 32       	cpi	r24, 0x25	; 37
 7be:	29 f4       	brne	.+10     	; 0x7ca <vfprintf+0x56>
 7c0:	b6 01       	movw	r22, r12
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 7c8:	e7 cf       	rjmp	.-50     	; 0x798 <vfprintf+0x24>
 7ca:	91 2c       	mov	r9, r1
 7cc:	21 2c       	mov	r2, r1
 7ce:	31 2c       	mov	r3, r1
 7d0:	ff e1       	ldi	r31, 0x1F	; 31
 7d2:	f3 15       	cp	r31, r3
 7d4:	d8 f0       	brcs	.+54     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7d6:	8b 32       	cpi	r24, 0x2B	; 43
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <vfprintf+0x84>
 7da:	38 f4       	brcc	.+14     	; 0x7ea <vfprintf+0x76>
 7dc:	80 32       	cpi	r24, 0x20	; 32
 7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x8a>
 7e0:	83 32       	cpi	r24, 0x23	; 35
 7e2:	a1 f4       	brne	.+40     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e4:	23 2d       	mov	r18, r3
 7e6:	20 61       	ori	r18, 0x10	; 16
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7ea:	8d 32       	cpi	r24, 0x2D	; 45
 7ec:	61 f0       	breq	.+24     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ee:	80 33       	cpi	r24, 0x30	; 48
 7f0:	69 f4       	brne	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f2:	23 2d       	mov	r18, r3
 7f4:	21 60       	ori	r18, 0x01	; 1
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7f8:	83 2d       	mov	r24, r3
 7fa:	82 60       	ori	r24, 0x02	; 2
 7fc:	38 2e       	mov	r3, r24
 7fe:	e3 2d       	mov	r30, r3
 800:	e4 60       	ori	r30, 0x04	; 4
 802:	3e 2e       	mov	r3, r30
 804:	2a c0       	rjmp	.+84     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 806:	f3 2d       	mov	r31, r3
 808:	f8 60       	ori	r31, 0x08	; 8
 80a:	1d c0       	rjmp	.+58     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 80c:	37 fc       	sbrc	r3, 7
 80e:	2d c0       	rjmp	.+90     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 810:	20 ed       	ldi	r18, 0xD0	; 208
 812:	28 0f       	add	r18, r24
 814:	2a 30       	cpi	r18, 0x0A	; 10
 816:	40 f0       	brcs	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 818:	8e 32       	cpi	r24, 0x2E	; 46
 81a:	b9 f4       	brne	.+46     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 81c:	36 fc       	sbrc	r3, 6
 81e:	81 c1       	rjmp	.+770    	; 0xb22 <__stack+0x223>
 820:	23 2d       	mov	r18, r3
 822:	20 64       	ori	r18, 0x40	; 64
 824:	32 2e       	mov	r3, r18
 826:	19 c0       	rjmp	.+50     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 828:	36 fe       	sbrs	r3, 6
 82a:	06 c0       	rjmp	.+12     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	98 9e       	mul	r9, r24
 830:	20 0d       	add	r18, r0
 832:	11 24       	eor	r1, r1
 834:	92 2e       	mov	r9, r18
 836:	11 c0       	rjmp	.+34     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 838:	ea e0       	ldi	r30, 0x0A	; 10
 83a:	2e 9e       	mul	r2, r30
 83c:	20 0d       	add	r18, r0
 83e:	11 24       	eor	r1, r1
 840:	22 2e       	mov	r2, r18
 842:	f3 2d       	mov	r31, r3
 844:	f0 62       	ori	r31, 0x20	; 32
 846:	3f 2e       	mov	r3, r31
 848:	08 c0       	rjmp	.+16     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84a:	8c 36       	cpi	r24, 0x6C	; 108
 84c:	21 f4       	brne	.+8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84e:	83 2d       	mov	r24, r3
 850:	80 68       	ori	r24, 0x80	; 128
 852:	38 2e       	mov	r3, r24
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	88 36       	cpi	r24, 0x68	; 104
 858:	41 f4       	brne	.+16     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85a:	f7 01       	movw	r30, r14
 85c:	93 fd       	sbrc	r25, 3
 85e:	85 91       	lpm	r24, Z+
 860:	93 ff       	sbrs	r25, 3
 862:	81 91       	ld	r24, Z+
 864:	7f 01       	movw	r14, r30
 866:	81 11       	cpse	r24, r1
 868:	b3 cf       	rjmp	.-154    	; 0x7d0 <vfprintf+0x5c>
 86a:	98 2f       	mov	r25, r24
 86c:	9f 7d       	andi	r25, 0xDF	; 223
 86e:	95 54       	subi	r25, 0x45	; 69
 870:	93 30       	cpi	r25, 0x03	; 3
 872:	28 f4       	brcc	.+10     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 874:	0c 5f       	subi	r16, 0xFC	; 252
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	9f e3       	ldi	r25, 0x3F	; 63
 87a:	99 83       	std	Y+1, r25	; 0x01
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 87e:	83 36       	cpi	r24, 0x63	; 99
 880:	31 f0       	breq	.+12     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 882:	83 37       	cpi	r24, 0x73	; 115
 884:	71 f0       	breq	.+28     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 886:	83 35       	cpi	r24, 0x53	; 83
 888:	09 f0       	breq	.+2      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 88a:	59 c0       	rjmp	.+178    	; 0x93e <__stack+0x3f>
 88c:	21 c0       	rjmp	.+66     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 88e:	f8 01       	movw	r30, r16
 890:	80 81       	ld	r24, Z
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	88 24       	eor	r8, r8
 89a:	83 94       	inc	r8
 89c:	91 2c       	mov	r9, r1
 89e:	53 01       	movw	r10, r6
 8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8a2:	28 01       	movw	r4, r16
 8a4:	f2 e0       	ldi	r31, 0x02	; 2
 8a6:	4f 0e       	add	r4, r31
 8a8:	51 1c       	adc	r5, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	36 fe       	sbrs	r3, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8b4:	69 2d       	mov	r22, r9
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strnlen>
 8c4:	4c 01       	movw	r8, r24
 8c6:	82 01       	movw	r16, r4
 8c8:	f3 2d       	mov	r31, r3
 8ca:	ff 77       	andi	r31, 0x7F	; 127
 8cc:	3f 2e       	mov	r3, r31
 8ce:	16 c0       	rjmp	.+44     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8d0:	28 01       	movw	r4, r16
 8d2:	22 e0       	ldi	r18, 0x02	; 2
 8d4:	42 0e       	add	r4, r18
 8d6:	51 1c       	adc	r5, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	36 fe       	sbrs	r3, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e2:	69 2d       	mov	r22, r9
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen_P>
 8f2:	4c 01       	movw	r8, r24
 8f4:	f3 2d       	mov	r31, r3
 8f6:	f0 68       	ori	r31, 0x80	; 128
 8f8:	3f 2e       	mov	r3, r31
 8fa:	82 01       	movw	r16, r4
 8fc:	33 fc       	sbrc	r3, 3
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <__stack+0x37>
 900:	82 2d       	mov	r24, r2
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 16       	cp	r8, r24
 906:	99 06       	cpc	r9, r25
 908:	b0 f4       	brcc	.+44     	; 0x936 <__stack+0x37>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 914:	2a 94       	dec	r2
 916:	f4 cf       	rjmp	.-24     	; 0x900 <__stack+0x1>
 918:	f5 01       	movw	r30, r10
 91a:	37 fc       	sbrc	r3, 7
 91c:	85 91       	lpm	r24, Z+
 91e:	37 fe       	sbrs	r3, 7
 920:	81 91       	ld	r24, Z+
 922:	5f 01       	movw	r10, r30
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 92c:	21 10       	cpse	r2, r1
 92e:	2a 94       	dec	r2
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	82 1a       	sub	r8, r18
 934:	91 08       	sbc	r9, r1
 936:	81 14       	cp	r8, r1
 938:	91 04       	cpc	r9, r1
 93a:	71 f7       	brne	.-36     	; 0x918 <__stack+0x19>
 93c:	e8 c0       	rjmp	.+464    	; 0xb0e <__stack+0x20f>
 93e:	84 36       	cpi	r24, 0x64	; 100
 940:	11 f0       	breq	.+4      	; 0x946 <__stack+0x47>
 942:	89 36       	cpi	r24, 0x69	; 105
 944:	41 f5       	brne	.+80     	; 0x996 <__stack+0x97>
 946:	f8 01       	movw	r30, r16
 948:	37 fe       	sbrs	r3, 7
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0x5b>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	08 c0       	rjmp	.+16     	; 0x96a <__stack+0x6b>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	07 2e       	mov	r0, r23
 960:	00 0c       	add	r0, r0
 962:	88 0b       	sbc	r24, r24
 964:	99 0b       	sbc	r25, r25
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	f3 2d       	mov	r31, r3
 96c:	ff 76       	andi	r31, 0x6F	; 111
 96e:	3f 2e       	mov	r3, r31
 970:	97 ff       	sbrs	r25, 7
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	f0 68       	ori	r31, 0x80	; 128
 984:	3f 2e       	mov	r3, r31
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	a3 01       	movw	r20, r6
 98c:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 990:	88 2e       	mov	r8, r24
 992:	86 18       	sub	r8, r6
 994:	45 c0       	rjmp	.+138    	; 0xa20 <__stack+0x121>
 996:	85 37       	cpi	r24, 0x75	; 117
 998:	31 f4       	brne	.+12     	; 0x9a6 <__stack+0xa7>
 99a:	23 2d       	mov	r18, r3
 99c:	2f 7e       	andi	r18, 0xEF	; 239
 99e:	b2 2e       	mov	r11, r18
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <__stack+0xf1>
 9a6:	93 2d       	mov	r25, r3
 9a8:	99 7f       	andi	r25, 0xF9	; 249
 9aa:	b9 2e       	mov	r11, r25
 9ac:	8f 36       	cpi	r24, 0x6F	; 111
 9ae:	c1 f0       	breq	.+48     	; 0x9e0 <__stack+0xe1>
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	88 35       	cpi	r24, 0x58	; 88
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__stack+0xd5>
 9b6:	b5 c0       	rjmp	.+362    	; 0xb22 <__stack+0x223>
 9b8:	80 37       	cpi	r24, 0x70	; 112
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	88 37       	cpi	r24, 0x78	; 120
 9be:	21 f0       	breq	.+8      	; 0x9c8 <__stack+0xc9>
 9c0:	b0 c0       	rjmp	.+352    	; 0xb22 <__stack+0x223>
 9c2:	e9 2f       	mov	r30, r25
 9c4:	e0 61       	ori	r30, 0x10	; 16
 9c6:	be 2e       	mov	r11, r30
 9c8:	b4 fe       	sbrs	r11, 4
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
 9cc:	fb 2d       	mov	r31, r11
 9ce:	f4 60       	ori	r31, 0x04	; 4
 9d0:	bf 2e       	mov	r11, r31
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__stack+0xe7>
 9d4:	34 fe       	sbrs	r3, 4
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <__stack+0xed>
 9d8:	29 2f       	mov	r18, r25
 9da:	26 60       	ori	r18, 0x06	; 6
 9dc:	b2 2e       	mov	r11, r18
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
 9e0:	28 e0       	ldi	r18, 0x08	; 8
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0xf1>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	32 e0       	ldi	r19, 0x02	; 2
 9f0:	f8 01       	movw	r30, r16
 9f2:	b7 fe       	sbrs	r11, 7
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
 a04:	60 81       	ld	r22, Z
 a06:	71 81       	ldd	r23, Z+1	; 0x01
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 5f       	subi	r16, 0xFE	; 254
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	a3 01       	movw	r20, r6
 a12:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 a16:	88 2e       	mov	r8, r24
 a18:	86 18       	sub	r8, r6
 a1a:	fb 2d       	mov	r31, r11
 a1c:	ff 77       	andi	r31, 0x7F	; 127
 a1e:	3f 2e       	mov	r3, r31
 a20:	36 fe       	sbrs	r3, 6
 a22:	0d c0       	rjmp	.+26     	; 0xa3e <__stack+0x13f>
 a24:	23 2d       	mov	r18, r3
 a26:	2e 7f       	andi	r18, 0xFE	; 254
 a28:	a2 2e       	mov	r10, r18
 a2a:	89 14       	cp	r8, r9
 a2c:	58 f4       	brcc	.+22     	; 0xa44 <__stack+0x145>
 a2e:	34 fe       	sbrs	r3, 4
 a30:	0b c0       	rjmp	.+22     	; 0xa48 <__stack+0x149>
 a32:	32 fc       	sbrc	r3, 2
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <__stack+0x149>
 a36:	83 2d       	mov	r24, r3
 a38:	8e 7e       	andi	r24, 0xEE	; 238
 a3a:	a8 2e       	mov	r10, r24
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__stack+0x149>
 a3e:	b8 2c       	mov	r11, r8
 a40:	a3 2c       	mov	r10, r3
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <__stack+0x14b>
 a44:	b8 2c       	mov	r11, r8
 a46:	01 c0       	rjmp	.+2      	; 0xa4a <__stack+0x14b>
 a48:	b9 2c       	mov	r11, r9
 a4a:	a4 fe       	sbrs	r10, 4
 a4c:	0f c0       	rjmp	.+30     	; 0xa6c <__stack+0x16d>
 a4e:	fe 01       	movw	r30, r28
 a50:	e8 0d       	add	r30, r8
 a52:	f1 1d       	adc	r31, r1
 a54:	80 81       	ld	r24, Z
 a56:	80 33       	cpi	r24, 0x30	; 48
 a58:	21 f4       	brne	.+8      	; 0xa62 <__stack+0x163>
 a5a:	9a 2d       	mov	r25, r10
 a5c:	99 7e       	andi	r25, 0xE9	; 233
 a5e:	a9 2e       	mov	r10, r25
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__stack+0x175>
 a62:	a2 fe       	sbrs	r10, 2
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x173>
 a66:	b3 94       	inc	r11
 a68:	b3 94       	inc	r11
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__stack+0x175>
 a6c:	8a 2d       	mov	r24, r10
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
 a72:	b3 94       	inc	r11
 a74:	a3 fc       	sbrc	r10, 3
 a76:	11 c0       	rjmp	.+34     	; 0xa9a <__stack+0x19b>
 a78:	a0 fe       	sbrs	r10, 0
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
 a7c:	b2 14       	cp	r11, r2
 a7e:	88 f4       	brcc	.+34     	; 0xaa2 <__stack+0x1a3>
 a80:	28 0c       	add	r2, r8
 a82:	92 2c       	mov	r9, r2
 a84:	9b 18       	sub	r9, r11
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__stack+0x1a5>
 a88:	b2 14       	cp	r11, r2
 a8a:	60 f4       	brcc	.+24     	; 0xaa4 <__stack+0x1a5>
 a8c:	b6 01       	movw	r22, r12
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 a96:	b3 94       	inc	r11
 a98:	f7 cf       	rjmp	.-18     	; 0xa88 <__stack+0x189>
 a9a:	b2 14       	cp	r11, r2
 a9c:	18 f4       	brcc	.+6      	; 0xaa4 <__stack+0x1a5>
 a9e:	2b 18       	sub	r2, r11
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x1a7>
 aa2:	98 2c       	mov	r9, r8
 aa4:	21 2c       	mov	r2, r1
 aa6:	a4 fe       	sbrs	r10, 4
 aa8:	10 c0       	rjmp	.+32     	; 0xaca <__stack+0x1cb>
 aaa:	b6 01       	movw	r22, r12
 aac:	80 e3       	ldi	r24, 0x30	; 48
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	17 c0       	rjmp	.+46     	; 0xae6 <__stack+0x1e7>
 ab8:	a1 fc       	sbrc	r10, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x1c3>
 abc:	88 e7       	ldi	r24, 0x78	; 120
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <__stack+0x1c7>
 ac2:	88 e5       	ldi	r24, 0x58	; 88
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b6 01       	movw	r22, r12
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <__stack+0x1e3>
 aca:	8a 2d       	mov	r24, r10
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	59 f0       	breq	.+22     	; 0xae6 <__stack+0x1e7>
 ad0:	a1 fe       	sbrs	r10, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x1d9>
 ad4:	8b e2       	ldi	r24, 0x2B	; 43
 ad6:	01 c0       	rjmp	.+2      	; 0xada <__stack+0x1db>
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	a7 fc       	sbrc	r10, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b6 01       	movw	r22, r12
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ae6:	89 14       	cp	r8, r9
 ae8:	38 f4       	brcc	.+14     	; 0xaf8 <__stack+0x1f9>
 aea:	b6 01       	movw	r22, r12
 aec:	80 e3       	ldi	r24, 0x30	; 48
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 af4:	9a 94       	dec	r9
 af6:	f7 cf       	rjmp	.-18     	; 0xae6 <__stack+0x1e7>
 af8:	8a 94       	dec	r8
 afa:	f3 01       	movw	r30, r6
 afc:	e8 0d       	add	r30, r8
 afe:	f1 1d       	adc	r31, r1
 b00:	80 81       	ld	r24, Z
 b02:	b6 01       	movw	r22, r12
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b0a:	81 10       	cpse	r8, r1
 b0c:	f5 cf       	rjmp	.-22     	; 0xaf8 <__stack+0x1f9>
 b0e:	22 20       	and	r2, r2
 b10:	09 f4       	brne	.+2      	; 0xb14 <__stack+0x215>
 b12:	42 ce       	rjmp	.-892    	; 0x798 <vfprintf+0x24>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b1e:	2a 94       	dec	r2
 b20:	f6 cf       	rjmp	.-20     	; 0xb0e <__stack+0x20f>
 b22:	f6 01       	movw	r30, r12
 b24:	86 81       	ldd	r24, Z+6	; 0x06
 b26:	97 81       	ldd	r25, Z+7	; 0x07
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	2b 96       	adiw	r28, 0x0b	; 11
 b30:	e2 e1       	ldi	r30, 0x12	; 18
 b32:	0c 94 67 06 	jmp	0xcce	; 0xcce <__epilogue_restores__>

00000b36 <strnlen_P>:
 b36:	fc 01       	movw	r30, r24
 b38:	05 90       	lpm	r0, Z+
 b3a:	61 50       	subi	r22, 0x01	; 1
 b3c:	70 40       	sbci	r23, 0x00	; 0
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen_P+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <strnlen>:
 b4c:	fc 01       	movw	r30, r24
 b4e:	61 50       	subi	r22, 0x01	; 1
 b50:	70 40       	sbci	r23, 0x00	; 0
 b52:	01 90       	ld	r0, Z+
 b54:	01 10       	cpse	r0, r1
 b56:	d8 f7       	brcc	.-10     	; 0xb4e <strnlen+0x2>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	8e 0f       	add	r24, r30
 b5e:	9f 1f       	adc	r25, r31
 b60:	08 95       	ret

00000b62 <fputc>:
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	fb 01       	movw	r30, r22
 b6c:	23 81       	ldd	r18, Z+3	; 0x03
 b6e:	21 fd       	sbrc	r18, 1
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <fputc+0x16>
 b72:	8f ef       	ldi	r24, 0xFF	; 255
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	2c c0       	rjmp	.+88     	; 0xbd0 <fputc+0x6e>
 b78:	22 ff       	sbrs	r18, 2
 b7a:	16 c0       	rjmp	.+44     	; 0xba8 <fputc+0x46>
 b7c:	46 81       	ldd	r20, Z+6	; 0x06
 b7e:	57 81       	ldd	r21, Z+7	; 0x07
 b80:	24 81       	ldd	r18, Z+4	; 0x04
 b82:	35 81       	ldd	r19, Z+5	; 0x05
 b84:	42 17       	cp	r20, r18
 b86:	53 07       	cpc	r21, r19
 b88:	44 f4       	brge	.+16     	; 0xb9a <fputc+0x38>
 b8a:	a0 81       	ld	r26, Z
 b8c:	b1 81       	ldd	r27, Z+1	; 0x01
 b8e:	9d 01       	movw	r18, r26
 b90:	2f 5f       	subi	r18, 0xFF	; 255
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	31 83       	std	Z+1, r19	; 0x01
 b96:	20 83       	st	Z, r18
 b98:	8c 93       	st	X, r24
 b9a:	26 81       	ldd	r18, Z+6	; 0x06
 b9c:	37 81       	ldd	r19, Z+7	; 0x07
 b9e:	2f 5f       	subi	r18, 0xFF	; 255
 ba0:	3f 4f       	sbci	r19, 0xFF	; 255
 ba2:	37 83       	std	Z+7, r19	; 0x07
 ba4:	26 83       	std	Z+6, r18	; 0x06
 ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <fputc+0x6e>
 ba8:	8b 01       	movw	r16, r22
 baa:	ec 01       	movw	r28, r24
 bac:	fb 01       	movw	r30, r22
 bae:	00 84       	ldd	r0, Z+8	; 0x08
 bb0:	f1 85       	ldd	r31, Z+9	; 0x09
 bb2:	e0 2d       	mov	r30, r0
 bb4:	09 95       	icall
 bb6:	89 2b       	or	r24, r25
 bb8:	e1 f6       	brne	.-72     	; 0xb72 <fputc+0x10>
 bba:	d8 01       	movw	r26, r16
 bbc:	16 96       	adiw	r26, 0x06	; 6
 bbe:	8d 91       	ld	r24, X+
 bc0:	9c 91       	ld	r25, X
 bc2:	17 97       	sbiw	r26, 0x07	; 7
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	17 96       	adiw	r26, 0x07	; 7
 bc8:	9c 93       	st	X, r25
 bca:	8e 93       	st	-X, r24
 bcc:	16 97       	sbiw	r26, 0x06	; 6
 bce:	ce 01       	movw	r24, r28
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	08 95       	ret

00000bda <__ultoa_invert>:
 bda:	fa 01       	movw	r30, r20
 bdc:	aa 27       	eor	r26, r26
 bde:	28 30       	cpi	r18, 0x08	; 8
 be0:	51 f1       	breq	.+84     	; 0xc36 <__ultoa_invert+0x5c>
 be2:	20 31       	cpi	r18, 0x10	; 16
 be4:	81 f1       	breq	.+96     	; 0xc46 <__ultoa_invert+0x6c>
 be6:	e8 94       	clt
 be8:	6f 93       	push	r22
 bea:	6e 7f       	andi	r22, 0xFE	; 254
 bec:	6e 5f       	subi	r22, 0xFE	; 254
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	af 4f       	sbci	r26, 0xFF	; 255
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	3e d0       	rcall	.+124    	; 0xc76 <__ultoa_invert+0x9c>
 bfa:	b4 e0       	ldi	r27, 0x04	; 4
 bfc:	3c d0       	rcall	.+120    	; 0xc76 <__ultoa_invert+0x9c>
 bfe:	67 0f       	add	r22, r23
 c00:	78 1f       	adc	r23, r24
 c02:	89 1f       	adc	r24, r25
 c04:	9a 1f       	adc	r25, r26
 c06:	a1 1d       	adc	r26, r1
 c08:	68 0f       	add	r22, r24
 c0a:	79 1f       	adc	r23, r25
 c0c:	8a 1f       	adc	r24, r26
 c0e:	91 1d       	adc	r25, r1
 c10:	a1 1d       	adc	r26, r1
 c12:	6a 0f       	add	r22, r26
 c14:	71 1d       	adc	r23, r1
 c16:	81 1d       	adc	r24, r1
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	20 d0       	rcall	.+64     	; 0xc5e <__ultoa_invert+0x84>
 c1e:	09 f4       	brne	.+2      	; 0xc22 <__ultoa_invert+0x48>
 c20:	68 94       	set
 c22:	3f 91       	pop	r19
 c24:	2a e0       	ldi	r18, 0x0A	; 10
 c26:	26 9f       	mul	r18, r22
 c28:	11 24       	eor	r1, r1
 c2a:	30 19       	sub	r19, r0
 c2c:	30 5d       	subi	r19, 0xD0	; 208
 c2e:	31 93       	st	Z+, r19
 c30:	de f6       	brtc	.-74     	; 0xbe8 <__ultoa_invert+0xe>
 c32:	cf 01       	movw	r24, r30
 c34:	08 95       	ret
 c36:	46 2f       	mov	r20, r22
 c38:	47 70       	andi	r20, 0x07	; 7
 c3a:	40 5d       	subi	r20, 0xD0	; 208
 c3c:	41 93       	st	Z+, r20
 c3e:	b3 e0       	ldi	r27, 0x03	; 3
 c40:	0f d0       	rcall	.+30     	; 0xc60 <__ultoa_invert+0x86>
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__ultoa_invert+0x5c>
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <__ultoa_invert+0x58>
 c46:	46 2f       	mov	r20, r22
 c48:	4f 70       	andi	r20, 0x0F	; 15
 c4a:	40 5d       	subi	r20, 0xD0	; 208
 c4c:	4a 33       	cpi	r20, 0x3A	; 58
 c4e:	18 f0       	brcs	.+6      	; 0xc56 <__ultoa_invert+0x7c>
 c50:	49 5d       	subi	r20, 0xD9	; 217
 c52:	31 fd       	sbrc	r19, 1
 c54:	40 52       	subi	r20, 0x20	; 32
 c56:	41 93       	st	Z+, r20
 c58:	02 d0       	rcall	.+4      	; 0xc5e <__ultoa_invert+0x84>
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__ultoa_invert+0x6c>
 c5c:	ea cf       	rjmp	.-44     	; 0xc32 <__ultoa_invert+0x58>
 c5e:	b4 e0       	ldi	r27, 0x04	; 4
 c60:	a6 95       	lsr	r26
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0x86>
 c6e:	00 97       	sbiw	r24, 0x00	; 0
 c70:	61 05       	cpc	r22, r1
 c72:	71 05       	cpc	r23, r1
 c74:	08 95       	ret
 c76:	9b 01       	movw	r18, r22
 c78:	ac 01       	movw	r20, r24
 c7a:	0a 2e       	mov	r0, r26
 c7c:	06 94       	lsr	r0
 c7e:	57 95       	ror	r21
 c80:	47 95       	ror	r20
 c82:	37 95       	ror	r19
 c84:	27 95       	ror	r18
 c86:	ba 95       	dec	r27
 c88:	c9 f7       	brne	.-14     	; 0xc7c <__ultoa_invert+0xa2>
 c8a:	62 0f       	add	r22, r18
 c8c:	73 1f       	adc	r23, r19
 c8e:	84 1f       	adc	r24, r20
 c90:	95 1f       	adc	r25, r21
 c92:	a0 1d       	adc	r26, r0
 c94:	08 95       	ret

00000c96 <__prologue_saves__>:
 c96:	2f 92       	push	r2
 c98:	3f 92       	push	r3
 c9a:	4f 92       	push	r4
 c9c:	5f 92       	push	r5
 c9e:	6f 92       	push	r6
 ca0:	7f 92       	push	r7
 ca2:	8f 92       	push	r8
 ca4:	9f 92       	push	r9
 ca6:	af 92       	push	r10
 ca8:	bf 92       	push	r11
 caa:	cf 92       	push	r12
 cac:	df 92       	push	r13
 cae:	ef 92       	push	r14
 cb0:	ff 92       	push	r15
 cb2:	0f 93       	push	r16
 cb4:	1f 93       	push	r17
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	cd b7       	in	r28, 0x3d	; 61
 cbc:	de b7       	in	r29, 0x3e	; 62
 cbe:	ca 1b       	sub	r28, r26
 cc0:	db 0b       	sbc	r29, r27
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	f8 94       	cli
 cc6:	de bf       	out	0x3e, r29	; 62
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	cd bf       	out	0x3d, r28	; 61
 ccc:	09 94       	ijmp

00000cce <__epilogue_restores__>:
 cce:	2a 88       	ldd	r2, Y+18	; 0x12
 cd0:	39 88       	ldd	r3, Y+17	; 0x11
 cd2:	48 88       	ldd	r4, Y+16	; 0x10
 cd4:	5f 84       	ldd	r5, Y+15	; 0x0f
 cd6:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cda:	8c 84       	ldd	r8, Y+12	; 0x0c
 cdc:	9b 84       	ldd	r9, Y+11	; 0x0b
 cde:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce0:	b9 84       	ldd	r11, Y+9	; 0x09
 ce2:	c8 84       	ldd	r12, Y+8	; 0x08
 ce4:	df 80       	ldd	r13, Y+7	; 0x07
 ce6:	ee 80       	ldd	r14, Y+6	; 0x06
 ce8:	fd 80       	ldd	r15, Y+5	; 0x05
 cea:	0c 81       	ldd	r16, Y+4	; 0x04
 cec:	1b 81       	ldd	r17, Y+3	; 0x03
 cee:	aa 81       	ldd	r26, Y+2	; 0x02
 cf0:	b9 81       	ldd	r27, Y+1	; 0x01
 cf2:	ce 0f       	add	r28, r30
 cf4:	d1 1d       	adc	r29, r1
 cf6:	0f b6       	in	r0, 0x3f	; 63
 cf8:	f8 94       	cli
 cfa:	de bf       	out	0x3e, r29	; 62
 cfc:	0f be       	out	0x3f, r0	; 63
 cfe:	cd bf       	out	0x3d, r28	; 61
 d00:	ed 01       	movw	r28, r26
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
